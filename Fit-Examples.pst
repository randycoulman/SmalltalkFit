<?xml version="1.0"?><st-source><!-- Name: Fit-ExamplesNotice:                     GNU GENERAL PUBLIC LICENSE                       Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.                            Preamble  The licenses for most software are designed to take away yourfreedom to share and change it.  By contrast, the GNU General PublicLicense is intended to guarantee your freedom to share and change freesoftware- to make sure the software is free for all its users.  ThisGeneral Public License applies to most of the Free SoftwareFoundation's software and to any other program whose authors commit tousing it.  (Some other Free Software Foundation software is covered bythe GNU Lesser General Public License instead.)  You can apply it toyour programs, too.  When we speak of free software, we are referring to freedom, notprice.  Our General Public Licenses are designed to make sure that youhave the freedom to distribute copies of free software (and charge forthis service if you wish), that you receive source code or can get itif you want it, that you can change the software or use pieces of itin new free programs; and that you know you can do these things.  To protect your rights, we need to make restrictions that forbidanyone to deny you these rights or to ask you to surrender the rights.These restrictions translate to certain responsibilities for you if youdistribute copies of the software, or if you modify it.  For example, if you distribute copies of such a program, whethergratis or for a fee, you must give the recipients all the rights thatyou have.  You must make sure that they, too, receive or can get thesource code.  And you must show them these terms so they know theirrights.  We protect your rights with two steps: (1) copyright the software, and(2) offer you this license which gives you legal permission to copy,distribute and/or modify the software.  Also, for each author's protection and ours, we want to make certainthat everyone understands that there is no warranty for this freesoftware.  If the software is modified by someone else and passed on, wewant its recipients to know that what they have is not the original, sothat any problems introduced by others will not reflect on the originalauthors' reputations.  Finally, any free program is threatened constantly by softwarepatents.  We wish to avoid the danger that redistributors of a freeprogram will individually obtain patent licenses, in effect making theprogram proprietary.  To prevent this, we have made it clear that anypatent must be licensed for everyone's free use or not licensed at all.  The precise terms and conditions for copying, distribution andmodification follow.                    GNU GENERAL PUBLIC LICENSE   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION  0. This License applies to any program or other work which containsa notice placed by the copyright holder saying it may be distributedunder the terms of this General Public License.  The "Program", below,refers to any such program or work, and a "work based on the Program"means either the Program or any derivative work under copyright law:that is to say, a work containing the Program or a portion of it,either verbatim or with modifications and/or translated into anotherlanguage.  (Hereinafter, translation is included without limitation inthe term "modification".)  Each licensee is addressed as "you".Activities other than copying, distribution and modification are notcovered by this License; they are outside its scope.  The act ofrunning the Program is not restricted, and the output from the Programis covered only if its contents constitute a work based on theProgram (independent of having been made by running the Program).Whether that is true depends on what the Program does.  1. You may copy and distribute verbatim copies of the Program'ssource code as you receive it, in any medium, provided that youconspicuously and appropriately publish on each copy an appropriatecopyright notice and disclaimer of warranty; keep intact all thenotices that refer to this License and to the absence of any warranty;and give any other recipients of the Program a copy of this Licensealong with the Program.You may charge a fee for the physical act of transferring a copy, andyou may at your option offer warranty protection in exchange for a fee.  2. You may modify your copy or copies of the Program or any portionof it, thus forming a work based on the Program, and copy anddistribute such modifications or work under the terms of Section 1above, provided that you also meet all of these conditions:    a) You must cause the modified files to carry prominent notices    stating that you changed the files and the date of any change.    b) You must cause any work that you distribute or publish, that in    whole or in part contains or is derived from the Program or any    part thereof, to be licensed as a whole at no charge to all third    parties under the terms of this License.    c) If the modified program normally reads commands interactively    when run, you must cause it, when started running for such    interactive use in the most ordinary way, to print or display an    announcement including an appropriate copyright notice and a    notice that there is no warranty (or else, saying that you provide    a warranty) and that users may redistribute the program under    these conditions, and telling the user how to view a copy of this    License.  (Exception: if the Program itself is interactive but    does not normally print such an announcement, your work based on    the Program is not required to print an announcement.)These requirements apply to the modified work as a whole.  Ifidentifiable sections of that work are not derived from the Program,and can be reasonably considered independent and separate works inthemselves, then this License, and its terms, do not apply to thosesections when you distribute them as separate works.  But when youdistribute the same sections as part of a whole which is a work basedon the Program, the distribution of the whole must be on the terms ofthis License, whose permissions for other licensees extend to theentire whole, and thus to each and every part regardless of who wrote it.Thus, it is not the intent of this section to claim rights or contestyour rights to work written entirely by you; rather, the intent is toexercise the right to control the distribution of derivative orcollective works based on the Program.In addition, mere aggregation of another work not based on the Programwith the Program (or with a work based on the Program) on a volume ofa storage or distribution medium does not bring the other work underthe scope of this License.  3. You may copy and distribute the Program (or a work based on it,under Section 2) in object code or executable form under the terms ofSections 1 and 2 above provided that you also do one of the following:    a) Accompany it with the complete corresponding machine-readable    source code, which must be distributed under the terms of Sections    1 and 2 above on a medium customarily used for software interchange; or,    b) Accompany it with a written offer, valid for at least three    years, to give any third party, for a charge no more than your    cost of physically performing source distribution, a complete    machine-readable copy of the corresponding source code, to be    distributed under the terms of Sections 1 and 2 above on a medium    customarily used for software interchange; or,    c) Accompany it with the information you received as to the offer    to distribute corresponding source code.  (This alternative is    allowed only for noncommercial distribution and only if you    received the program in object code or executable form with such    an offer, in accord with Subsection b above.)The source code for a work means the preferred form of the work formaking modifications to it.  For an executable work, complete sourcecode means all the source code for all modules it contains, plus anyassociated interface definition files, plus the scripts used tocontrol compilation and installation of the executable.  However, as aspecial exception, the source code distributed need not includeanything that is normally distributed (in either source or binaryform) with the major components (compiler, kernel, and so on) of theoperating system on which the executable runs, unless that componentitself accompanies the executable.If distribution of executable or object code is made by offeringaccess to copy from a designated place, then offering equivalentaccess to copy the source code from the same place counts asdistribution of the source code, even though third parties are notcompelled to copy the source along with the object code.  4. You may not copy, modify, sublicense, or distribute the Programexcept as expressly provided under this License.  Any attemptotherwise to copy, modify, sublicense or distribute the Program isvoid, and will automatically terminate your rights under this License.However, parties who have received copies, or rights, from you underthis License will not have their licenses terminated so long as suchparties remain in full compliance.  5. You are not required to accept this License, since you have notsigned it.  However, nothing else grants you permission to modify ordistribute the Program or its derivative works.  These actions areprohibited by law if you do not accept this License.  Therefore, bymodifying or distributing the Program (or any work based on theProgram), you indicate your acceptance of this License to do so, andall its terms and conditions for copying, distributing or modifyingthe Program or works based on it.  6. Each time you redistribute the Program (or any work based on theProgram), the recipient automatically receives a license from theoriginal licensor to copy, distribute or modify the Program subject tothese terms and conditions.  You may not impose any furtherrestrictions on the recipients' exercise of the rights granted herein.You are not responsible for enforcing compliance by third parties tothis License.  7. If, as a consequence of a court judgment or allegation of patentinfringement or for any other reason (not limited to patent issues),conditions are imposed on you (whether by court order, agreement orotherwise) that contradict the conditions of this License, they do notexcuse you from the conditions of this License.  If you cannotdistribute so as to satisfy simultaneously your obligations under thisLicense and any other pertinent obligations, then as a consequence youmay not distribute the Program at all.  For example, if a patentlicense would not permit royalty-free redistribution of the Program byall those who receive copies directly or indirectly through you, thenthe only way you could satisfy both it and this License would be torefrain entirely from distribution of the Program.If any portion of this section is held invalid or unenforceable underany particular circumstance, the balance of the section is intended toapply and the section as a whole is intended to apply in othercircumstances.It is not the purpose of this section to induce you to infringe anypatents or other property right claims or to contest validity of anysuch claims; this section has the sole purpose of protecting theintegrity of the free software distribution system, which isimplemented by public license practices.  Many people have madegenerous contributions to the wide range of software distributedthrough that system in reliance on consistent application of thatsystem; it is up to the author/donor to decide if he or she is willingto distribute software through any other system and a licensee cannotimpose that choice.This section is intended to make thoroughly clear what is believed tobe a consequence of the rest of this License.  8. If the distribution and/or use of the Program is restricted incertain countries either by patents or by copyrighted interfaces, theoriginal copyright holder who places the Program under this Licensemay add an explicit geographical distribution limitation excludingthose countries, so that distribution is permitted only in or amongcountries not thus excluded.  In such case, this License incorporatesthe limitation as if written in the body of this License.  9. The Free Software Foundation may publish revised and/or new versionsof the General Public License from time to time.  Such new versions willbe similar in spirit to the present version, but may differ in detail toaddress new problems or concerns.Each version is given a distinguishing version number.  If the Programspecifies a version number of this License which applies to it and "anylater version", you have the option of following the terms and conditionseither of that version or of any later version published by the FreeSoftware Foundation.  If the Program does not specify a version number ofthis License, you may choose any version ever published by the Free SoftwareFoundation.  10. If you wish to incorporate parts of the Program into other freeprograms whose distribution conditions are different, write to the authorto ask for permission.  For software which is copyrighted by the FreeSoftware Foundation, write to the Free Software Foundation; we sometimesmake exceptions for this.  Our decision will be guided by the two goalsof preserving the free status of all derivatives of our free software andof promoting the sharing and reuse of software generally.                            NO WARRANTY  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTYFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHENOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIESPROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSEDOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OFMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK ASTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THEPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,REPAIR OR CORRECTION.  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITINGWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/ORREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISINGOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITEDTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BYYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHERPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THEPOSSIBILITY OF SUCH DAMAGES.                     END OF TERMS AND CONDITIONS            How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatestpossible use to the public, the best way to achieve this is to make itfree software which everyone can redistribute and change under these terms.  To do so, attach the following notices to the program.  It is safestto attach them to the start of each source file to most effectivelyconvey the exclusion of warranty; and each file should have at leastthe "copyright" line and a pointer to where the full notice is found.    <one line to give the program's name and a brief idea of what it does.>    Copyright (C) <year>  <name of author>    This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License along    with this program; if not, write to the Free Software Foundation, Inc.,    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.Also add information on how to contact you by electronic and paper mail.If the program is interactive, make it output a short notice like thiswhen it starts in an interactive mode:    Gnomovision version 69, Copyright (C) year name of author    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.    This is free software, and you are welcome to redistribute it    under certain conditions; type `show c' for details.The hypothetical commands `show w' and `show c' should show the appropriateparts of the General Public License.  Of course, the commands you use maybe called something other than `show w' and `show c'; they could even bemouse-clicks or menu items- whatever suits your program.You should also get your employer (if you work as a programmer) or yourschool, if any, to sign a "copyright disclaimer" for the program, ifnecessary.  Here is a sample; alter the names:  Yoyodyne, Inc., hereby disclaims all copyright interest in the program  `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989  Ty Coon, President of ViceThis General Public License does not permit incorporating your program intoproprietary programs.  If your program is a subroutine library, you mayconsider it more useful to permit linking proprietary applications with thelibrary.  If this is what you want to do, use the GNU Lesser GeneralPublic License instead of this License.Comment: This package contains fixture and support code for running the examples that come with the fit-java-1.1 distribution.  Fit-Examples-Tests contains an SUnitToo test case for running the examples.  See that package's comment for more information.# Smalltalk FitSmalltalk Fit is a Smalltalk implementation of Ward Cunningham's [Framework for Integrated Tests](http://fit.c2.com), [Fitnesse](http://www.fitnesse.org), and Rick Mugridge's [FitLibrary](http://fitlibrary.sourceforge.net).This version contains the equivalent features of:* fit-java-1.1* fitnesse-20121220* FitLibrary-2.0   Copyright (C) 2004-2013 Randy Coulman    This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License along    with this program; if not, write to the Free Software Foundation, Inc.,    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.See the copyright tab in the RB, the 'notice' property of this package, or the License.txt file on GitHub.DbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1549DbUsername: randyDbVersion: 17DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'Fit' ''))PackageName: Fit-ExamplesParcel: #('Fit-Examples')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'Fit'))PrerequisiteParcels: #(#('Base VisualWorks' '') #('Fit' ''))PrintStringCache: (17,randy)Version: 17Date: 7:21:05 AM May 24, 2013 --><time-stamp>From VisualWorks® Personal Use Edition, 7.9.1 of October 18, 2012 on May 24, 2013 at 7:21:05 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Eg</name><environment>Smalltalk</environment><private>false</private><imports>			private Fit.*			private Smalltalk.*			</imports><category>Fit Framework</category><attributes><package>Fit-Examples</package></attributes></name-space><name-space><name>Music</name><environment>Eg</environment><private>false</private><imports>			private Fit.*			private Smalltalk.*			</imports><category>Fit Music Test</category><attributes><package>Fit-Examples</package></attributes></name-space><name-space><name>Net</name><environment>Eg</environment><private>false</private><imports>			private Smalltalk.*			private Fit.*			</imports><category>Fit Network Example</category><attributes><package>Fit-Examples</package></attributes></name-space><class><name>Item</name><environment>Eg</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>var index rank </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Examples</package></attributes></class><class><name>Var</name><environment>Eg</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>items files index </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Examples</package></attributes></class><class><name>Simulator</name><environment>Eg.Music</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Music Test</category><attributes><package>Fit-Examples</package></attributes></class><class><name>Expand</name><environment>Eg</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>path fixture </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Examples</package></attributes></class><class><name>ArithmeticFixture</name><environment>Eg</environment><super>Fit.PrimitiveFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Framework</category><attributes><package>Fit-Examples</package></attributes></class><class><name>Realtime</name><environment>Eg.Music</environment><super>Fit.TimedActionFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>system </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Music Test</category><attributes><package>Fit-Examples</package></attributes></class><class><name>AllFiles</name><environment>Eg</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Examples</package></attributes></class><class><name>Dialog</name><environment>Eg.Music</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>message caller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Music Test</category><attributes><package>Fit-Examples</package></attributes></class><class><name>Calculator</name><environment>Eg</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>volts key </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Framework</category><attributes><package>Fit-Examples</package></attributes></class><class><name>SortedSet</name><environment>Eg</environment><super>Core.SortedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Examples</package></attributes></class><class><name>GeoCoordinate</name><environment>Eg.Net</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lat lon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Network Example</category><attributes><package>Fit-Examples</package></attributes></class><class><name>ExampleTests</name><environment>Eg</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>file wiki runCounts fixture footnote fileCell tables </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Examples</package></attributes></class><class><name>AllCombinations</name><environment>Eg</environment><super>Eg.AllFiles</super><private>false</private><indexed-type>none</indexed-type><inst-vars>row lists caseNumber </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Examples</package></attributes></class><class><name>AllPairs</name><environment>Eg</environment><super>Eg.AllCombinations</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rank vars toItem pairs steps </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Examples</package></attributes></class><class><name>Simulator</name><environment>Eg.Net</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zip coord nodes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Examples</package></attributes></class><class><name>GetDates</name><environment>Eg</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inDate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Examples</package></attributes></class><class><name>BinaryChop</name><environment>Eg</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>key array </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Examples</package></attributes></class><class><name>Pair</name><environment>Eg</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left right used owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Examples</package></attributes></class><class><name>MusicLibrary</name><environment>Eg.Music</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Music Test</category><attributes><package>Fit-Examples</package></attributes></class><class><name>HP35</name><environment>Eg</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>registers s keyBindings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Framework</category><attributes><package>Fit-Examples</package></attributes></class><class><name>MusicPlayer</name><environment>Eg.Music</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Music Test</category><attributes><package>Fit-Examples</package></attributes></class><comment><class-id>Eg.Music.MusicPlayer</class-id><body>Copyright (c) 2002 Cunningham &amp; Cunningham, Inc.Read license.txt in this directory.</body></comment><class><name>Display</name><environment>Eg.Music</environment><super>Fit.RowFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Music Test</category><attributes><package>Fit-Examples</package></attributes></class><class><name>Browser</name><environment>Eg.Music</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Music Test</category><attributes><package>Fit-Examples</package></attributes></class><class><name>Music</name><environment>Eg.Music</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>title artist album genre size seconds trackNumber trackCount year date selected </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Music Test</category><attributes><package>Fit-Examples</package></attributes></class><class><name>ArithmeticColumnFixture</name><environment>Eg</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Framework</category><attributes><package>Fit-Examples</package></attributes></class><class><name>Division</name><environment>Eg</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numerator denominator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Examples</package></attributes></class><shared-variable><name>NextPlayComplete</name><environment>Eg.Music.Simulator</environment><private>false</private><constant>false</constant><category>uncategorized</category><initializer>0</initializer><attributes><package>Fit-Examples</package></attributes></shared-variable><shared-variable><name>System</name><environment>Eg.Music.Simulator</environment><private>false</private><constant>false</constant><category>uncategorized</category><initializer>Simulator new</initializer><attributes><package>Fit-Examples</package></attributes></shared-variable><shared-variable><name>NextPlayStarted</name><environment>Eg.Music.Simulator</environment><private>false</private><constant>false</constant><category>uncategorized</category><initializer>0</initializer><attributes><package>Fit-Examples</package></attributes></shared-variable><shared-variable><name>NextSearchComplete</name><environment>Eg.Music.Simulator</environment><private>false</private><constant>false</constant><category>uncategorized</category><initializer>0</initializer><attributes><package>Fit-Examples</package></attributes></shared-variable><shared-variable><name>MyTime</name><environment>Eg.Music.Simulator</environment><private>false</private><constant>false</constant><category>uncategorized</category><initializer>Time now</initializer><attributes><package>Fit-Examples</package></attributes></shared-variable><shared-variable><name>FileStack</name><environment>Eg.AllFiles</environment><private>false</private><constant>false</constant><category>recursion check</category><initializer>OrderedCollection new</initializer><attributes><package>Fit-Examples</package></attributes></shared-variable><shared-variable><name>Paused</name><environment>Eg.Music.MusicPlayer</environment><private>false</private><constant>false</constant><category>uncategorized</category><initializer>0</initializer><attributes><package>Fit-Examples</package></attributes></shared-variable><shared-variable><name>Playing</name><environment>Eg.Music.MusicPlayer</environment><private>false</private><constant>false</constant><category>uncategorized</category><initializer>nil</initializer><attributes><package>Fit-Examples</package></attributes></shared-variable><shared-variable><name>Status</name><environment>Eg.Music.Music</environment><private>false</private><constant>false</constant><category>uncategorized</category><initializer>'ready'</initializer><attributes><package>Fit-Examples</package></attributes></shared-variable><shared-variable><name>Looking</name><environment>Eg.Music.MusicLibrary</environment><private>false</private><constant>false</constant><category>uncategorized</category><initializer>nil</initializer><attributes><package>Fit-Examples</package></attributes></shared-variable><shared-variable><name>Library</name><environment>Eg.Music.MusicLibrary</environment><private>false</private><constant>false</constant><category>uncategorized</category><initializer>OrderedCollection new</initializer><attributes><package>Fit-Examples</package></attributes></shared-variable><shared-variable><name>Hp</name><environment>Eg.Calculator</environment><private>false</private><constant>false</constant><category>calculator</category><initializer>HP35 new</initializer><attributes><package>Fit-Examples</package></attributes></shared-variable><methods><class-id>Eg.Item</class-id> <category>accessing</category><body package="Fit-Examples">index	^index</body><body package="Fit-Examples">index: anObject	index := anObject</body><body package="Fit-Examples">rank	^rank</body><body package="Fit-Examples">rank: anObject	rank := anObject</body><body package="Fit-Examples">var	^var</body><body package="Fit-Examples">var: anObject	var := anObject</body></methods><methods><class-id>Eg.Item</class-id> <category>printing</category><body package="Fit-Examples">printOn: aStream 	aStream nextPutAll: self file tail</body></methods><methods><class-id>Eg.Item</class-id> <category>operations</category><body package="Fit-Examples">file	^var files at: index</body><body package="Fit-Examples">isFit: slug 	^(slug at: var index) isNil or: [(slug at: var index) == self]</body></methods><methods><class-id>Eg.Item class</class-id> <category>instance creation</category><body package="Fit-Examples">var: var index: i rank: n 	^(self new)		var: var;		index: i;		rank: n;		yourself</body></methods><methods><class-id>Eg.Var</class-id> <category>initialize-release</category><body package="Fit-Examples">initialize	items := OrderedCollection new</body></methods><methods><class-id>Eg.Var</class-id> <category>accessing</category><body package="Fit-Examples">at: anInteger 	^items at: anInteger</body><body package="Fit-Examples">files	^files</body><body package="Fit-Examples">files: anObject	files := anObject</body><body package="Fit-Examples">index	^index</body><body package="Fit-Examples">index: anObject	index := anObject</body><body package="Fit-Examples">items	^items</body><body package="Fit-Examples">size	^items size</body></methods><methods><class-id>Eg.Var class</class-id> <category>instance creation</category><body package="Fit-Examples">index: index files: files 	^(self new)		index: index;		files: files;		yourself</body><body package="Fit-Examples">new	^super new initialize</body></methods><methods><class-id>Eg.Music.Simulator</class-id> <category>uncategorized</category><body package="Fit-Examples">advance: future 	[self time &lt; future] whileTrue: 			[self time: (self nextEvent: future).			self perform]</body><body package="Fit-Examples">delay: seconds 	self advance: (self class schedule: seconds)</body><body package="Fit-Examples">failLoadJam	ActionFixture 		actor: (Dialog message: 'load jamed' caller: ActionFixture actor)</body><body package="Fit-Examples">nextEvent: bound 	| result |	result := bound.	result := self sooner: result or: self class nextSearchComplete.	result := self sooner: result or: self class nextPlayStarted.	result := self sooner: result or: self class nextPlayComplete.	^result</body><body package="Fit-Examples">perform	self time = self class nextSearchComplete 		ifTrue: [^MusicLibrary searchComplete].	self time = self class nextPlayStarted ifTrue: [^MusicPlayer playStarted].	self time = self class nextPlayComplete 		ifTrue: [^MusicPlayer playComplete]</body><body package="Fit-Examples">sooner: soon or: event 	event &gt; self time &amp; (event &lt; soon) ifTrue: [^event].	^soon</body><body package="Fit-Examples">time	^self class myTime</body><body package="Fit-Examples">time: aNumber	^self class myTime: aNumber</body><body package="Fit-Examples">waitPlayComplete	self advance: self class nextPlayComplete</body><body package="Fit-Examples">waitPlayStarted	self advance: self class nextPlayStarted</body><body package="Fit-Examples">waitSearchComplete	self advance: self class nextSearchComplete</body></methods><methods><class-id>Eg.Music.Simulator class</class-id> <category>accessors</category><body package="Fit-Examples">myTime	^MyTime</body><body package="Fit-Examples">myTime: aNumber	MyTime := aNumber</body><body package="Fit-Examples">nextPlayComplete	^NextPlayComplete</body><body package="Fit-Examples">nextPlayComplete: aNumber	NextPlayComplete := aNumber</body><body package="Fit-Examples">nextPlayStarted	^NextPlayStarted</body><body package="Fit-Examples">nextPlayStarted: aNumber	NextPlayStarted := aNumber</body><body package="Fit-Examples">nextSearchComplete	^NextSearchComplete</body><body package="Fit-Examples">nextSearchComplete: aNumber	NextSearchComplete := aNumber</body><body package="Fit-Examples">system	^System</body></methods><methods><class-id>Eg.Music.Simulator class</class-id> <category>uncategorized</category><body package="Fit-Examples">schedule: seconds 	^MyTime + (seconds * 1000) truncated</body></methods><methods><class-id>Eg.Music.Simulator class</class-id> <category>initialize</category><body package="Fit-Examples">init	MyTime := Timestamp now asMilliseconds.	NextPlayComplete := 0.	NextPlayStarted := 0.	NextSearchComplete := 0.	MusicPlayer stop</body></methods><methods><class-id>Eg.Expand</class-id> <category>initialize-release</category><body package="Fit-Examples">initialize	super initialize.	fixture := AllFiles new</body></methods><methods><class-id>Eg.Expand</class-id> <category>accessing</category><body package="Fit-Examples">path	^path</body></methods><methods><class-id>Eg.ArithmeticFixture</class-id> <category>enumerating</category><body package="Fit-Examples">doCell: cell at: columnIndex 	columnIndex = 1 ifTrue: [^x := self class parseLong: cell].	columnIndex = 2 ifTrue: [^y := self class parseLong: cell].	columnIndex = 3 ifTrue: [^self check: cell actual: x + y].	columnIndex = 4 ifTrue: [^self check: cell actual: x - y].	columnIndex = 5 ifTrue: [^self check: cell actual: x * y].	columnIndex = 6 ifTrue: [^self check: cell actual: x / y].	self ignore: cell</body><body package="Fit-Examples">doRows: rows 	super doRows: rows more</body></methods><methods><class-id>Eg.Music.Realtime</class-id> <category>actions</category><body package="Fit-Examples">enter	system delay: 0.8.	super enter</body><body package="Fit-Examples">press	system delay: 1.2.	super press</body></methods><methods><class-id>Eg.Music.Realtime</class-id> <category>initialize-release</category><body package="Fit-Examples">initialize	super initialize.	Simulator init.	system := Simulator system</body></methods><methods><class-id>Eg.Music.Realtime</class-id> <category>uncategorized</category><body package="Fit-Examples">await	self system: 'wait' cell: parsedCells more</body><body package="Fit-Examples">fail	self system: 'fail' cell: parsedCells more</body><body package="Fit-Examples">pause	system delay: (Number readFromString: parsedCells more text)</body><body package="Fit-Examples">system: prefix cell: aCell 	| method |	method := self camelCase: prefix , ' ' , aCell text.	[system perform: method asSymbol] on: Error		do: [:ex | self mark: aCell exception: ex]</body></methods><methods><class-id>Eg.Music.Realtime</class-id> <category>accessing</category><body package="Fit-Examples">time	^Timestamp new setFromMicroseconds: Simulator myTime * 1000</body></methods><methods><class-id>Eg.AllFiles</class-id> <category>expansion</category><body package="Fit-Examples">expand: aString 	| files tokens |	files := OrderedCollection new.	tokens := aString tokensBasedOn: $/.	"hack: adjust for directory structure that better matches the distribution"	tokens first = 'Documents' 		ifTrue: 			[tokens := tokens 						copyReplaceFrom: 1						to: 1						with: #('examples' 'input')].	self 		expand: '.' asFilename		tokens: tokens		into: files.	^files</body><body package="Fit-Examples">expand: aFilename tokens: tokens into: result 	tokens isEmpty 		ifTrue: [result add: aFilename]		ifFalse: 			[(aFilename filenamesMatching: tokens removeFirst) do: 					[:each | 					self 						expand: each						tokens: tokens						into: result]]</body></methods><methods><class-id>Eg.AllFiles</class-id> <category>private</category><body package="Fit-Examples">doRow: row files: files 	| workingRow cells fixture |	workingRow := row.	files do: 			[:each | 			cells := Parse td: (self info: each tail) more: (Parse td: (self info: '')).			workingRow more: (Parse trWithCells: cells more: workingRow more).			workingRow := workingRow more.			fixture := Fixture new.			self 				run: each				fixture: fixture				cells: cells.			self summarize: fixture path: each]</body><body package="Fit-Examples">pop: path 	FileStack remove: path fitAsAbsolute</body><body package="Fit-Examples">pushAndCheck: path 	| name |	name := path fitAsAbsolute.	(FileStack includes: name) ifTrue: [^true].	FileStack add: name.	^false</body><body package="Fit-Examples">run: path fixture: fixture cells: cells 	| input tables |	(self pushAndCheck: path) 		ifTrue: 			[self ignore: cells.			cells addToBody: (self info: 'recursive').			^self].		[| anyFailures |	input := path contentsOfEntireFile.	(input indexOfSubCollection: '&lt;wiki&gt;' startingAt: 1) &gt;= 1 		ifTrue: 			[tables := Parse input: input tags: #('wiki' 'table' 'tr' 'td').			fixture doTables: tables parts]		ifFalse: 			[tables := Parse input: input tags: #('table' 'tr' 'td').			fixture doTables: tables].	cells more addToBody: (self info: fixture counts printString).	anyFailures := fixture counts anyFailures.	self mark: cells more right: anyFailures not.	anyFailures ifTrue: [cells more addToBody: tables footnote]] 			on: Error			do: [:ex | self mark: cells exception: ex].	self pop: path</body><body package="Fit-Examples">summarize: fixture path: path 	| runCounts |	(fixture summary)		at: 'input file' put: path fitAsAbsolute asString;		at: 'input update' put: path modificationTimestamp.	runCounts := (summary includesKey: 'counts run') 				ifTrue: [summary at: 'counts run']				ifFalse: [Counts new].	runCounts tally: fixture counts.	summary at: 'counts run' put: runCounts</body></methods><methods><class-id>Eg.AllFiles</class-id> <category>enumerating</category><body package="Fit-Examples">doRow: row 	| cell files |	cell := row leaf.	files := self expand: cell text.	files isEmpty 		ifFalse: [self doRow: row files: files]		ifTrue: 			[self ignore: cell.			cell addToBody: (self info: ' no match')]</body></methods><methods><class-id>Eg.Music.Dialog</class-id> <category>accessing</category><body package="Fit-Examples">caller: anObject	caller := anObject</body><body package="Fit-Examples">message: anObject	message := anObject</body><body package="Fit-Examples">ok	message = 'load jamed' ifTrue: [MusicPlayer stop].	ActionFixture actor: caller</body></methods><methods><class-id>Eg.Music.Dialog class</class-id> <category>instance creation</category><body package="Fit-Examples">message: aString caller: aFixture 	^(self new)		message: aString;		caller: aFixture;		yourself</body></methods><methods><class-id>Eg.Calculator</class-id> <category>operations</category><body package="Fit-Examples">execute	key isNil ifFalse: [self class hp key: key]</body><body package="Fit-Examples">reset	key := nil</body></methods><methods><class-id>Eg.Calculator</class-id> <category>accessing</category><body package="Fit-Examples">key	^key</body><body package="Fit-Examples">volts	^volts</body></methods><methods><class-id>Eg.Calculator class</class-id> <category>accessing</category><body package="Fit-Examples">hp	^Hp</body></methods><methods><class-id>Eg.SortedSet</class-id> <category>adding</category><body package="Fit-Examples">add: anObject 	(self includes: anObject) ifFalse: [super add: anObject].	^anObject</body></methods><methods><class-id>Eg.Net.GeoCoordinate</class-id> <category>accessing</category><body package="Fit-Examples">lat	^lat</body><body package="Fit-Examples">lat: anObject	lat := anObject</body><body package="Fit-Examples">lon	^lon</body><body package="Fit-Examples">lon: anObject	lon := anObject</body></methods><methods><class-id>Eg.Net.GeoCoordinate</class-id> <category>constants</category><body package="Fit-Examples">precision	^0.00001</body></methods><methods><class-id>Eg.Net.GeoCoordinate</class-id> <category>comparing</category><body package="Fit-Examples">= anObject 	| precision |	self species == anObject species ifFalse: [^false].	precision := self precision.	^(lat / precision) asInteger = (anObject lat / precision) asInteger 		and: [(lon / precision) asInteger = (anObject lon / precision) asInteger]</body><body package="Fit-Examples">hash	| precision |	precision := self precision.	^(lat / precision) asInteger + (lon / precision) asInteger</body></methods><methods><class-id>Eg.Net.GeoCoordinate</class-id> <category>private</category><body package="Fit-Examples">format: aNumber 	| ws |	ws := WriteStream on: String new.	NumberPrintPolicy 		print: aNumber		on: ws		using: '0.####;;0'.	^ws contents</body></methods><methods><class-id>Eg.Net.GeoCoordinate</class-id> <category>printing</category><body package="Fit-Examples">printOn: aStream 	aStream		nextPutAll: (self format: lat abs);		nextPutAll: (lat positive ifTrue: ['N'] ifFalse: ['S']);		nextPutAll: (self format: lon abs);		nextPutAll: (lon positive ifTrue: [' E'] ifFalse: [' W'])</body></methods><methods><class-id>Eg.Net.GeoCoordinate class</class-id> <category>instance creation</category><body package="Fit-Examples">fitParse: aString 	| north east delimiters tokens numbers i lat lon |	delimiters := 'nNsSeEwW ''",'.	tokens := aString piecesCutWhere: 					[:prev :next | 					(delimiters includes: next) 						or: [(delimiters includes: prev) and: [(delimiters includes: next) not]]].	numbers := Array new: 6 withAll: 0.	north := true.	east := true.	i := 1.	[i &lt;= 6 and: [tokens isEmpty not]] whileTrue: 			[| token ch |			token := tokens removeFirst asLowercase.			ch := token at: 1.			(ch isDigit or: [ch = '-']) 				ifTrue: 					[numbers at: i put: (Float readFromString: token).					i := i + 1].			ch = $s ifTrue: [north := false].			ch = $w ifTrue: [east := false].			(i &gt; 1 and: ['nsew' includes: ch]) ifTrue: [i := 4]].	lat := (numbers at: 1) + ((numbers at: 2) / 60) + ((numbers at: 3) / 3600).	lon := (numbers at: 4) + ((numbers at: 5) / 60) + ((numbers at: 6) / 3600).	^self latitude: (north ifTrue: [lat] ifFalse: [lat negated])		longitude: (east ifTrue: [lon] ifFalse: [lon negated])</body><body package="Fit-Examples">latitude: latitude longitude: longitude 	^(self new)		lat: latitude;		lon: longitude;		yourself</body></methods><methods><class-id>Eg.ExampleTests</class-id> <category>enumerating</category><body package="Fit-Examples">doRow: row 	fileCell := row leaf.	super doRow: row</body></methods><methods><class-id>Eg.ExampleTests</class-id> <category>operations</category><body package="Fit-Examples">run	| input path |	path := 'examples' asFilename construct: 'input'.	input := (path construct: file) contentsOfEntireFile.	fixture := Fixture new.	wiki 		ifTrue: 			[tables := Parse input: input tags: #('wiki' 'table' 'tr' 'td').			fixture doTables: tables parts]		ifFalse: 			[tables := Parse input: input tags: #('table' 'tr' 'td').			fixture doTables: tables].	runCounts tally: fixture counts.	summary at: 'counts run' put: runCounts</body></methods><methods><class-id>Eg.ExampleTests</class-id> <category>annotation</category><body package="Fit-Examples">wrong: cell 	super wrong: cell.	footnote ifNil: [^self].	footnote := tables footnote.	fileCell addToBody: footnote</body></methods><methods><class-id>Eg.ExampleTests</class-id> <category>initialize-release</category><body package="Fit-Examples">initialize	super initialize.	runCounts := Counts new</body></methods><methods><class-id>Eg.ExampleTests</class-id> <category>accessing</category><body package="Fit-Examples">file	^file</body><body package="Fit-Examples">wiki	^wiki</body></methods><methods><class-id>Eg.AllCombinations</class-id> <category>initialize-release</category><body package="Fit-Examples">initialize	super initialize.	lists := OrderedCollection new.	caseNumber := 1</body></methods><methods><class-id>Eg.AllCombinations</class-id> <category>private</category><body package="Fit-Examples">combinations	self combinations: 1 list: (OrderedCollection withAll: lists)</body><body package="Fit-Examples">doRow: aParse files: files 	lists add: files</body></methods><methods><class-id>Eg.AllCombinations</class-id> <category>enumerating</category><body package="Fit-Examples">combinations: index list: combination 	index = (lists size + 1) 		ifTrue: [self doCase: combination]		ifFalse: 			[| files |			files := lists at: index.			files do: 					[:each | 					combination at: index put: each.					self combinations: index + 1 list: combination]]</body><body package="Fit-Examples">doCase: combination 	| number |	number := Parse 				trWithCells: (Parse td: (self info: '#' , caseNumber printString)).	caseNumber := caseNumber + 1.	number leaf addToTag: ' colspan=2'.	row last more: number.	super doRow: number files: combination</body><body package="Fit-Examples">doTable: table 	row := table parts last.	super doTable: table.	self combinations</body></methods><methods><class-id>Eg.AllPairs</class-id> <category>private</category><body package="Fit-Examples">combinations	self populate.	self generate</body><body package="Fit-Examples">doAllItemPairsLeft: vl right: vr 	1 to: vl size		do: 			[:l | 			1 to: vr size				do: 					[:r | 					pairs add: (Pair 								owner: self								left: (vl at: l)								right: (vr at: r))]]</body><body package="Fit-Examples">doAllItems: var files: files 	1 to: files size		do: 			[:i | 			| item |			item := Item 						var: var						index: i						rank: rank.			rank := rank + 1.			toItem at: (files at: i) tail put: item.			var items add: item]</body><body package="Fit-Examples">doAllVarPairs	1 to: vars size		do: 			[:i | 			i + 1 to: vars size				do: [:j | self doAllItemPairsLeft: (vars at: i) right: (vars at: j)]]</body><body package="Fit-Examples">doAllVars	rank := 0.	1 to: lists size		do: 			[:i | 			| files var |			files := lists at: i.			var := Var index: i files: files.			vars add: var.			self doAllItems: var files: files]</body><body package="Fit-Examples">emit: slug 	self doCase: (slug collect: [:each | each file]) asOrderedCollection</body><body package="Fit-Examples">fill: slug withPair: pair 	slug at: pair left var index put: pair left.	slug at: pair right var index put: pair right.	pair used: pair used + 1.	pairs add: pair</body><body package="Fit-Examples">generate	[pairs first used = 0] whileTrue: [self emit: self nextCase]</body><body package="Fit-Examples">isFull: slug 	^(slug includes: nil) not</body><body package="Fit-Examples">nextCase	| slug |	slug := Array new: vars size.	[self isFull: slug] 		whileFalse: [self fill: slug withPair: (self nextFit: slug)].	^slug</body><body package="Fit-Examples">nextFit: slug 	| hold pair |	hold := OrderedCollection new.	[(pair := self nextPair) isFit: slug] whileFalse: [hold add: pair].	pairs addAll: hold.	^pair</body><body package="Fit-Examples">nextPair	| result |	result := pairs removeFirst.	steps := steps + 1.	^result</body><body package="Fit-Examples">populate	self doAllVars.	self doAllVarPairs</body></methods><methods><class-id>Eg.AllPairs</class-id> <category>accessing</category><body package="Fit-Examples">rank	^rank</body></methods><methods><class-id>Eg.AllPairs</class-id> <category>initialize-release</category><body package="Fit-Examples">initialize	super initialize.	vars := OrderedCollection new.	toItem := Dictionary new.	pairs := SortedSet new.	steps := 0</body></methods><methods><class-id>Eg.Net.Simulator</class-id> <category>accessing</category><body package="Fit-Examples">nodes: anObject	nodes := anObject</body><body package="Fit-Examples">zip	^zip</body></methods><methods><class-id>Eg.Net.Simulator</class-id> <category>initialize-release</category><body package="Fit-Examples">initialize	super initialize.	nodes := 0</body></methods><methods><class-id>Eg.Net.Simulator</class-id> <category>operations</category><body package="Fit-Examples">cancel</body><body package="Fit-Examples">newCity</body><body package="Fit-Examples">ok	nodes := nodes + 1</body></methods><methods><class-id>Eg.BinaryChop</class-id> <category>private</category><body package="Fit-Examples">chopFriday: value in: collection 	1 to: collection size		do: [:i | value = (collection at: i) ifTrue: [^i - 1]].	^-1</body><body package="Fit-Examples">chopMonday: value in: collection 	| min max |	min := 1.	max := collection size.	[min &lt;= max] whileTrue: 			[| probe |			probe := ((min + max) / 2) truncated.			value = (collection at: probe) ifTrue: [^probe - 1].			value &gt; (collection at: probe) 				ifTrue: [min := probe + 1]				ifFalse: [max := probe - 1]].	^-1</body><body package="Fit-Examples">chopThursday: value in: collection 	| min max gen |	min := 1.	max := collection size.	gen := Random new.	[min &lt;= max] whileTrue: 			[| probe |			probe := (gen next * (max - min) + min) truncated.			value = (collection at: probe) ifTrue: [^probe - 1].			value &gt; (collection at: probe) 				ifTrue: [min := probe + 1]				ifFalse: [max := probe - 1]].	^-1</body><body package="Fit-Examples">chopTuesday: value in: collection 	| min max |	min := 1.	max := collection size.	[min &lt;= max] whileTrue: 			[| probe comparison |			probe := ((min + max) / 2) truncated.			comparison := self compare: value to: (collection at: probe).			comparison = 0 ifTrue: [^probe - 1].			comparison = 1 ifTrue: [min := probe + 1] ifFalse: [max := probe - 1]].	^-1</body><body package="Fit-Examples">chopWednesday: value in: collection 	| probe result |	collection isEmpty ifTrue: [^-1].	probe := (collection size / 2) truncated + 1.	value = (collection at: probe) ifTrue: [^probe - 1].	value &lt; (collection at: probe) 		ifTrue: 			[^self chopWednesday: value				in: (self 						subArray: collection						start: 1						stop: probe - 1)].	result := self chopWednesday: value				in: (self 						subArray: collection						start: probe + 1						stop: collection size).	^result &lt; 0 ifTrue: [result] ifFalse: [result + probe]</body><body package="Fit-Examples">compare: first to: second 	first = second ifTrue: [^0].	first &lt; second ifTrue: [^-1].	^1</body><body package="Fit-Examples">subArray: collection start: start stop: stop 	^collection copyFrom: start to: stop</body></methods><methods><class-id>Eg.BinaryChop</class-id> <category>operations</category><body package="Fit-Examples">execute	array ifNil: [array := Array new]</body></methods><methods><class-id>Eg.BinaryChop</class-id> <category>accessing</category><body package="Fit-Examples">array	^array</body><body package="Fit-Examples">key	^key</body></methods><methods><class-id>Eg.Pair</class-id> <category>accessing</category><body package="Fit-Examples">left	^left</body><body package="Fit-Examples">left: anObject	left := anObject</body><body package="Fit-Examples">owner: anObject	owner := anObject</body><body package="Fit-Examples">right	^right</body><body package="Fit-Examples">right: anObject	right := anObject</body><body package="Fit-Examples">used	^used</body><body package="Fit-Examples">used: anObject	used := anObject</body></methods><methods><class-id>Eg.Pair</class-id> <category>comparing</category><body package="Fit-Examples">&lt; anObject 	^(self compareTo: anObject) &lt; 0</body><body package="Fit-Examples">= anObject 	^(self compareTo: anObject) = 0</body><body package="Fit-Examples">compareTo: anObject 	^self rank - anObject rank</body></methods><methods><class-id>Eg.Pair</class-id> <category>operations</category><body package="Fit-Examples">isFit: slug 	^(left isFit: slug) and: [right isFit: slug]</body><body package="Fit-Examples">rank	| rank |	rank := owner rank.	^rank * (rank * used + left rank) + right rank</body></methods><methods><class-id>Eg.Pair</class-id> <category>initialize-release</category><body package="Fit-Examples">initialize	used := 0</body></methods><methods><class-id>Eg.Pair</class-id> <category>printing</category><body package="Fit-Examples">printOn: aStream 	aStream		print: left;		nextPutAll: '-';		print: right;		nextPutAll: ' (';		print: used;		nextPutAll: ')'</body></methods><methods><class-id>Eg.Pair class</class-id> <category>instance creation</category><body package="Fit-Examples">new	^super new initialize</body><body package="Fit-Examples">owner: anObject left: left right: right 	^(self new)		owner: anObject;		left: left;		right: right;		yourself</body></methods><methods><class-id>Eg.Music.MusicLibrary class</class-id> <category>accessing</category><body package="Fit-Examples">library	^Library</body><body package="Fit-Examples">looking	^Looking</body><body package="Fit-Examples">looking: anObject	Looking := anObject</body><body package="Fit-Examples">select: aMusic	Looking := aMusic</body></methods><methods><class-id>Eg.Music.MusicLibrary class</class-id> <category>As yet unclassified</category><body package="Fit-Examples">displayContents	^self library select: [:aMusic | aMusic selected]</body><body package="Fit-Examples">displayCount	"    static int displayCount() {        int count = 0;        for (int i=0; i&lt;library.length; i++) {            count += (library[i].selected ? 1 : 0);        }        return count;    }"	^self library inject: 0		into: [:count :entry | count + (entry selected ifTrue: [1] ifFalse: [0])]</body><body package="Fit-Examples">findAlbum: albumName 	"    static void findAlbum(String a) {        search(1.1);        for (int i=0; i&lt;library.length; i++) {            library[i].selected = library[i].album.equals(a);        }    }"	self search: 1.1.	self library do: [:entry | entry selected: entry album = albumName]</body><body package="Fit-Examples">findAll	"    static void findAll() {        search(3.2);        for (int i=0; i&lt;library.length; i++) {            library[i].selected = true;        }    }"	self search: 3.2.	self library do: [:element | element selected: true]</body><body package="Fit-Examples">findArtist: artistName 	"    static void findArtist(String a) {        search(2.3);        for (int i=0; i&lt;library.length; i++) {            library[i].selected = library[i].artist.equals(a);        }    }"	self search: 2.3.	self library do: [:entry | entry selected: entry artist = artistName]</body><body package="Fit-Examples">musicAt: anInteger	^Library at: anInteger</body><body package="Fit-Examples">search: seconds 	"   static void search(double seconds){        Music.status = 'searching';        Simulator.nextSearchComplete = Simulator.schedule(seconds);    }"	Music status: 'searching'.	Simulator nextSearchComplete: (Simulator schedule: seconds)</body><body package="Fit-Examples">searchComplete	"    static void searchComplete() {        Music.status = MusicPlayer.playing == null ? 'ready' : 'playing';    }"	Music 		status: (MusicPlayer playing isNil ifTrue: ['ready'] ifFalse: ['playing'])</body></methods><methods><class-id>Eg.Music.MusicLibrary class</class-id> <category>loading</category><body package="Fit-Examples">load: path 	| in lines separator loadPath |	separator := Filename separator.	loadPath := separator ~= $/ 				ifTrue: 					[path copyReplaceAll: (String with: $/) with: (String with: separator)]				ifFalse: [path].	in := loadPath asFilename readStream.		[in skipThrough: Character cr.	lines := (in upToEnd tokensBasedOn: Character cr) 				reject: [:each | each isEmpty].	Library := lines collect: [:line | Music parse: line]] 			ensure: [in close]</body></methods><methods><class-id>Eg.Music.MusicLibrary class</class-id> <category>initializing</category><body package="Fit-Examples">init	Library := nil.	Looking := nil</body></methods><methods><class-id>Eg.HP35</class-id> <category>operations</category><body package="Fit-Examples">key: aString 	(self isNumeric: aString) 		ifTrue: [^self push: (Number readFrom: aString readStream)].	(keyBindings at: aString ifAbsent: [KeyNotFoundError signalWith: 'aString']) 		value</body><body package="Fit-Examples">pop	| result |	result := registers first.	registers 		replaceFrom: 1		to: 3		with: registers		startingAt: 2.	^result</body><body package="Fit-Examples">push: value 	registers 		replaceFrom: 2		to: 4		with: registers		startingAt: 1.	registers at: 1 put: value</body></methods><methods><class-id>Eg.HP35</class-id> <category>accessing</category><body package="Fit-Examples">register: anInteger 	^registers at: anInteger</body><body package="Fit-Examples">register: anInteger put: anObject 	^registers at: anInteger put: anObject</body></methods><methods><class-id>Eg.HP35</class-id> <category>initialization</category><body package="Fit-Examples">initialize	registers := Array new: 4 withAll: 0.0.	s := 0.0.	keyBindings := (Dictionary new)				at: 'enter' put: [self push: self top];				at: '+' put: [self push: self pop + self pop];				at: '-'					put: 						[| temp |						temp := self pop.						self push: self pop - temp];				at: '*' put: [self push: self pop * self pop];				at: '/'					put: 						[| denominator numerator |						denominator := self pop.						numerator := self pop.						self push: (denominator = 0 									ifTrue: [DivideByZero new]									ifFalse: [numerator / denominator])];				at: 'x^y' put: [self push: (self pop ln * self pop) exp];				at: 'clx' put: [registers at: 1 put: 0.0];				at: 'clr' put: [registers atAllPut: 0.0];				at: 'chs' put: [registers at: 1 put: (registers at: 1) negated];				at: 'x&lt;&gt;y'					put: 						[| temp |						temp := registers at: 1.						registers at: 1 put: (registers at: 2).						registers at: 2 put: temp];				at: 'r!' put: [registers at: 4 put: self pop];				at: 'sto' put: [s := registers at: 1];				at: 'rcl' put: [self push: s];				at: 'sqrt' put: [self push: self pop sqrt];				at: 'ln' put: [self push: self pop ln];				at: 'sin' put: [self push: self pop degreesToRadians sin];				at: 'cos' put: [self push: self pop degreesToRadians cos];				at: 'tan' put: [self push: self pop degreesToRadians tan];				yourself</body></methods><methods><class-id>Eg.HP35</class-id> <category>private</category><body package="Fit-Examples">isNumeric: key 	(key size &gt;= 1 and: [(key at: 1) isDigit]) ifTrue: [^true].	(key size &gt;= 2 and: [('-.' includes: (key at: 1)) and: [(key at: 2) isDigit]]) 		ifTrue: [^true].	^false</body><body package="Fit-Examples">top	^registers first</body></methods><methods><class-id>Eg.HP35 class</class-id> <category>instance creation</category><body package="Fit-Examples">new	^self basicNew initialize</body></methods><methods><class-id>Eg.Music.MusicPlayer class</class-id> <category>controls</category><body package="Fit-Examples">pause	Music status: 'pause'.	(Playing isNil or: [Paused ~= 0]) ifTrue: [^self].	Paused := (Simulator nextPlayComplete - Simulator myTime) / 1000.	Simulator nextPlayComplete: 0</body><body package="Fit-Examples">play: aMusic 	Paused = 0 		ifTrue: 			[| seconds |			Music status: 'loading'.			seconds := aMusic = Playing ifTrue: [0.3] ifFalse: [2.5].			Simulator nextPlayStarted: (Simulator schedule: seconds)]		ifFalse: 			[Music status: 'playing'.			Simulator nextPlayComplete: (Simulator schedule: Paused).			Paused := 0]</body><body package="Fit-Examples">stop	Simulator		nextPlayStarted: 0;		nextPlayComplete: 0.	self playComplete</body></methods><methods><class-id>Eg.Music.MusicPlayer class</class-id> <category>status</category><body package="Fit-Examples">minutesRemaining	^(self secondsRemaining / 0.6) rounded / 100.0</body><body package="Fit-Examples">secondsRemaining	Paused = 0 ifFalse: [^Paused].	Playing isNil 		ifFalse: [^(Simulator nextPlayComplete - Simulator myTime) / 1000].	^0</body></methods><methods><class-id>Eg.Music.MusicPlayer class</class-id> <category>accessing</category><body package="Fit-Examples">playing	^Playing</body><body package="Fit-Examples">playing: aMusic	Playing := aMusic</body></methods><methods><class-id>Eg.Music.MusicPlayer class</class-id> <category>events</category><body package="Fit-Examples">playComplete	Music status: 'ready'.	Playing := nil</body><body package="Fit-Examples">playStarted	Music status: 'playing'.	Playing := MusicLibrary looking.	Simulator nextPlayComplete: (Simulator schedule: Playing seconds)</body></methods><methods><class-id>Eg.Music.Display</class-id> <category>abstracts</category><body package="Fit-Examples">query	^MusicLibrary displayContents</body></methods><methods><class-id>Eg.Music.Display</class-id> <category>stuff</category><body package="Fit-Examples">parse	"   public Object parse (String s, Class type) throws Exception {        if (type.equals(Date.class))    {return Music.dateFormat.parse(s);}        return super.parse (s, type);    }"</body></methods><methods><class-id>Eg.Music.Display</class-id> <category>accessing</category><body package="Fit-Examples">targetClass	^Music</body></methods><methods><class-id>Eg.Music.Browser</class-id> <category>search buttons</category><body package="Fit-Examples">sameAlbum	MusicLibrary findAlbum: MusicLibrary looking album</body><body package="Fit-Examples">sameArtist	MusicLibrary findArtist: MusicLibrary looking artist</body><body package="Fit-Examples">showAll	^MusicLibrary findAll</body></methods><methods><class-id>Eg.Music.Browser</class-id> <category>play buttons</category><body package="Fit-Examples">pause	MusicPlayer pause</body><body package="Fit-Examples">play	MusicPlayer play: MusicLibrary looking</body></methods><methods><class-id>Eg.Music.Music</class-id> <category>accessing</category><body package="Fit-Examples">album: anObject	album := anObject</body><body package="Fit-Examples">artist: anObject	artist := anObject</body><body package="Fit-Examples">date: anObject	date := anObject</body><body package="Fit-Examples">genre: anObject	genre := anObject</body><body package="Fit-Examples">seconds	^seconds</body><body package="Fit-Examples">seconds: anObject	seconds := anObject</body><body package="Fit-Examples">selected	^selected</body><body package="Fit-Examples">selected: anObject	selected := anObject</body><body package="Fit-Examples">size: anObject	size := anObject</body><body package="Fit-Examples">title: anObject	title := anObject</body><body package="Fit-Examples">trackCount	^trackCount</body><body package="Fit-Examples">trackCount: anObject	trackCount := anObject</body><body package="Fit-Examples">trackNumber	^trackNumber</body><body package="Fit-Examples">trackNumber: anObject	trackNumber := anObject</body><body package="Fit-Examples">year: anObject	year := anObject</body></methods><methods><class-id>Eg.Music.Music</class-id> <category>printing</category><body package="Fit-Examples">printString	title isNil ifFalse: [^title].	^super printString</body></methods><methods><class-id>Eg.Music.Music class</class-id> <category>accessing</category><body package="Fit-Examples">status	^Status</body><body package="Fit-Examples">status: aString	Status := aString</body></methods><methods><class-id>Eg.Music.Music class</class-id> <category>instance creation</category><body package="Fit-Examples">parse: aString 	| m t |	m := self new.	t := ReadStream on: (aString tokensBasedOn: Character tab).	m title: t next.	m artist: t next.	m album: t next.	m genre: t next.	m size: (Integer readFromString: t next).	m seconds: (Integer readFromString: t next).	m trackNumber: (Integer readFromString: t next).	m trackCount: (Integer readFromString: t next).	m year: (Integer readFromString: t next).	m date: (Date readFromString: t next).	m selected: false.	^m</body></methods><methods><class-id>Eg.ArithmeticColumnFixture</class-id> <category>accessing</category><body package="Fit-Examples">x	^x</body><body package="Fit-Examples">y	^y</body></methods><methods><class-id>Eg.Expand</class-id> <category>accessing</category><body package="Fit-Examples">path: aString	&lt;fitTakes: #String&gt;	path := aString</body></methods><methods><class-id>Eg.Expand</class-id> <category>operations</category><body package="Fit-Examples">expansion	&lt;fitReturns: #(#String)&gt;	^((fixture expand: path) collect: [:each | each tail]) asArray</body></methods><methods><class-id>Eg.Music.Dialog</class-id> <category>accessing</category><body package="Fit-Examples">message	&lt;fitReturns: #String&gt;	^message</body></methods><methods><class-id>Eg.Calculator</class-id> <category>operations</category><body package="Fit-Examples">flash	&lt;fitReturns: #Boolean&gt;	^false</body><body package="Fit-Examples">points	&lt;fitReturns: #Boolean&gt;	^false</body><body package="Fit-Examples">t	&lt;fitReturns: #ScientificDouble&gt;	^ScientificDouble value: (self class hp register: 4)</body><body package="Fit-Examples">watts	&lt;fitReturns: #Number&gt;	^0.5</body><body package="Fit-Examples">x	&lt;fitReturns: #ScientificDouble&gt;	^ScientificDouble value: (self class hp register: 1)</body><body package="Fit-Examples">y	&lt;fitReturns: #ScientificDouble&gt;	^ScientificDouble value: (self class hp register: 2)</body><body package="Fit-Examples">z	&lt;fitReturns: #ScientificDouble&gt;	^ScientificDouble value: (self class hp register: 3)</body></methods><methods><class-id>Eg.Calculator</class-id> <category>accessing</category><body package="Fit-Examples">key: aString	&lt;fitTakes: #String&gt;	key := aString</body><body package="Fit-Examples">volts: aNumber	&lt;fitTakes: #Number&gt;	volts := aNumber</body></methods><methods><class-id>Eg.ExampleTests</class-id> <category>operations</category><body package="Fit-Examples">exceptions	&lt;fitReturns: #Number&gt;	^fixture counts exceptions</body><body package="Fit-Examples">ignores	&lt;fitReturns: #Number&gt;	^fixture counts ignores</body><body package="Fit-Examples">right	&lt;fitReturns: #Number&gt;	self run.	^fixture counts right</body><body package="Fit-Examples">wrong	&lt;fitReturns: #Number&gt;	^fixture counts wrong</body></methods><methods><class-id>Eg.ExampleTests</class-id> <category>accessing</category><body package="Fit-Examples">file: aString	&lt;fitTakes: #String&gt;	file := aString</body><body package="Fit-Examples">wiki: aBoolean	&lt;fitTakes: #Boolean&gt;	wiki := aBoolean</body></methods><methods><class-id>Eg.Net.Simulator</class-id> <category>accessing</category><body package="Fit-Examples">coord	&lt;fitReturns: #GeoCoordinate&gt;	^coord</body><body package="Fit-Examples">coord: anObject	&lt;fitTakes: #GeoCoordinate&gt;	coord := anObject</body><body package="Fit-Examples">name: aString	&lt;fitTakes: #String&gt;</body><body package="Fit-Examples">nodes	&lt;fitReturns: #Number&gt;	^nodes</body><body package="Fit-Examples">population: aNumber	&lt;fitTakes: #Number&gt;</body><body package="Fit-Examples">zip: anObject	&lt;fitTakes: #String&gt;	zip := anObject</body></methods><methods><class-id>Eg.GetDates</class-id> <category>accessing</category><body package="Fit-Examples">inDate: aDate	&lt;fitTakes: #Date&gt;	inDate := aDate</body><body package="Fit-Examples">updatedDate	&lt;fitReturns: #Date&gt;	^inDate</body></methods><methods><class-id>Eg.BinaryChop</class-id> <category>operations</category><body package="Fit-Examples">fri	&lt;fitReturns: #Number&gt;	^self chopFriday: key in: array</body><body package="Fit-Examples">mon	&lt;fitReturns: #Number&gt;	^self chopMonday: key in: array</body><body package="Fit-Examples">thr	&lt;fitReturns: #Number&gt;	^self chopThursday: key in: array</body><body package="Fit-Examples">tue	&lt;fitReturns: #Number&gt;	^self chopTuesday: key in: array</body><body package="Fit-Examples">wed	&lt;fitReturns: #Number&gt;	^self chopWednesday: key in: array</body></methods><methods><class-id>Eg.BinaryChop</class-id> <category>accessing</category><body package="Fit-Examples">array: anArray	&lt;fitTakes: #(#( #Number ))&gt;	^array := anArray</body><body package="Fit-Examples">key: anInteger	&lt;fitTakes: #Number&gt;	key := anInteger</body></methods><methods><class-id>Eg.Music.Browser</class-id> <category>search buttons</category><body package="Fit-Examples">selectedSongs	&lt;fitReturns: #Number&gt;	^MusicLibrary displayCount</body></methods><methods><class-id>Eg.Music.Browser</class-id> <category>play buttons</category><body package="Fit-Examples">remaining	&lt;fitReturns: #Number&gt;	^MusicPlayer minutesRemaining</body><body package="Fit-Examples">status	&lt;fitReturns: #String&gt;	^Music status</body></methods><methods><class-id>Eg.Music.Browser</class-id> <category>select detail</category><body package="Fit-Examples">album	&lt;fitReturns: #String&gt;	^MusicLibrary looking album</body><body package="Fit-Examples">artist	&lt;fitReturns: #String&gt;	^MusicLibrary looking artist</body><body package="Fit-Examples">playing	&lt;fitReturns: #String&gt;	^MusicPlayer playing title</body><body package="Fit-Examples">select: anInteger	&lt;fitTakes: #Integer&gt;	MusicLibrary select: (MusicLibrary musicAt: anInteger)</body><body package="Fit-Examples">time	&lt;fitReturns: #Number&gt;	^MusicLibrary looking time</body><body package="Fit-Examples">title	&lt;fitReturns: #String&gt;	^MusicLibrary looking title</body><body package="Fit-Examples">track	&lt;fitReturns: #String&gt;	^MusicLibrary looking track</body><body package="Fit-Examples">year	&lt;fitReturns: #Integer&gt;	^MusicLibrary looking year</body></methods><methods><class-id>Eg.Music.Browser</class-id> <category>library</category><body package="Fit-Examples">library: path	&lt;fitTakes: #String&gt;	MusicLibrary load: path</body><body package="Fit-Examples">totalSongs	&lt;fitReturns: #Integer&gt;	^MusicLibrary library size</body></methods><methods><class-id>Eg.Music.Music</class-id> <category>accessing</category><body package="Fit-Examples">album	&lt;fitReturns: #String&gt;	^album</body><body package="Fit-Examples">artist	&lt;fitReturns: #String&gt;	^artist</body><body package="Fit-Examples">date	&lt;fitReturns: #Date&gt;	^date</body><body package="Fit-Examples">genre	&lt;fitReturns: #String&gt;	^genre</body><body package="Fit-Examples">size	&lt;fitReturns: #Number&gt;	^size</body><body package="Fit-Examples">title	&lt;fitReturns: #String&gt;	^title</body><body package="Fit-Examples">year	&lt;fitReturns: #Number&gt;	^year</body></methods><methods><class-id>Eg.Music.Music</class-id> <category>querying</category><body package="Fit-Examples">time	&lt;fitReturns: #Number&gt;	^(seconds asFloat / 0.6) rounded asFloat / 100</body><body package="Fit-Examples">track	&lt;fitReturns: #String&gt;	^trackNumber printString , ' of ' , trackCount printString</body></methods><methods><class-id>Eg.ArithmeticColumnFixture</class-id> <category>accessing</category><body package="Fit-Examples">x: aNumber	&lt;fitTakes: #Number&gt;	x := aNumber</body><body package="Fit-Examples">y: aNumber	&lt;fitTakes: #Number&gt;	y := aNumber</body></methods><methods><class-id>Eg.ArithmeticColumnFixture</class-id> <category>operations</category><body package="Fit-Examples">cos	&lt;fitReturns: #ScientificDouble&gt;	^ScientificDouble value: x degreesToRadians cos</body><body package="Fit-Examples">divide	&lt;fitReturns: #Number&gt;	^x quo: y</body><body package="Fit-Examples">floating	&lt;fitReturns: #Number&gt;	^(x / y) asFloat</body><body package="Fit-Examples">plus	&lt;fitReturns: #Number&gt;	^x + y</body><body package="Fit-Examples">sin	&lt;fitReturns: #ScientificDouble&gt;	^ScientificDouble value: x degreesToRadians sin</body><body package="Fit-Examples">times	&lt;fitReturns: #Number&gt;	^x * y</body></methods><methods><class-id>Eg.Division</class-id> <category>accessing</category><body package="Fit-Examples">denominator: anObject	&lt;fitTakes: #Double&gt;	denominator := anObject</body><body package="Fit-Examples">numerator: anObject	&lt;fitTakes: #Double&gt;	numerator := anObject</body><body package="Fit-Examples">quotient	&lt;fitReturns: #Double&gt;	^numerator / denominator</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Magnitude</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>SortedCollection</name><environment>Core</environment><super>Core.OrderedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>sortBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Sequenceable</category><attributes><package>Collections-Sequenceable</package></attributes></class><class><name>Fixture</name><environment>Fit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>counts summary arguments listener </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Framework</category><attributes><package>Fit</package></attributes></class><class><name>PrimitiveFixture</name><environment>Fit</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit</package></attributes></class><class><name>TimedActionFixture</name><environment>Fit</environment><super>Fit.ActionFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Framework</category><attributes><package>Fit</package></attributes></class><class><name>ColumnFixture</name><environment>Fit</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>columnBindings hasExecuted </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Framework</category><attributes><package>Fit</package></attributes></class><class><name>RowFixture</name><environment>Fit</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>results missing surplus </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Framework</category><attributes><package>Fit</package></attributes></class></st-source>