<?xml version="1.0"?><st-source><!-- Name: Fit-Book-RPS-TestsNotice:                     GNU GENERAL PUBLIC LICENSE                       Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.                            Preamble  The licenses for most software are designed to take away yourfreedom to share and change it.  By contrast, the GNU General PublicLicense is intended to guarantee your freedom to share and change freesoftware- to make sure the software is free for all its users.  ThisGeneral Public License applies to most of the Free SoftwareFoundation's software and to any other program whose authors commit tousing it.  (Some other Free Software Foundation software is covered bythe GNU Lesser General Public License instead.)  You can apply it toyour programs, too.  When we speak of free software, we are referring to freedom, notprice.  Our General Public Licenses are designed to make sure that youhave the freedom to distribute copies of free software (and charge forthis service if you wish), that you receive source code or can get itif you want it, that you can change the software or use pieces of itin new free programs; and that you know you can do these things.  To protect your rights, we need to make restrictions that forbidanyone to deny you these rights or to ask you to surrender the rights.These restrictions translate to certain responsibilities for you if youdistribute copies of the software, or if you modify it.  For example, if you distribute copies of such a program, whethergratis or for a fee, you must give the recipients all the rights thatyou have.  You must make sure that they, too, receive or can get thesource code.  And you must show them these terms so they know theirrights.  We protect your rights with two steps: (1) copyright the software, and(2) offer you this license which gives you legal permission to copy,distribute and/or modify the software.  Also, for each author's protection and ours, we want to make certainthat everyone understands that there is no warranty for this freesoftware.  If the software is modified by someone else and passed on, wewant its recipients to know that what they have is not the original, sothat any problems introduced by others will not reflect on the originalauthors' reputations.  Finally, any free program is threatened constantly by softwarepatents.  We wish to avoid the danger that redistributors of a freeprogram will individually obtain patent licenses, in effect making theprogram proprietary.  To prevent this, we have made it clear that anypatent must be licensed for everyone's free use or not licensed at all.  The precise terms and conditions for copying, distribution andmodification follow.                    GNU GENERAL PUBLIC LICENSE   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION  0. This License applies to any program or other work which containsa notice placed by the copyright holder saying it may be distributedunder the terms of this General Public License.  The "Program", below,refers to any such program or work, and a "work based on the Program"means either the Program or any derivative work under copyright law:that is to say, a work containing the Program or a portion of it,either verbatim or with modifications and/or translated into anotherlanguage.  (Hereinafter, translation is included without limitation inthe term "modification".)  Each licensee is addressed as "you".Activities other than copying, distribution and modification are notcovered by this License; they are outside its scope.  The act ofrunning the Program is not restricted, and the output from the Programis covered only if its contents constitute a work based on theProgram (independent of having been made by running the Program).Whether that is true depends on what the Program does.  1. You may copy and distribute verbatim copies of the Program'ssource code as you receive it, in any medium, provided that youconspicuously and appropriately publish on each copy an appropriatecopyright notice and disclaimer of warranty; keep intact all thenotices that refer to this License and to the absence of any warranty;and give any other recipients of the Program a copy of this Licensealong with the Program.You may charge a fee for the physical act of transferring a copy, andyou may at your option offer warranty protection in exchange for a fee.  2. You may modify your copy or copies of the Program or any portionof it, thus forming a work based on the Program, and copy anddistribute such modifications or work under the terms of Section 1above, provided that you also meet all of these conditions:    a) You must cause the modified files to carry prominent notices    stating that you changed the files and the date of any change.    b) You must cause any work that you distribute or publish, that in    whole or in part contains or is derived from the Program or any    part thereof, to be licensed as a whole at no charge to all third    parties under the terms of this License.    c) If the modified program normally reads commands interactively    when run, you must cause it, when started running for such    interactive use in the most ordinary way, to print or display an    announcement including an appropriate copyright notice and a    notice that there is no warranty (or else, saying that you provide    a warranty) and that users may redistribute the program under    these conditions, and telling the user how to view a copy of this    License.  (Exception: if the Program itself is interactive but    does not normally print such an announcement, your work based on    the Program is not required to print an announcement.)These requirements apply to the modified work as a whole.  Ifidentifiable sections of that work are not derived from the Program,and can be reasonably considered independent and separate works inthemselves, then this License, and its terms, do not apply to thosesections when you distribute them as separate works.  But when youdistribute the same sections as part of a whole which is a work basedon the Program, the distribution of the whole must be on the terms ofthis License, whose permissions for other licensees extend to theentire whole, and thus to each and every part regardless of who wrote it.Thus, it is not the intent of this section to claim rights or contestyour rights to work written entirely by you; rather, the intent is toexercise the right to control the distribution of derivative orcollective works based on the Program.In addition, mere aggregation of another work not based on the Programwith the Program (or with a work based on the Program) on a volume ofa storage or distribution medium does not bring the other work underthe scope of this License.  3. You may copy and distribute the Program (or a work based on it,under Section 2) in object code or executable form under the terms ofSections 1 and 2 above provided that you also do one of the following:    a) Accompany it with the complete corresponding machine-readable    source code, which must be distributed under the terms of Sections    1 and 2 above on a medium customarily used for software interchange; or,    b) Accompany it with a written offer, valid for at least three    years, to give any third party, for a charge no more than your    cost of physically performing source distribution, a complete    machine-readable copy of the corresponding source code, to be    distributed under the terms of Sections 1 and 2 above on a medium    customarily used for software interchange; or,    c) Accompany it with the information you received as to the offer    to distribute corresponding source code.  (This alternative is    allowed only for noncommercial distribution and only if you    received the program in object code or executable form with such    an offer, in accord with Subsection b above.)The source code for a work means the preferred form of the work formaking modifications to it.  For an executable work, complete sourcecode means all the source code for all modules it contains, plus anyassociated interface definition files, plus the scripts used tocontrol compilation and installation of the executable.  However, as aspecial exception, the source code distributed need not includeanything that is normally distributed (in either source or binaryform) with the major components (compiler, kernel, and so on) of theoperating system on which the executable runs, unless that componentitself accompanies the executable.If distribution of executable or object code is made by offeringaccess to copy from a designated place, then offering equivalentaccess to copy the source code from the same place counts asdistribution of the source code, even though third parties are notcompelled to copy the source along with the object code.  4. You may not copy, modify, sublicense, or distribute the Programexcept as expressly provided under this License.  Any attemptotherwise to copy, modify, sublicense or distribute the Program isvoid, and will automatically terminate your rights under this License.However, parties who have received copies, or rights, from you underthis License will not have their licenses terminated so long as suchparties remain in full compliance.  5. You are not required to accept this License, since you have notsigned it.  However, nothing else grants you permission to modify ordistribute the Program or its derivative works.  These actions areprohibited by law if you do not accept this License.  Therefore, bymodifying or distributing the Program (or any work based on theProgram), you indicate your acceptance of this License to do so, andall its terms and conditions for copying, distributing or modifyingthe Program or works based on it.  6. Each time you redistribute the Program (or any work based on theProgram), the recipient automatically receives a license from theoriginal licensor to copy, distribute or modify the Program subject tothese terms and conditions.  You may not impose any furtherrestrictions on the recipients' exercise of the rights granted herein.You are not responsible for enforcing compliance by third parties tothis License.  7. If, as a consequence of a court judgment or allegation of patentinfringement or for any other reason (not limited to patent issues),conditions are imposed on you (whether by court order, agreement orotherwise) that contradict the conditions of this License, they do notexcuse you from the conditions of this License.  If you cannotdistribute so as to satisfy simultaneously your obligations under thisLicense and any other pertinent obligations, then as a consequence youmay not distribute the Program at all.  For example, if a patentlicense would not permit royalty-free redistribution of the Program byall those who receive copies directly or indirectly through you, thenthe only way you could satisfy both it and this License would be torefrain entirely from distribution of the Program.If any portion of this section is held invalid or unenforceable underany particular circumstance, the balance of the section is intended toapply and the section as a whole is intended to apply in othercircumstances.It is not the purpose of this section to induce you to infringe anypatents or other property right claims or to contest validity of anysuch claims; this section has the sole purpose of protecting theintegrity of the free software distribution system, which isimplemented by public license practices.  Many people have madegenerous contributions to the wide range of software distributedthrough that system in reliance on consistent application of thatsystem; it is up to the author/donor to decide if he or she is willingto distribute software through any other system and a licensee cannotimpose that choice.This section is intended to make thoroughly clear what is believed tobe a consequence of the rest of this License.  8. If the distribution and/or use of the Program is restricted incertain countries either by patents or by copyrighted interfaces, theoriginal copyright holder who places the Program under this Licensemay add an explicit geographical distribution limitation excludingthose countries, so that distribution is permitted only in or amongcountries not thus excluded.  In such case, this License incorporatesthe limitation as if written in the body of this License.  9. The Free Software Foundation may publish revised and/or new versionsof the General Public License from time to time.  Such new versions willbe similar in spirit to the present version, but may differ in detail toaddress new problems or concerns.Each version is given a distinguishing version number.  If the Programspecifies a version number of this License which applies to it and "anylater version", you have the option of following the terms and conditionseither of that version or of any later version published by the FreeSoftware Foundation.  If the Program does not specify a version number ofthis License, you may choose any version ever published by the Free SoftwareFoundation.  10. If you wish to incorporate parts of the Program into other freeprograms whose distribution conditions are different, write to the authorto ask for permission.  For software which is copyrighted by the FreeSoftware Foundation, write to the Free Software Foundation; we sometimesmake exceptions for this.  Our decision will be guided by the two goalsof preserving the free status of all derivatives of our free software andof promoting the sharing and reuse of software generally.                            NO WARRANTY  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTYFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHENOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIESPROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSEDOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OFMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK ASTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THEPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,REPAIR OR CORRECTION.  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITINGWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/ORREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISINGOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITEDTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BYYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHERPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THEPOSSIBILITY OF SUCH DAMAGES.                     END OF TERMS AND CONDITIONS            How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatestpossible use to the public, the best way to achieve this is to make itfree software which everyone can redistribute and change under these terms.  To do so, attach the following notices to the program.  It is safestto attach them to the start of each source file to most effectivelyconvey the exclusion of warranty; and each file should have at leastthe "copyright" line and a pointer to where the full notice is found.    <one line to give the program's name and a brief idea of what it does.>    Copyright (C) <year>  <name of author>    This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License along    with this program; if not, write to the Free Software Foundation, Inc.,    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.Also add information on how to contact you by electronic and paper mail.If the program is interactive, make it output a short notice like thiswhen it starts in an interactive mode:    Gnomovision version 69, Copyright (C) year name of author    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.    This is free software, and you are welcome to redistribute it    under certain conditions; type `show c' for details.The hypothetical commands `show w' and `show c' should show the appropriateparts of the General Public License.  Of course, the commands you use maybe called something other than `show w' and `show c'; they could even bemouse-clicks or menu items- whatever suits your program.You should also get your employer (if you work as a programmer) or yourschool, if any, to sign a "copyright disclaimer" for the program, ifnecessary.  Here is a sample; alter the names:  Yoyodyne, Inc., hereby disclaims all copyright interest in the program  `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989  Ty Coon, President of ViceThis General Public License does not permit incorporating your program intoproprietary programs.  If your program is a subroutine library, you mayconsider it more useful to permit linking proprietary applications with thelibrary.  If this is what you want to do, use the GNU Lesser GeneralPublic License instead of this License.Comment: This package contains the tests for the Rent-A-Party Software (RPS) examples in [Fit for Developing Software"](http://www.amazon.com/Fit-Developing-Software-Framework-Integrated/dp/0321269349) by Rick Mugridge and Ward Cunningham.This is an updated version of the RPS example that shipped with FitLibrary2.# Smalltalk FitSmalltalk Fit is a Smalltalk implementation of Ward Cunningham's [Framework for Integrated Tests](http://fit.c2.com), [Fitnesse](http://www.fitnesse.org), and Rick Mugridge's [FitLibrary](http://fitlibrary.sourceforge.net).This version contains the equivalent features of:* fit-java-1.1* fitnesse-20121220* FitLibrary-2.0   Copyright (C) 2004-2013 Randy Coulman    This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License along    with this program; if not, write to the Free Software Foundation, Inc.,    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.See the copyright tab in the RB, the 'notice' property of this package, or the License.txt file on GitHub.DbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1540DbUsername: randyDbVersion: 4DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'Fit-Book-RPS' '') #(#any 'SUnitToo' ''))PackageName: Fit-Book-RPS-TestsParcel: #('Fit-Book-RPS-Tests')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'Fit-Book-RPS' #componentType #package) #(#name 'SUnitToo' #componentType #package))PrerequisiteParcels: #(#('Base VisualWorks' '') #('Fit-Book-RPS' '') #('SUnitToo' ''))PrintStringCache: (4,randy)Version: 4Date: 7:21:06 AM May 24, 2013 --><time-stamp>From VisualWorks® Personal Use Edition, 7.9.1 of October 18, 2012 on May 24, 2013 at 7:21:06 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ReservationTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cup date staff person reservation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>MoneyTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>AmericanExpressTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rentEz card </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>TemplateTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>item template </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>BonusPointsTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value bonusPointsOne bonusPointsTwo bonusPointsZero bonusPointsTwo2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>AcceptBookingTransactionItemTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rentEz acceptItem </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>RentalItemTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cup item rental reservation person staff date </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>VisaTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rentEz card </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><comment><class-id>RPS.VisaTest</class-id><body>The following comment was copied from the original comments of RPS.MastercardTest==========================================================The following comment was copied from the original comments of RPS.DiscoverTest==========================================================The following comment was copied from the original comments of RPS.DinersClubTest==========================================================The following comment was copied from the original comments of RPS.AmericanExpressTest==========================================================</body></comment><class><name>DurationRPSTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>RatesTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rateOne rateTwo rateThree rateHourCheaper </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>MyDateTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>date1 dateLater </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>RentalTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cup date staff person rental </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>BookTransactionItemTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rentEz bookItem </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>CreditCardTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>RentalItemTypeTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>item </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>DinersClubTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rentEz card </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><comment><class-id>RPS.DinersClubTest</class-id><body>The following comment was copied from the original comments of RPS.AmericanExpressTest==========================================================</body></comment><class><name>StaffMemberTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>staff person rates itemType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>BookingTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cup date staff person reservation booking </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>ItemRestrictionTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>restriction restriction2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>VoucherTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>voucher2 voucher3 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>AddBookingTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>client </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>DiscoverTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rentEz card </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><comment><class-id>RPS.DiscoverTest</class-id><body>The following comment was copied from the original comments of RPS.DinersClubTest==========================================================The following comment was copied from the original comments of RPS.AmericanExpressTest==========================================================</body></comment><class><name>RentEzTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>MastercardTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rentEz card </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><comment><class-id>RPS.MastercardTest</class-id><body>The following comment was copied from the original comments of RPS.DiscoverTest==========================================================The following comment was copied from the original comments of RPS.DinersClubTest==========================================================The following comment was copied from the original comments of RPS.AmericanExpressTest==========================================================</body></comment><class><name>ClientTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>staff person itemType rates </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><class><name>BuyItemTypeTest</name><environment>RPS</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>itemType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Tests</package></attributes></class><methods><class-id>RPS.ReservationTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testCount	self assert: reservation count = 2</body><body package="Fit-Book-RPS-Tests">testDueDate	| expected |	expected := (MyDate fromMilliseconds: 2) + (DurationRPS days: 1).	self assert: reservation dueDate = expected</body><body package="Fit-Book-RPS-Tests">testHireItemType	self assert: reservation hireItemType == cup</body><body package="Fit-Book-RPS-Tests">testHireItems	| rental |	rental := Rental				quantity: 1				of: cup				for: (DurationRPS days: 1)				startingOn: (MyDate fromMilliseconds: 2)				client: person				staffMember: staff.	reservation hireItems: rental client: person staffMember: staff.	self assert: (reservation hireItems				allSatisfy: [:each | each currentRental == rental])</body><body package="Fit-Book-RPS-Tests">testPeriod	self assert: reservation period = (DurationRPS days: 1)</body><body package="Fit-Book-RPS-Tests">testRemoveAll	self assert: reservation count = 2.	reservation removeAll.	self assert: reservation count isZero</body><body package="Fit-Book-RPS-Tests">testStartDate	self assert: reservation startDate = (MyDate fromMilliseconds: 2)</body><body package="Fit-Book-RPS-Tests">testTotalRentalCost	self assert: reservation totalRentalCost = (Money cents: 90)</body></methods><methods><class-id>RPS.ReservationTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	| m1 m2 m3 duration |	super setUp.	m1 := Money cents: 5.	m2 := Money cents: 45.	m3 := Money dollars: 2.	cup := RentalItemType				named: 'cup'				initialCount: 10				rates: (Rates hourly: m1 daily: m2 weekly: m3)				deposit: Money zero.	date := MyDate fromMilliseconds: 2.	duration := DurationRPS days: 1.	staff := StaffMember named: 'Admin' phoneNumber: '' creator: nil.	person := Client named: 'Customer' phoneNumber: '123' creator: staff.	reservation := Reservation				quantity: 2				of: cup				for: duration				startingOn: date</body></methods><methods><class-id>RPS.MoneyTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testAdd	| money100 |	money100 := Money cents: 100.	self		assert: money100 + (Money cents: 200) = (Money cents: 300);		assert: (money100 + (Money cents: -100)) isZero;		assert: (money100 + money100 negated) isZero</body><body package="Fit-Book-RPS-Tests">testDouble	self		assert: (Money dollars: 0.0001) isZero;		assert: (Money dollars: 1.004) = (Money cents: 100);		assert: (Money dollars: 1.005) = (Money cents: 101);		assert: (Money dollars: 10.044) = (Money cents: 1004);		assert: (Money dollars: -1.004) = (Money cents: -100);		assert: (Money dollars: -1.005) = (Money cents: -101);		assert: (Money dollars: -10.044) = (Money cents: -1004)</body><body package="Fit-Book-RPS-Tests">testEquals	self deny: (Money cents: 1) = 'Money'</body><body package="Fit-Book-RPS-Tests">testHash	| cents |	cents := 18695.	self assert: (Money cents: cents) hash = cents hash</body><body package="Fit-Book-RPS-Tests">testMinus	| money100 money200 |	money100 := Money cents: 100.	money200 := Money cents: 200.	self		assert: money100 - money200 = (Money cents: -100);		assert: money100 - (Money cents: -100) = money200;		assert: money100 - money100 negated = money200</body><body package="Fit-Book-RPS-Tests">testNegate	self assert: Money zero = Money zero negated.	self assert: (Money dollars: 30) = (Money dollars: 30) negated negated.	self assert: (Money dollars: 30) = (Money dollars: -30) negated</body><body package="Fit-Book-RPS-Tests">testParse	self		assert: (Money fitParse: '0.00') isZero;		assert: (Money fitParse: '10.50') = (Money dollars: 10.50);		assert: (Money fitParse: '0.55') = (Money cents: 55);		assert: (Money fitParse: '-2.34') = (Money cents: -234).	self should: [Money fitParse: '90.002'] raise: Error</body><body package="Fit-Book-RPS-Tests">testPrinting	self		assert: Money zero printString = '0.00';		assert: (Money cents: 101) printString = '1.01';		assert: (Money cents: 10) printString = '0.10';		assert: (Money cents: 1) printString = '0.01';		assert: (Money cents: 123456) printString = '1234.56';		assert: (Money cents: -123456) printString = '-1234.56'</body><body package="Fit-Book-RPS-Tests">testRelations	| money1 moneyOne money2 |	money1 := Money cents: 1.	moneyOne := Money cents: 1.	money2 := Money cents: 2.	self		assert: money1 = money1;		assert: money1 = moneyOne;		deny: money1 = money2.	self		assert: money2 &gt; money1;		assert: money2 &gt;= money2;		deny: money1 &gt; money2;		deny: money1 &gt;= money2</body><body package="Fit-Book-RPS-Tests">testTimes	| money100 |	money100 := Money cents: 100.	self		assert: Money zero * 3 = Money zero;		assert: money100 * 3 = (Money cents: 300);		assert: money100 * -3 = (Money cents: -300);		assert: money100 * 0.1 = (Money cents: 10);		assert: money100 * 0.01 = (Money cents: 1);		assert: money100 * 0.001 = Money zero;		assert: money100 negated * -0.1 = (Money cents: 10);		assert: money100 * -0.01 = (Money cents: -1);		assert: money100 * -0.001 = Money zero</body><body package="Fit-Book-RPS-Tests">testZero	self		assert: Money zero isZero;		deny: (Money cents: 1) isZero</body></methods><methods><class-id>RPS.AmericanExpressTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testExpiryDate	self assert: card expiryDate				= (MyDate timestamp: (CreditCard parseExpiryDate: '05/06')).	self should: 			[CreditCard				type: 'AmericanExpress'				expiryString: '05/05'				number: '372730553483969'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testILength	self should: 			[CreditCard				type: 'AmericanExpress'				expiryString: '05/06'				number: '372730553483969595959'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testIncorrectPrefix	self should: 			[CreditCard				type: 'AmericanExpress'				expiryString: '05/06'				number: '582730553483969'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testIsRightNumber	self assert: card creditCardNumber = '372730553483969'</body><body package="Fit-Book-RPS-Tests">testTrimsSpacesFromCardNumber	card := CreditCard				type: 'AmericanExpress'				expiryString: '05/06'				number: '  372 730 55348 3969 '				rentEz: rentEz.	self assert: card creditCardNumber = '372730553483969'</body></methods><methods><class-id>RPS.AmericanExpressTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	| mockClock |	rentEz := RentEz new.	mockClock := MockClock new time: (MyDate fitParse: '2006/05/15').	rentEz clock: mockClock.	card := CreditCard				type: 'AmericanExpress'				expiryString: '05/06'				number: '372730553483969'				rentEz: rentEz</body></methods><methods><class-id>RPS.TemplateTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	super setUp.	template := Template new.	item := RentalItemType				named: 'test'				initialCount: 2				rates: (Rates						hourly: (Money cents: 2)						daily: (Money cents: 4)						weekly: (Money cents: 8))				deposit: (Money cents: 12)</body></methods><methods><class-id>RPS.TemplateTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testFill	self assert: (template fillForPeople: 12 duration: (DurationRPS days: 4))				= Money zero.	template addItem: item forPeople: 23.	self assert: (template fillForPeople: 12 duration: (DurationRPS days: 4))				= (Money cents: 20)</body><body package="Fit-Book-RPS-Tests">testTemplate	self assert: template items isEmpty.	template addItem: item forPeople: 23.	self assert: template items size = 1.	template deleteItem: item.	self assert: template items isEmpty</body></methods><methods><class-id>RPS.BonusPointsTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testBonusPointCalculation	self		assert: (BonusPoints forAmountSpent: (Money dollars: 100))					= BonusPoints zero;		assert: (BonusPoints forAmountSpent: (Money dollars: 100.01))					= (BonusPoints dollars: 0.01);		assert: (BonusPoints forAmountSpent: (Money dollars: 100.10))					= (BonusPoints dollars: 0.01);		assert: (BonusPoints forAmountSpent: (Money dollars: 101.00))					= (BonusPoints dollars: 0.05);		assert: (BonusPoints forAmountSpent: (Money dollars: 380.00))					= (BonusPoints dollars: 14);		assert: (BonusPoints forAmountSpent: (Money dollars: 500.00))					= (BonusPoints dollars: 20);		assert: (BonusPoints forAmountSpent: (Money dollars: 725.00))					= (BonusPoints dollars: 42.50)</body><body package="Fit-Book-RPS-Tests">testEquals	self		assert: bonusPointsTwo = bonusPointsTwo2;		deny: bonusPointsTwo = bonusPointsOne;		assert: bonusPointsTwo = bonusPointsTwo</body><body package="Fit-Book-RPS-Tests">testMinus	self		assert: bonusPointsZero - BonusPoints zero = BonusPoints zero;		assert: bonusPointsTwo - bonusPointsOne = (BonusPoints cents: 116)</body><body package="Fit-Book-RPS-Tests">testParse	self		assert: (BonusPoints fitParse: '3.40') = bonusPointsOne;		assert: (BonusPoints fitParse: '4.56') = bonusPointsTwo;		assert: (BonusPoints fitParse: '4.56') = bonusPointsTwo2;		assert: (BonusPoints fitParse: '0') = bonusPointsZero</body><body package="Fit-Book-RPS-Tests">testPlus	self		assert: bonusPointsZero + BonusPoints zero = BonusPoints zero;		assert: bonusPointsTwo + bonusPointsOne = (BonusPoints cents: 796)</body><body package="Fit-Book-RPS-Tests">testPrintString	self		assert: bonusPointsOne printString = '3.40';		assert: bonusPointsTwo printString = '4.56';		assert: bonusPointsZero printString = '0.00'</body><body package="Fit-Book-RPS-Tests">testValueInDouble	self		assert: bonusPointsOne valueInDouble = 3.4d;		assert: bonusPointsTwo valueInDouble = 4.56d;		assert: bonusPointsZero valueInDouble isZero;		assert: bonusPointsTwo2 valueInDouble = 4.56d</body></methods><methods><class-id>RPS.BonusPointsTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	super setUp.	bonusPointsOne := BonusPoints cents: 340.	bonusPointsTwo := BonusPoints cents: 456.	bonusPointsZero := BonusPoints zero.	bonusPointsTwo2 := BonusPoints dollars: 4.5623</body></methods><methods><class-id>RPS.AcceptBookingTransactionItemTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testComplete	| itemType cups |	itemType := rentEz rentalItemTypeNamed: 'cup'.	cups := itemType identifiedHireItems				select: [:each | each hireItemTypeName = 'cup'].	self assert: cups size = 12.	self assert: itemType freeCount = 12.	acceptItem complete.	self assert: itemType freeCount = 2</body><body package="Fit-Book-RPS-Tests">testTotalCost	self assert: acceptItem totalCost = Money zero</body></methods><methods><class-id>RPS.AcceptBookingTransactionItemTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	| m1 m2 m3 duration staff date itemType transaction bookItem |	super setUp.	rentEz := RentEz new.	rentEz createStaffMember: 'John' phone: '5551234' creator: nil.	staff := rentEz staffMemberNamed: 'John'.	rentEz createClient: 'Bob' phone: '55554354' creator: staff.	m1 := Money cents: 5.	m2 := Money cents: 45.	m3 := Money dollars: 2.	rentEz		createRentalItemType: 'cup'		initialCount: 12		rates: (Rates hourly: m1 daily: m2 weekly: m3)		deposit: Money zero.	itemType := rentEz rentalItemTypeNamed: 'cup'.	transaction := rentEz beginClientTransaction: 'Bob' staff: 'John'.	date := MyDate new.	duration := DurationRPS days: 1.	bookItem := BookTransactionItem				book: 10				of: itemType				on: date				for: duration				deliveryRate: nil				address: ''				transaction: transaction.	bookItem complete.	acceptItem := AcceptBookingTransactionItem				acceptBooking: 10				of: itemType				on: date				for: duration				transaction: transaction</body></methods><methods><class-id>RPS.RentalItemTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testCancelHireAndReturnHire	item returnHire.	item		doHire: rental		reservation: reservation		client: person		staffMember: staff.	self deny: item currentRental isNil.	item returnHire.	self assert: item currentRental isNil</body><body package="Fit-Book-RPS-Tests">testCompleteRepair	self deny: item isBeingRepaired.	item repair.	self assert: item isBeingRepaired.	item completeRepairOn: (MyDate fromMilliseconds: 1).	self deny: item isBeingRepaired.	self assert: item lastMaintained = (MyDate fromMilliseconds: 1)</body><body package="Fit-Book-RPS-Tests">testDoHire	item returnHire.	item		doHire: rental		reservation: reservation		client: person		staffMember: staff.	self assert: item currentRental == rental</body><body package="Fit-Book-RPS-Tests">testEndDate	self assert: item endDate = rental endDate</body><body package="Fit-Book-RPS-Tests">testHasHireToReturn	item returnHire.	self deny: item hasHireToReturn.	item		doHire: rental		reservation: reservation		client: person		staffMember: staff.	self assert: item hasHireToReturn</body><body package="Fit-Book-RPS-Tests">testHasMaintenanceDate	self deny: item hasMaintenanceDate.	item completeRepairOn: (MyDate fromMilliseconds: 2).	self assert: item hasMaintenanceDate</body><body package="Fit-Book-RPS-Tests">testHireItemTypeName	self assert: item hireItemTypeName = 'cup'</body><body package="Fit-Book-RPS-Tests">testIdentifier	self assert: (item identifier beginsWith: 'cup')</body><body package="Fit-Book-RPS-Tests">testIsFree	item		doHire: rental		reservation: reservation		client: person		staffMember: staff.	self deny: item currentRental isNil.	item repair.	self deny: item isFree.	item returnHire.	self deny: item isFree.	self assert: item isBeingRepaired.	item completeRepairOn: (MyDate fromMilliseconds: 1).	self deny: item isBeingRepaired.	self assert: item currentRental isNil.	self assert: item isFree</body><body package="Fit-Book-RPS-Tests">testLastMaintained	self assert: item lastMaintained isNil.	item completeRepairOn: (MyDate fromMilliseconds: 2).	self assert: item lastMaintained = (MyDate fromMilliseconds: 2)</body><body package="Fit-Book-RPS-Tests">testNeedsMaintenance	| date2 |	date2 := MyDate fromMilliseconds: 2.	self deny: (item needsMaintenanceAsOf: date2).	item completeRepairOn: date2.	self deny: (item needsMaintenanceAsOf: (MyDate fromMilliseconds: 1)).	self assert: (item needsMaintenanceAsOf: date2)</body><body package="Fit-Book-RPS-Tests">testRepairAndIsBeingRepaired	self deny: item isBeingRepaired.	item repair.	self assert: item isBeingRepaired</body><body package="Fit-Book-RPS-Tests">testStartDate	self assert: item startDate = rental startDate</body></methods><methods><class-id>RPS.RentalItemTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	| m1 m2 m3 duration |	super setUp.	m1 := Money cents: 5.	m2 := Money cents: 45.	m3 := Money dollars: 2.	cup := RentalItemType				named: 'cup'				initialCount: 10				rates: (Rates hourly: m1 daily: m2 weekly: m3)				deposit: Money zero.	date := MyDate fromMilliseconds: 2.	duration := DurationRPS days: 1.	staff := StaffMember named: 'Admin' phoneNumber: '' creator: nil.	person := Client named: 'Customer' phoneNumber: '123' creator: staff.	reservation := Reservation				quantity: 2				of: cup				for: duration				startingOn: date.	rental := Rental				quantity: 1				of: cup				for: (DurationRPS days: 3)				startingOn: date				client: person				staffMember: staff.	reservation hireItems: rental client: person staffMember: staff.	item := reservation hireItems any</body></methods><methods><class-id>RPS.VisaTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testExpiryDate	self assert: card expiryDate				= (MyDate timestamp: (CreditCard parseExpiryDate: '05/06')).	self should: 			[CreditCard				type: 'Visa'				expiryString: '05/05'				number: '49927398716'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testILength	self shouldnt: 			[CreditCard				type: 'Visa'				expiryString: '05/06'				number: '49927398716'				rentEz: rentEz]		raise: InvalidCreditCardException.	self should: 			[CreditCard				type: 'Visa'				expiryString: '05/06'				number: '49927398716595959'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testIncorrectPrefix	self should: 			[CreditCard				type: 'Visa'				expiryString: '05/06'				number: '59927398715'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testIsRightNumber	self assert: card creditCardNumber = '4485891284549100'</body><body package="Fit-Book-RPS-Tests">testTrimsSpacesFromCardNumber	card := CreditCard				type: 'Visa'				expiryString: '05/06'				number: '  499 273 98716  '				rentEz: rentEz.	self assert: card creditCardNumber = '49927398716'</body></methods><methods><class-id>RPS.VisaTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	| mockClock |	rentEz := RentEz new.	mockClock := MockClock new time: (MyDate fitParse: '2006/05/15').	rentEz clock: mockClock.	card := CreditCard				type: 'Visa'				expiryString: '05/06'				number: '4485891284549100'				rentEz: rentEz</body></methods><methods><class-id>RPS.DurationRPSTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">test10Weeks	self check: '10 weeks' parsesAs: (DurationRPS weeks: 10)</body><body package="Fit-Book-RPS-Tests">test1Day	self check: '1 day' parsesAs: (DurationRPS days: 1)</body><body package="Fit-Book-RPS-Tests">test1Day1Hour	self check: '1 day 1 hour'		parsesAs: (DurationRPS hours: 1 days: 1 weeks: 0)</body><body package="Fit-Book-RPS-Tests">test1Hour	self check: '1 hour' parsesAs: (DurationRPS hours: 1)</body><body package="Fit-Book-RPS-Tests">test1Hour1Day	self check: '1 hour 1 day'		parsesAs: (DurationRPS hours: 1 days: 1 weeks: 0)</body><body package="Fit-Book-RPS-Tests">test1Week	self check: '1 week' parsesAs: (DurationRPS weeks: 1)</body><body package="Fit-Book-RPS-Tests">test2Hours	self check: '2 hours' parsesAs: (DurationRPS hours: 2)</body><body package="Fit-Book-RPS-Tests">test3Day	self check: '3 days' parsesAs: (DurationRPS days: 3)</body><body package="Fit-Book-RPS-Tests">testMissingUnits	self should: [self check: '1' parsesAs: (DurationRPS hours: 0)]		raise: Error</body><body package="Fit-Book-RPS-Tests">testPrinting	self assert: (DurationRPS hours: 1 days: 5 weeks: 8) printString				= '1 hour 5 days 8 weeks'</body><body package="Fit-Book-RPS-Tests">testThree	self check: '2 weeks 3 days 1 hour'		parsesAs: (DurationRPS hours: 1 days: 3 weeks: 2)</body><body package="Fit-Book-RPS-Tests">testThreeAgain	self check: '2 hours 1 day 9 weeks'		parsesAs: (DurationRPS hours: 2 days: 1 weeks: 9)</body></methods><methods><class-id>RPS.DurationRPSTest</class-id> <category>private</category><body package="Fit-Book-RPS-Tests">check: aString parsesAs: aDurationRPS	self assert: (DurationRPS fitParse: aString) = aDurationRPS</body></methods><methods><class-id>RPS.RatesTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testCostForPeriod	self		assert: (rateTwo costForPeriod: (DurationRPS hours: 12 days: 4 weeks: 5))				= (Money cents: 3876).	self assert: (rateTwo costForPeriod: (DurationRPS hours: 0)) = Money zero.	self		assert: (rateTwo costForPeriod: (DurationRPS hours: 6)) = (Money cents: 72).	self		assert: (rateTwo costForPeriod: (DurationRPS days: 8)) = (Money cents: 646).	self assert: (rateTwo costForPeriod: (DurationRPS weeks: 7))				= (Money cents: 4522).	self		assert: (rateThree				costForPeriod: (rateThree fairDuration: (DurationRPS days: 3)))					= (Money dollars: 3)</body><body package="Fit-Book-RPS-Tests">testDaily	self assert: rateOne daily = (Money cents: 142).	self assert: rateTwo daily = (Money cents: 142)</body><body package="Fit-Book-RPS-Tests">testFairDuration	self assert: (rateTwo fairDuration: (DurationRPS days: 10))				= (DurationRPS weeks: 1).	self assert: (rateThree fairDuration: (DurationRPS days: 3))				= (DurationRPS days: 3).	self assert: (rateHourCheaper fairDuration: (DurationRPS days: 4))				= (DurationRPS hours: 96)</body><body package="Fit-Book-RPS-Tests">testHourly	self assert: rateOne hourly = (Money cents: 12).	self assert: rateTwo hourly = (Money cents: 12)</body><body package="Fit-Book-RPS-Tests">testWeekly	self assert: rateOne weekly = (Money cents: 646).	self assert: rateTwo weekly = (Money cents: 646)</body></methods><methods><class-id>RPS.RatesTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	super setUp.	rateOne := Rates				hourly: (Money cents: 12)				daily: (Money cents: 142)				weekly: (Money cents: 646).	rateTwo := rateOne copy.	rateThree := Rates				hourly: (Money dollars: 1)				daily: (Money dollars: 1)				weekly: (Money dollars: 5).	rateHourCheaper := Rates				hourly: (Money cents: 50)				daily: (Money dollars: 14)				weekly: (Money cents: 2302030)</body></methods><methods><class-id>RPS.MyDateTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testAfter	self		deny: (date1 after: date1);		deny: (date1 after: dateLater);		assert: (dateLater after: date1)</body><body package="Fit-Book-RPS-Tests">testAfterMonths	self assert: (date1 afterMonths: 2) = (self date: '2004/07/06 09:01')</body><body package="Fit-Book-RPS-Tests">testBefore	self		deny: (date1 before: date1);		assert: (date1 before: dateLater);		deny: (dateLater before: date1)</body><body package="Fit-Book-RPS-Tests">testDurationTo	self		assert: (date1 durationTo: date1) = (self duration: '0 hours');		assert: (date1 durationTo: dateLater) = (self duration: '1 hours');		assert: (date1 durationTo: (self date: '2004/05/06 12:01'))					= (self duration: '3 hours');		assert: (date1 durationTo: (self date: '2004/05/14 10:01'))					= (self duration: '1 week 1 day 1 hour')</body><body package="Fit-Book-RPS-Tests">testEquals	self assert: date1 = date1.	self assert: date1 = (self date: '2004/05/06 09:01')</body><body package="Fit-Book-RPS-Tests">testNotEquals	self deny: date1 = (self date: '2004/05/06 09:02').	self deny: date1 = (self date: '2005/05/06 09:01').	self deny: date1 = '2004/05/06 09:02'</body><body package="Fit-Book-RPS-Tests">testPlusDuration	self		assert: date1 + (self duration: '1 hour') = (self date: '2004/05/06 10:01').	self		assert: date1 + (self duration: '2 days') = (self date: '2004/05/08 9:01').	self assert: date1 + (self duration: '4 weeks 2 days 1 hour')				= (self date: '2004/06/05 10:01')</body><body package="Fit-Book-RPS-Tests">testPlusNoDuration	self assert: date1 + (self duration: '0 hours') = date1.	self assert: date1 + (self duration: '0 days') = date1</body></methods><methods><class-id>RPS.MyDateTest</class-id> <category>private</category><body package="Fit-Book-RPS-Tests">date: aString	^MyDate fitParse: aString</body><body package="Fit-Book-RPS-Tests">duration: aString	^DurationRPS fitParse: aString</body></methods><methods><class-id>RPS.MyDateTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	super setUp.	date1 := self date: '2004/05/06 09:01'.	dateLater := self date: '2004/05/06 10:01'</body></methods><methods><class-id>RPS.RentalTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testClient	self assert: rental client == person</body><body package="Fit-Book-RPS-Tests">testCount	self assert: rental count = 2</body><body package="Fit-Book-RPS-Tests">testEndDate	| expected |	expected := (MyDate fromMilliseconds: 2) + (DurationRPS days: 1).	self assert: rental endDate = expected</body><body package="Fit-Book-RPS-Tests">testHireItemType	self assert: rental hireItemType == cup</body><body package="Fit-Book-RPS-Tests">testRentalItem	self assert: rental rentalItem = 'cup'</body><body package="Fit-Book-RPS-Tests">testReservation	| reservation |	reservation := rental reservation.	self assert: reservation count = 2</body><body package="Fit-Book-RPS-Tests">testStaffMember	self assert: rental staffMember == staff</body><body package="Fit-Book-RPS-Tests">testStartDate	self assert: rental startDate = (MyDate fromMilliseconds: 2)</body></methods><methods><class-id>RPS.RentalTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	| m1 m2 m3 duration |	super setUp.	m1 := Money cents: 5.	m2 := Money cents: 45.	m3 := Money dollars: 2.	cup := RentalItemType				named: 'cup'				initialCount: 10				rates: (Rates hourly: m1 daily: m2 weekly: m3)				deposit: Money zero.	date := MyDate fromMilliseconds: 2.	duration := DurationRPS days: 1.	staff := StaffMember named: 'Admin' phoneNumber: '' creator: nil.	person := Client named: 'Customer' phoneNumber: '123' creator: staff.	rental := Rental				quantity: 2				of: cup				for: duration				startingOn: date				client: person				staffMember: staff</body></methods><methods><class-id>RPS.BookTransactionItemTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	| m1 m2 m3 staff itemType transaction |	super setUp.	rentEz := RentEz new.	rentEz createStaffMember: 'John' phone: '5551234' creator: nil.	staff := rentEz staffMemberNamed: 'John'.	rentEz createClient: 'Bob' phone: '55554354' creator: staff.	m1 := Money cents: 5.	m2 := Money cents: 45.	m3 := Money dollars: 2.	rentEz		createRentalItemType: 'cup'		initialCount: 10		rates: (Rates hourly: m1 daily: m2 weekly: m3)		deposit: Money zero.	itemType := rentEz rentalItemTypeNamed: 'cup'.	transaction := rentEz beginClientTransaction: 'Bob' staff: 'John'.	bookItem := BookTransactionItem				book: 10				of: itemType				on: MyDate new				for: (DurationRPS days: 1)				deliveryRate: nil				address: ''				transaction: transaction</body></methods><methods><class-id>RPS.BookTransactionItemTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testComplete	| itemType cups |	bookItem complete.	itemType := rentEz rentalItemTypeNamed: 'cup'.	cups := itemType identifiedHireItems				select: [:each | each hireItemTypeName = 'cup'].	self assert: cups size = 10</body><body package="Fit-Book-RPS-Tests">testTotalCost	self assert: bookItem totalCost = (Money dollars: 4.50)</body></methods><methods><class-id>RPS.CreditCardTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testCreateNonExistentCreditCard	self should: 			[CreditCard				type: 'None'				expiryString: '05/06'				number: '49927398716'				rentEz: RentEz new]		raise: InvalidCreditCardException</body></methods><methods><class-id>RPS.RentalItemTypeTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testBondForItems	self assert: (item bondForItems: 4) = (Money cents: 48)</body><body package="Fit-Book-RPS-Tests">testCalculateRefundOnReturn	self		assert: (item calculateRefundOnReturnOf: 2				atTime: (MyDate fromMilliseconds: 1)) = Money zero</body><body package="Fit-Book-RPS-Tests">testCanRentWithSatisfiedRestriction	item addItemRestriction: (ItemRestriction id: 0 constraint: 'TEST').	self assert: (item canRentWithSatisfiedRestrictions: #(0)).	item addItemRestriction: (ItemRestriction id: 1 constraint: 'TEST2').	self deny: (item canRentWithSatisfiedRestrictions: #(0)).	self assert: (item canRentWithSatisfiedRestrictions: #(0 1))</body><body package="Fit-Book-RPS-Tests">testCheckNumberOfItemsInRepair	self		deny: (item checkNumberOfItemsInRepair: 2);		assert: (item checkNumberOfItemsInRepair: 0).	item removeForRepair: 2.	self assert: (item checkNumberOfItemsInRepair: 2)</body><body package="Fit-Book-RPS-Tests">testCount	self assert: item count = 3</body><body package="Fit-Book-RPS-Tests">testDeposit	self assert: item deposit = (Money cents: 12)</body><body package="Fit-Book-RPS-Tests">testEquals	| same differentName differentCount differentRates differentDeposit |	same := RentalItemType				named: 'test'				initialCount: 3				rates: (Rates						hourly: (Money cents: 2)						daily: (Money cents: 4)						weekly: (Money cents: 8))				deposit: (Money cents: 12).	differentName := RentalItemType				named: 'testing'				initialCount: 3				rates: (Rates						hourly: (Money cents: 2)						daily: (Money cents: 4)						weekly: (Money cents: 8))				deposit: (Money cents: 12).	differentCount := RentalItemType				named: 'test'				initialCount: 2				rates: (Rates						hourly: (Money cents: 2)						daily: (Money cents: 4)						weekly: (Money cents: 8))				deposit: (Money cents: 12).	differentRates := RentalItemType				named: 'test'				initialCount: 3				rates: (Rates						hourly: (Money cents: 1)						daily: (Money cents: 3)						weekly: (Money cents: 5))				deposit: (Money cents: 12).	differentDeposit := RentalItemType				named: 'test'				initialCount: 3				rates: (Rates						hourly: (Money cents: 2)						daily: (Money cents: 4)						weekly: (Money cents: 8))				deposit: (Money cents: 10).	self		assert: item = same;		deny: item = differentName;		deny: item = differentCount;		deny: item = differentRates;		deny: item = differentDeposit</body><body package="Fit-Book-RPS-Tests">testFreeCount	self assert: item freeCount = 3</body><body package="Fit-Book-RPS-Tests">testHasHiresToReturn	self		deny: (item hasHiresToReturn: 2);		deny: (item hasHiresToReturn: 1);		assert: (item hasHiresToReturn: 0)</body><body package="Fit-Book-RPS-Tests">testHasIdentifiedItem	self		assert: (item hasIdentifiedItem: 'Test');		assert: (item hasIdentifiedItem: 'test1');		assert: (item hasIdentifiedItem: 'test0');		deny: (item hasIdentifiedItem: 'tes2t')</body><body package="Fit-Book-RPS-Tests">testHiresToReturn	self assert: (item hiresToReturn: 2) isEmpty</body><body package="Fit-Book-RPS-Tests">testIdentifiedItemIsInMaintenance	| groups |	self deny: (item identifiedItemIsInMaintenance: 'Test').	item removeForRepair: 1.	groups := item identifiedHireItems groupedBy: #isBeingRepaired.	self assert: ((groups at: true)				allSatisfy: [:each | item identifiedItemIsInMaintenance: each identifier]).	self assert: ((groups at: false)				allSatisfy: [:each | (item identifiedItemIsInMaintenance: each identifier) not]).	item removeForRepair: 3.	self assert: (item identifiedHireItems				allSatisfy: [:each | item identifiedItemIsInMaintenance: each identifier])</body><body package="Fit-Book-RPS-Tests">testName	self assert: item name = 'test'</body><body package="Fit-Book-RPS-Tests">testRates	self		assert: item rates = (Rates						hourly: (Money cents: 2)						daily: (Money cents: 4)						weekly: (Money cents: 8))</body><body package="Fit-Book-RPS-Tests">testRemoveForRepair	item removeForRepair: 2.	self assert: (item identifiedHireItems select: #isBeingRepaired) size = 2</body><body package="Fit-Book-RPS-Tests">testReturnFromRepair	| underRepair |	self assert: (item identifiedHireItems				allSatisfy: [:each | each isBeingRepaired not]).	item returnItemNamed: 'test1' fromRepairOn: (MyDate fromMilliseconds: 1).	self assert: (item identifiedHireItems				allSatisfy: [:each | each isBeingRepaired not]).	item removeForRepair: 1.	underRepair := item identifiedHireItems select: #isBeingRepaired.	self assert: underRepair size = 1.	item returnItemNamed: underRepair first identifier		fromRepairOn: (MyDate fromMilliseconds: 1).	self assert: (item identifiedHireItems				allSatisfy: [:each | each isBeingRepaired not])</body><body package="Fit-Book-RPS-Tests">testTotalRentalCostForDurationAndQuantity	self		assert: (item				totalRentalCostForDuration: (DurationRPS hours: 2 days: 1 weeks: 0)				quantity: 2) = (Money cents: 40).	self		assert: (item				totalRentalCostForDuration: (DurationRPS hours: 2 days: 1 weeks: 0)				quantity: 1) = (Money cents: 20).	self		assert: (item				totalRentalCostForDuration: (DurationRPS hours: 2 days: 1 weeks: 0)				quantity: 0) = Money zero</body></methods><methods><class-id>RPS.RentalItemTypeTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	super setUp.	item := RentalItemType				named: 'test'				initialCount: 2				rates: (Rates						hourly: (Money cents: 2)						daily: (Money cents: 4)						weekly: (Money cents: 8))				deposit: (Money cents: 12).	item		addRentalItem: 'Test'		lastMaintained: (MyDate timestamp: Timestamp zero)		monthsBetweenMaintenance: 1</body></methods><methods><class-id>RPS.DinersClubTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testExpiryDate	self assert: card expiryDate				= (MyDate timestamp: (CreditCard parseExpiryDate: '05/06')).	self should: 			[CreditCard				type: 'DinersClub'				expiryString: '05/05'				number: '30181250802842'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testILength	self should: 			[CreditCard				type: 'DinersClub'				expiryString: '05/06'				number: '30181250802842595959'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testIncorrectPrefix	self should: 			[CreditCard				type: 'DinersClub'				expiryString: '05/06'				number: '31171250802842'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testIsRightNumber	self assert: card creditCardNumber = '30181250802842'</body></methods><methods><class-id>RPS.DinersClubTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	| mockClock |	rentEz := RentEz new.	mockClock := MockClock new time: (MyDate fitParse: '2006/05/15').	rentEz clock: mockClock.	card := CreditCard				type: 'DinersClub'				expiryString: '05/06'				number: '30181250802842'				rentEz: rentEz</body></methods><methods><class-id>RPS.StaffMemberTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testAddRental	self assert: staff rentals isEmpty.	staff addRental: (Rental				quantity: 2				of: itemType				for: (DurationRPS days: 1)				startingOn: (MyDate fromMilliseconds: 2)				client: person				staffMember: staff).	self assert: staff rentals size = 2</body><body package="Fit-Book-RPS-Tests">testCommissionEarnings	self assert: staff commissionEarnings isZero</body><body package="Fit-Book-RPS-Tests">testCreator	self assert: staff creator isNil</body><body package="Fit-Book-RPS-Tests">testDiscountRate	self assert: staff discountRate = 0.14</body><body package="Fit-Book-RPS-Tests">testEquals	self assert: staff = staff copy</body><body package="Fit-Book-RPS-Tests">testName	self assert: staff name = 'Admin'</body><body package="Fit-Book-RPS-Tests">testPhone	self assert: staff phone = '1223-4565'</body><body package="Fit-Book-RPS-Tests">testStartTransaction	| transaction |	transaction := Transaction				rentEz: nil				startDate: (MyDate fromMilliseconds: 1)				staffMember: staff.	self assert: staff currentTransaction == transaction</body><body package="Fit-Book-RPS-Tests">testTransactionComplete	self deny: staff transactionComplete</body></methods><methods><class-id>RPS.StaffMemberTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	super setUp.	staff := StaffMember				named: 'Admin'				phoneNumber: '1223-4565'				commissionRate: 0.12				discountRate: 0.14				creator: nil.	person := Client named: 'Customer' phoneNumber: '123' creator: staff.	rates := Rates				hourly: (Money cents: 5)				daily: (Money cents: 23)				weekly: (Money cents: 36).	itemType := RentalItemType				named: 'Truck'				initialCount: 3				rates: rates				deposit: Money zero</body></methods><methods><class-id>RPS.BookingTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testAccept	| rental |	self		assert: reservation count = 2;		assert: person rentals isEmpty.	booking acceptOn: (MyDate fromMilliseconds: 3).	self		deny: (person bookings includes: booking);		deny: (staff bookings includes: booking);		assert: reservation count isZero;		assert: person rentals size = 1.	rental := person rentals first.	self assert: rental reservation startDate = (MyDate fromMilliseconds: 2)</body><body package="Fit-Book-RPS-Tests">testAccept2	| rental |	self		assert: reservation count = 2;		assert: person rentals isEmpty.	booking acceptOn: (MyDate fromMilliseconds: 1).	self		deny: (person bookings includes: booking);		deny: (staff bookings includes: booking);		assert: reservation count isZero;		assert: person rentals size = 1.	rental := person rentals first.	self assert: rental reservation startDate = (MyDate fromMilliseconds: 1)</body><body package="Fit-Book-RPS-Tests">testCancel	self		assert: person bookings first == booking;		assert: staff bookings first == booking;		assert: reservation count = 2.	booking cancel.	self		deny: (person bookings includes: booking);		deny: (staff bookings includes: booking);		assert: reservation count isZero</body><body package="Fit-Book-RPS-Tests">testClient	self assert: booking client == person</body><body package="Fit-Book-RPS-Tests">testExtendInto	booking extendInto: (Reservation				quantity: 2				of: cup				for: (DurationRPS days: 2)				startingOn: date).	self assert: booking reservation period = (DurationRPS days: 3)</body><body package="Fit-Book-RPS-Tests">testReserveForExtendedPeriod	self		assert: (booking reserveForExtendedPeriod: (DurationRPS days: 2)) period					= (DurationRPS days: 1);		assert: (booking reserveForExtendedPeriod: (DurationRPS days: 1)) period					= (DurationRPS days: 0)</body></methods><methods><class-id>RPS.BookingTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	| m1 m2 m3 duration |	super setUp.	m1 := Money cents: 5.	m2 := Money cents: 45.	m3 := Money dollars: 2.	cup := RentalItemType				named: 'cup'				initialCount: 10				rates: (Rates hourly: m1 daily: m2 weekly: m3)				deposit: Money zero.	date := MyDate fromMilliseconds: 2.	duration := DurationRPS days: 1.	staff := StaffMember named: 'Admin' phoneNumber: '' creator: nil.	person := Client named: 'Customer' phoneNumber: '123' creator: staff.	reservation := Reservation				quantity: 2				of: cup				for: duration				startingOn: date.	booking := Booking				reservation: reservation				client: person				staffMember: staff</body></methods><methods><class-id>RPS.ItemRestrictionTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testId	self		assert: restriction id = 1;		assert: restriction2 id = 12</body></methods><methods><class-id>RPS.ItemRestrictionTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	super setUp.	restriction := ItemRestriction id: 1 constraint: 'test'.	restriction2 := ItemRestriction id: 12 constraint: 'test'</body></methods><methods><class-id>RPS.VoucherTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	voucher2 := Voucher amount: (Money dollars: 20).	voucher3 := Voucher amount: (Money dollars: 20)				expiryDate: (MyDate fromMilliseconds: 1)</body></methods><methods><class-id>RPS.VoucherTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testIsExpiredOn	| earlyDate sameDate lateDate |	earlyDate := MyDate fromMilliseconds: 0.	sameDate := MyDate fromMilliseconds: 1.	lateDate := MyDate fromMilliseconds: 2.	self		deny: (voucher2 isExpiredOn: earlyDate);		deny: (voucher2 isExpiredOn: sameDate);		deny: (voucher2 isExpiredOn: lateDate).	self		deny: (voucher3 isExpiredOn: earlyDate);		deny: (voucher3 isExpiredOn: sameDate);		assert: (voucher3 isExpiredOn: lateDate)</body></methods><methods><class-id>RPS.AddBookingTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testAddBooking	| bookings b |	bookings := client bookings.	self assert: bookings size = 2.	b := bookings first.	self		assert: b count = 6;		assert: b hireItemType name = 'cup'.	b := bookings last.	self		assert: b count = 3;		assert: b hireItemType name = 'balloon'</body></methods><methods><class-id>RPS.AddBookingTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	| m1 m2 m3 duration cup balloon staff date |	super setUp.	m1 := Money cents: 5.	m2 := Money cents: 45.	m3 := Money dollars: 2.	cup := RentalItemType				named: 'cup'				initialCount: 10				rates: (Rates hourly: m1 daily: m2 weekly: m3)				deposit: Money zero.	balloon := RentalItemType				named: 'balloon'				initialCount: 5				rates: (Rates hourly: m1 daily: m2 weekly: m3)				deposit: Money zero.	staff := StaffMember named: 'Bob' phoneNumber: '23423423' creator: nil.	client := Client named: 'john' phoneNumber: '0223432342' creator: staff.	date := MyDate fromMilliseconds: 1.	duration := DurationRPS days: 1.	client addBooking: (Booking				reservation: (Reservation						quantity: 2						of: cup						for: duration						startingOn: date)				client: client				staffMember: staff).	client addBooking: (Booking				reservation: (Reservation						quantity: 2						of: balloon						for: duration						startingOn: date)				client: client				staffMember: staff).	client addBooking: (Booking				reservation: (Reservation						quantity: 1						of: balloon						for: duration						startingOn: date)				client: client				staffMember: staff).	client addBooking: (Booking				reservation: (Reservation						quantity: 4						of: cup						for: duration						startingOn: date)				client: client				staffMember: staff)</body></methods><methods><class-id>RPS.DiscoverTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testExpiryDate	self assert: card expiryDate				= (MyDate timestamp: (CreditCard parseExpiryDate: '05/06')).	self should: 			[CreditCard				type: 'Discover'				expiryString: '05/05'				number: '6011404643081688'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testILength	self should: 			[CreditCard				type: 'Discover'				expiryString: '05/06'				number: '6011404643081688595959'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testIncorrectPrefix	self should: 			[CreditCard				type: 'Discover'				expiryString: '05/06'				number: '6045404643081688'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testIsRightNumber	self assert: card creditCardNumber = '6011404643081688'</body></methods><methods><class-id>RPS.DiscoverTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	| mockClock |	rentEz := RentEz new.	mockClock := MockClock new time: (MyDate fitParse: '2006/05/15').	rentEz clock: mockClock.	card := CreditCard				type: 'Discover'				expiryString: '05/06'				number: '6011404643081688'				rentEz: rentEz</body></methods><methods><class-id>RPS.RentEzTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	super setUp.	rent := RentEz new</body></methods><methods><class-id>RPS.RentEzTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testCreateBuyItemType	| rs |	rent		createBuyItemType: 'Item'		count: 1234		sellingPrice: (Money dollars: 10).	rent		createBuyItemType: 'Item2'		count: 1235		sellingPrice: (Money dollars: 11).	self should: 			[rent				createBuyItemType: 'Item'				count: 1234				sellingPrice: (Money dollars: 10)]		raise: DuplicateException.	rs := rent buyItems readStream.	self		assert: rs next = (BuyItemType							named: 'Item'							count: 1234							sellingPrice: (Money dollars: 10));		assert: rs next = (BuyItemType							named: 'Item2'							count: 1235							sellingPrice: (Money dollars: 11))</body><body package="Fit-Book-RPS-Tests">testCreateClient	| jon testClient |	jon := StaffMember named: 'Jon' phoneNumber: '6648161' creator: nil.	rent createClient: 'Test Client' phone: '4446846' creator: jon.	self		should: [rent createClient: 'Test Client' phone: '4446846' creator: jon]		raise: DuplicateException.	testClient := rent clientNamed: 'Test Client'.	self assert: testClient				= (Client named: 'Test Client' phoneNumber: '4446846' creator: jon)</body><body package="Fit-Book-RPS-Tests">testCreateRentalItemType	| bike |	rent		createRentalItemType: 'Bike'		initialCount: 1		rates: (Rates				hourly: (Money dollars: 1)				daily: (Money dollars: 24)				weekly: (Money dollars: 168))		deposit: (Money dollars: 10).	bike := rent rentalItemTypeNamed: 'Bike'.	self		assert: bike = (RentalItemType						named: 'Bike'						initialCount: 1						rates: (Rates								hourly: (Money dollars: 1)								daily: (Money dollars: 24)								weekly: (Money dollars: 168))						deposit: (Money dollars: 10))</body><body package="Fit-Book-RPS-Tests">testCreateStaffMemberPhoneCommissionCreator	| alex |	rent		createStaffMember: 'Alex'		phone: '1548916'		commissionRate: 5.62		creator: nil.	alex := rent staffMemberNamed: 'Alex'.	self		assert: alex = (StaffMember						named: 'Alex'						phoneNumber: '1548916'						commissionRate: 5.62						creator: nil)</body><body package="Fit-Book-RPS-Tests">testCreateStaffMemberPhoneCommissionDiscountCreator	| jon |	rent		createStaffMember: 'Jon'		phone: '6648161'		commissionRate: 5.44		discountRate: 165.2		creator: nil.	jon := rent staffMemberNamed: 'Jon'.	self		assert: jon = (StaffMember						named: 'Jon'						phoneNumber: '6648161'						commissionRate: 5.44						discountRate: 165.2						creator: nil)</body><body package="Fit-Book-RPS-Tests">testCreateStaffMemberPhoneCreator	| jon |	self assert: rent staffMembers size = 1		description: 'There should only be the admin staff member created'.	rent createStaffMember: 'Alex' phone: '1548916' creator: nil.	self assert: rent staffMembers size = 2.	rent		createStaffMember: 'Jon'		phone: '5564861'		creator: (rent staffMemberNamed: 'Alex').	self		should: [rent createStaffMember: 'Alex' phone: '1548916' creator: nil]		raise: DuplicateException.	jon := rent staffMemberNamed: 'Jon'.	self assert: jon creator == (rent staffMemberNamed: 'Alex').	self assert: jon phone = '5564861'.	self assert: jon name = 'Jon'</body><body package="Fit-Book-RPS-Tests">testRentalItemTypes	| rentals |	rent		createRentalItemType: 'Bike'		initialCount: 1		rates: (Rates				hourly: (Money dollars: 1)				daily: (Money dollars: 24)				weekly: (Money dollars: 168))		deposit: (Money dollars: 10).	rent		createRentalItemType: 'Bicycle'		initialCount: 1		rates: (Rates				hourly: (Money dollars: 1)				daily: (Money dollars: 24)				weekly: (Money dollars: 168))		deposit: (Money dollars: 10).	rentals := rent rentalItemTypes values.	self		assert: (rentals includes: (RentalItemType						named: 'Bike'						initialCount: 1						rates: (Rates								hourly: (Money dollars: 1)								daily: (Money dollars: 24)								weekly: (Money dollars: 168))						deposit: (Money dollars: 10))).	self		assert: (rentals includes: (RentalItemType						named: 'Bicycle'						initialCount: 1						rates: (Rates								hourly: (Money dollars: 1)								daily: (Money dollars: 24)								weekly: (Money dollars: 168))						deposit: (Money dollars: 10)))</body><body package="Fit-Book-RPS-Tests">testStaffMember	self should: [rent staffMemberNamed: 'No Staff'] raise: MissingException</body><body package="Fit-Book-RPS-Tests">testTime	| clock |	clock := SystemClock new.	self		assert: (rent time timestamp asMilliseconds				- clock now timestamp asMilliseconds) abs				&lt; 5</body></methods><methods><class-id>RPS.MastercardTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testExpiryDate	self assert: card expiryDate				= (MyDate timestamp: (CreditCard parseExpiryDate: '05/06')).	self should: 			[CreditCard				type: 'Mastercard'				expiryString: '05/05'				number: '5551559755184006'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testILength	self should: 			[CreditCard				type: 'Mastercard'				expiryString: '05/06'				number: '5551559755184006595959'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testIncorrectPrefix	self should: 			[CreditCard				type: 'Mastercard'				expiryString: '05/06'				number: '5981559755184006'				rentEz: rentEz]		raise: InvalidCreditCardException</body><body package="Fit-Book-RPS-Tests">testIsRightNumber	self assert: card creditCardNumber = '5551559755184006'</body></methods><methods><class-id>RPS.MastercardTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	| mockClock |	rentEz := RentEz new.	mockClock := MockClock new time: (MyDate fitParse: '2006/05/15').	rentEz clock: mockClock.	card := CreditCard				type: 'Mastercard'				expiryString: '05/06'				number: '5551559755184006'				rentEz: rentEz</body></methods><methods><class-id>RPS.ClientTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testBooking	| reservation booking |	self assert: person bookings isEmpty.	reservation := Reservation				quantity: 1				of: itemType				for: (DurationRPS hours: 1)				startingOn: (MyDate fitParse: '2023/08/18 11:04').	booking := Booking				reservation: reservation				client: person				staffMember: staff.	self assert: person bookings size = 1.	person addBooking: booking.	self assert: person bookings size = 1.	person removeBooking: booking.	self assert: person bookings isEmpty</body><body package="Fit-Book-RPS-Tests">testInfo	self		assert: person name = 'Customer';		assert: person phone = '123';		assert: person creator = staff</body><body package="Fit-Book-RPS-Tests">testPayOnAccount	person payOnAccount: (Money dollars: 5).	self assert: person amountOwing = (Money dollars: 5)</body><body package="Fit-Book-RPS-Tests">testRental	| rental |	self assert: person rentals isEmpty.	rental := Rental				quantity: 3				of: itemType				for: (DurationRPS hours: 3 days: 3 weeks: 3)				startingOn: MyDate new				client: person				staffMember: staff.	self assert: person rentals size = 1.	person addRental: rental.	self assert: person rentals size = 2.	person removeRental: rental.	self assert: person rentals size = 1</body><body package="Fit-Book-RPS-Tests">testReturnRental	Rental		quantity: 3		of: itemType		for: (DurationRPS hours: 3 days: 3 weeks: 3)		startingOn: MyDate new		client: person		staffMember: staff.	person return: 2 hiresOf: itemType.	self assert: person rentals first count = 1.	person return: 2 hiresOf: itemType.	self assert: person rentals isEmpty</body><body package="Fit-Book-RPS-Tests">testTransaction	| transaction |	transaction := Transaction				rentEz: RentEz new				startDate: (MyDate fitParse: '2023/08/18 11:04')				staffMember: staff.	self		deny: person transactionComplete;		assert: (person startTransaction: transaction);		deny: (person startTransaction: transaction);		assert: person transactionComplete;		deny: person transactionComplete</body></methods><methods><class-id>RPS.ClientTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	super setUp.	staff := StaffMember named: 'Admin' phoneNumber: '' creator: nil.	person := Client named: 'Customer' phoneNumber: '123' creator: staff.	rates := Rates				hourly: (Money cents: 5)				daily: (Money cents: 23)				weekly: (Money cents: 36).	itemType := RentalItemType				named: 'Truck'				initialCount: 3				rates: rates				deposit: Money zero</body></methods><methods><class-id>RPS.BuyItemTypeTest</class-id> <category>tests</category><body package="Fit-Book-RPS-Tests">testCount	self assert: itemType count = 23</body><body package="Fit-Book-RPS-Tests">testEquals	| same differentName differentCount differentPrice |	same := BuyItemType				named: 'Test'				count: 23				sellingPrice: (Money dollars: 12).	differentName := BuyItemType				named: 'Testing'				count: 23				sellingPrice: (Money dollars: 12).	differentCount := BuyItemType				named: 'Test'				count: 245				sellingPrice: (Money dollars: 12).	differentPrice := BuyItemType				named: 'Test'				count: 23				sellingPrice: (Money dollars: 10).	self		assert: itemType = same;		deny: itemType = differentName;		deny: itemType = differentCount;		deny: itemType = differentPrice</body><body package="Fit-Book-RPS-Tests">testName	self assert: itemType name = 'Test'</body><body package="Fit-Book-RPS-Tests">testSale	self		deny: (itemType sale: 24);		assert: (itemType sale: 2)</body><body package="Fit-Book-RPS-Tests">testSellingPrice	self assert: itemType sellingPrice = (Money dollars: 12)</body><body package="Fit-Book-RPS-Tests">testSellingPriceForQuantity	self assert: (itemType sellingPriceForQuantity: 2) = (Money dollars: 24)</body></methods><methods><class-id>RPS.BuyItemTypeTest</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Tests">setUp	super setUp.	itemType := BuyItemType				named: 'Test'				count: 23				sellingPrice: (Money dollars: 12)</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>