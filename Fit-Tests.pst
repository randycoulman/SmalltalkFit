<?xml version="1.0"?><st-source><!-- Name: Fit-TestsNotice:                     GNU GENERAL PUBLIC LICENSE                       Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.                            Preamble  The licenses for most software are designed to take away yourfreedom to share and change it.  By contrast, the GNU General PublicLicense is intended to guarantee your freedom to share and change freesoftware- to make sure the software is free for all its users.  ThisGeneral Public License applies to most of the Free SoftwareFoundation's software and to any other program whose authors commit tousing it.  (Some other Free Software Foundation software is covered bythe GNU Lesser General Public License instead.)  You can apply it toyour programs, too.  When we speak of free software, we are referring to freedom, notprice.  Our General Public Licenses are designed to make sure that youhave the freedom to distribute copies of free software (and charge forthis service if you wish), that you receive source code or can get itif you want it, that you can change the software or use pieces of itin new free programs; and that you know you can do these things.  To protect your rights, we need to make restrictions that forbidanyone to deny you these rights or to ask you to surrender the rights.These restrictions translate to certain responsibilities for you if youdistribute copies of the software, or if you modify it.  For example, if you distribute copies of such a program, whethergratis or for a fee, you must give the recipients all the rights thatyou have.  You must make sure that they, too, receive or can get thesource code.  And you must show them these terms so they know theirrights.  We protect your rights with two steps: (1) copyright the software, and(2) offer you this license which gives you legal permission to copy,distribute and/or modify the software.  Also, for each author's protection and ours, we want to make certainthat everyone understands that there is no warranty for this freesoftware.  If the software is modified by someone else and passed on, wewant its recipients to know that what they have is not the original, sothat any problems introduced by others will not reflect on the originalauthors' reputations.  Finally, any free program is threatened constantly by softwarepatents.  We wish to avoid the danger that redistributors of a freeprogram will individually obtain patent licenses, in effect making theprogram proprietary.  To prevent this, we have made it clear that anypatent must be licensed for everyone's free use or not licensed at all.  The precise terms and conditions for copying, distribution andmodification follow.                    GNU GENERAL PUBLIC LICENSE   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION  0. This License applies to any program or other work which containsa notice placed by the copyright holder saying it may be distributedunder the terms of this General Public License.  The "Program", below,refers to any such program or work, and a "work based on the Program"means either the Program or any derivative work under copyright law:that is to say, a work containing the Program or a portion of it,either verbatim or with modifications and/or translated into anotherlanguage.  (Hereinafter, translation is included without limitation inthe term "modification".)  Each licensee is addressed as "you".Activities other than copying, distribution and modification are notcovered by this License; they are outside its scope.  The act ofrunning the Program is not restricted, and the output from the Programis covered only if its contents constitute a work based on theProgram (independent of having been made by running the Program).Whether that is true depends on what the Program does.  1. You may copy and distribute verbatim copies of the Program'ssource code as you receive it, in any medium, provided that youconspicuously and appropriately publish on each copy an appropriatecopyright notice and disclaimer of warranty; keep intact all thenotices that refer to this License and to the absence of any warranty;and give any other recipients of the Program a copy of this Licensealong with the Program.You may charge a fee for the physical act of transferring a copy, andyou may at your option offer warranty protection in exchange for a fee.  2. You may modify your copy or copies of the Program or any portionof it, thus forming a work based on the Program, and copy anddistribute such modifications or work under the terms of Section 1above, provided that you also meet all of these conditions:    a) You must cause the modified files to carry prominent notices    stating that you changed the files and the date of any change.    b) You must cause any work that you distribute or publish, that in    whole or in part contains or is derived from the Program or any    part thereof, to be licensed as a whole at no charge to all third    parties under the terms of this License.    c) If the modified program normally reads commands interactively    when run, you must cause it, when started running for such    interactive use in the most ordinary way, to print or display an    announcement including an appropriate copyright notice and a    notice that there is no warranty (or else, saying that you provide    a warranty) and that users may redistribute the program under    these conditions, and telling the user how to view a copy of this    License.  (Exception: if the Program itself is interactive but    does not normally print such an announcement, your work based on    the Program is not required to print an announcement.)These requirements apply to the modified work as a whole.  Ifidentifiable sections of that work are not derived from the Program,and can be reasonably considered independent and separate works inthemselves, then this License, and its terms, do not apply to thosesections when you distribute them as separate works.  But when youdistribute the same sections as part of a whole which is a work basedon the Program, the distribution of the whole must be on the terms ofthis License, whose permissions for other licensees extend to theentire whole, and thus to each and every part regardless of who wrote it.Thus, it is not the intent of this section to claim rights or contestyour rights to work written entirely by you; rather, the intent is toexercise the right to control the distribution of derivative orcollective works based on the Program.In addition, mere aggregation of another work not based on the Programwith the Program (or with a work based on the Program) on a volume ofa storage or distribution medium does not bring the other work underthe scope of this License.  3. You may copy and distribute the Program (or a work based on it,under Section 2) in object code or executable form under the terms ofSections 1 and 2 above provided that you also do one of the following:    a) Accompany it with the complete corresponding machine-readable    source code, which must be distributed under the terms of Sections    1 and 2 above on a medium customarily used for software interchange; or,    b) Accompany it with a written offer, valid for at least three    years, to give any third party, for a charge no more than your    cost of physically performing source distribution, a complete    machine-readable copy of the corresponding source code, to be    distributed under the terms of Sections 1 and 2 above on a medium    customarily used for software interchange; or,    c) Accompany it with the information you received as to the offer    to distribute corresponding source code.  (This alternative is    allowed only for noncommercial distribution and only if you    received the program in object code or executable form with such    an offer, in accord with Subsection b above.)The source code for a work means the preferred form of the work formaking modifications to it.  For an executable work, complete sourcecode means all the source code for all modules it contains, plus anyassociated interface definition files, plus the scripts used tocontrol compilation and installation of the executable.  However, as aspecial exception, the source code distributed need not includeanything that is normally distributed (in either source or binaryform) with the major components (compiler, kernel, and so on) of theoperating system on which the executable runs, unless that componentitself accompanies the executable.If distribution of executable or object code is made by offeringaccess to copy from a designated place, then offering equivalentaccess to copy the source code from the same place counts asdistribution of the source code, even though third parties are notcompelled to copy the source along with the object code.  4. You may not copy, modify, sublicense, or distribute the Programexcept as expressly provided under this License.  Any attemptotherwise to copy, modify, sublicense or distribute the Program isvoid, and will automatically terminate your rights under this License.However, parties who have received copies, or rights, from you underthis License will not have their licenses terminated so long as suchparties remain in full compliance.  5. You are not required to accept this License, since you have notsigned it.  However, nothing else grants you permission to modify ordistribute the Program or its derivative works.  These actions areprohibited by law if you do not accept this License.  Therefore, bymodifying or distributing the Program (or any work based on theProgram), you indicate your acceptance of this License to do so, andall its terms and conditions for copying, distributing or modifyingthe Program or works based on it.  6. Each time you redistribute the Program (or any work based on theProgram), the recipient automatically receives a license from theoriginal licensor to copy, distribute or modify the Program subject tothese terms and conditions.  You may not impose any furtherrestrictions on the recipients' exercise of the rights granted herein.You are not responsible for enforcing compliance by third parties tothis License.  7. If, as a consequence of a court judgment or allegation of patentinfringement or for any other reason (not limited to patent issues),conditions are imposed on you (whether by court order, agreement orotherwise) that contradict the conditions of this License, they do notexcuse you from the conditions of this License.  If you cannotdistribute so as to satisfy simultaneously your obligations under thisLicense and any other pertinent obligations, then as a consequence youmay not distribute the Program at all.  For example, if a patentlicense would not permit royalty-free redistribution of the Program byall those who receive copies directly or indirectly through you, thenthe only way you could satisfy both it and this License would be torefrain entirely from distribution of the Program.If any portion of this section is held invalid or unenforceable underany particular circumstance, the balance of the section is intended toapply and the section as a whole is intended to apply in othercircumstances.It is not the purpose of this section to induce you to infringe anypatents or other property right claims or to contest validity of anysuch claims; this section has the sole purpose of protecting theintegrity of the free software distribution system, which isimplemented by public license practices.  Many people have madegenerous contributions to the wide range of software distributedthrough that system in reliance on consistent application of thatsystem; it is up to the author/donor to decide if he or she is willingto distribute software through any other system and a licensee cannotimpose that choice.This section is intended to make thoroughly clear what is believed tobe a consequence of the rest of this License.  8. If the distribution and/or use of the Program is restricted incertain countries either by patents or by copyrighted interfaces, theoriginal copyright holder who places the Program under this Licensemay add an explicit geographical distribution limitation excludingthose countries, so that distribution is permitted only in or amongcountries not thus excluded.  In such case, this License incorporatesthe limitation as if written in the body of this License.  9. The Free Software Foundation may publish revised and/or new versionsof the General Public License from time to time.  Such new versions willbe similar in spirit to the present version, but may differ in detail toaddress new problems or concerns.Each version is given a distinguishing version number.  If the Programspecifies a version number of this License which applies to it and "anylater version", you have the option of following the terms and conditionseither of that version or of any later version published by the FreeSoftware Foundation.  If the Program does not specify a version number ofthis License, you may choose any version ever published by the Free SoftwareFoundation.  10. If you wish to incorporate parts of the Program into other freeprograms whose distribution conditions are different, write to the authorto ask for permission.  For software which is copyrighted by the FreeSoftware Foundation, write to the Free Software Foundation; we sometimesmake exceptions for this.  Our decision will be guided by the two goalsof preserving the free status of all derivatives of our free software andof promoting the sharing and reuse of software generally.                            NO WARRANTY  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTYFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHENOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIESPROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSEDOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OFMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK ASTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THEPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,REPAIR OR CORRECTION.  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITINGWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/ORREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISINGOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITEDTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BYYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHERPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THEPOSSIBILITY OF SUCH DAMAGES.                     END OF TERMS AND CONDITIONS            How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatestpossible use to the public, the best way to achieve this is to make itfree software which everyone can redistribute and change under these terms.  To do so, attach the following notices to the program.  It is safestto attach them to the start of each source file to most effectivelyconvey the exclusion of warranty; and each file should have at leastthe "copyright" line and a pointer to where the full notice is found.    <one line to give the program's name and a brief idea of what it does.>    Copyright (C) <year>  <name of author>    This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License along    with this program; if not, write to the Free Software Foundation, Inc.,    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.Also add information on how to contact you by electronic and paper mail.If the program is interactive, make it output a short notice like thiswhen it starts in an interactive mode:    Gnomovision version 69, Copyright (C) year name of author    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.    This is free software, and you are welcome to redistribute it    under certain conditions; type `show c' for details.The hypothetical commands `show w' and `show c' should show the appropriateparts of the General Public License.  Of course, the commands you use maybe called something other than `show w' and `show c'; they could even bemouse-clicks or menu items- whatever suits your program.You should also get your employer (if you work as a programmer) or yourschool, if any, to sign a "copyright disclaimer" for the program, ifnecessary.  Here is a sample; alter the names:  Yoyodyne, Inc., hereby disclaims all copyright interest in the program  `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989  Ty Coon, President of ViceThis General Public License does not permit incorporating your program intoproprietary programs.  If your program is a subroutine library, you mayconsider it more useful to permit linking proprietary applications with thelibrary.  If this is what you want to do, use the GNU Lesser GeneralPublic License instead of this License.Comment: This package contains the unit tests for the Fit package.# Smalltalk FitSmalltalk Fit is a Smalltalk implementation of Ward Cunningham's [Framework for Integrated Tests](http://fit.c2.com), [Fitnesse](http://www.fitnesse.org), and Rick Mugridge's [FitLibrary](http://fitlibrary.sourceforge.net).This version contains the equivalent features of:* fit-java-1.1* fitnesse-20121220* FitLibrary-2.0   Copyright (C) 2004-2013 Randy Coulman    This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License along    with this program; if not, write to the Free Software Foundation, Inc.,    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.See the copyright tab in the RB, the 'notice' property of this package, or the License.txt file on GitHub.DbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1552DbUsername: randyDbVersion: 44DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'Fit' '') #(#any 'SUnitToo' '') #(#any 'Regex11' ''))PackageName: Fit-TestsParcel: #('Fit-Tests')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'Fit') #(#name 'SUnitToo') #(#name 'Regex11' #componentType #package))PrerequisiteParcels: #(#('Base VisualWorks' '') #('Fit' '') #('SUnitToo' '') #('Regex11' ''))PrintStringCache: (44,randy)Version: 44Date: 7:21:05 AM May 24, 2013 --><time-stamp>From VisualWorks® Personal Use Edition, 7.9.1 of October 18, 2012 on May 24, 2013 at 7:21:05 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Testutil</name><environment>Fitnesse</environment><private>false</private><imports>			private Smalltalk.*			private Fit.*			</imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></name-space><class><name>AllExceptionsAreFriendlyFixture</name><environment>Fit</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>ClassDelegatePointParser</name><environment>Fitnesse.Testutil</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>ObjectDelegatePointParser</name><environment>Fitnesse.Testutil</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>FixtureTwo</name><environment>Fit</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>TestColumnFixture</name><environment>Fit</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>field stringField </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>CartesianVector</name><environment>Fitnesse.Testutil</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>TheThirdFixture</name><environment>Fit</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>DeltaTest</name><environment>Fit.Decorator.Util</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>PassFixture</name><environment>Fitnesse.Testutil</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>DummyFixtureDecorator</name><environment>Fit</environment><super>Fit.Decorator.FixtureDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>TranslatePoint</name><environment>Fitnesse.Testutil</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>p1 p2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>ClassTranslatePoint</name><environment>Fitnesse.Testutil</environment><super>Fitnesse.Testutil.TranslatePoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>SessionTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>FileRunnerTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Tests</package></attributes></class><class><name>FixtureDecoratorTestCase</name><environment>Fit.Decorator</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decorator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>IncrementColumnsValueTest</name><environment>Fit.Decorator</environment><super>Fit.Decorator.FixtureDecoratorTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>GracefulNamerTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>PrimeNumberRowFixture</name><environment>Fitnesse.Fixtures</environment><super>Fit.RowFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>ActionFixtureTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Tests</category><attributes><package>Fit-Tests</package></attributes></class><class><name>SimpleBusinessObject</name><environment>Fit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>field </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>FixtureOne</name><environment>Fit</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>PointReader</name><environment>Fit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>FitServerTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>httpRequest process serverSocket socket semaphore listener </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>TestRowFixture</name><environment>Fit</environment><super>Fit.RowFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Tests</package></attributes></class><class><name>FitServerProtocolTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>httpRequest process socket connectionStatusSize exitCode fitServerSemaphore serverOutput socketStream </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>DoesntImplementNewFixture</name><environment>Fitnesse.Fixtures</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>BadDelegate</name><environment>Fit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>FrameworkTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Tests</category><attributes><package>Fit-Tests</package></attributes></class><class><name>LoopTest</name><environment>Fit.Decorator</environment><super>Fit.Decorator.FixtureDecoratorTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>MockTimer</name><environment>Fit.Decorator.Performance</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>VectorSum</name><environment>Fitnesse.Testutil</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>v1 v2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>MaxTimeTest</name><environment>Fit.Decorator.Performance</environment><super>Fit.Decorator.FixtureDecoratorTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>BusinessObject</name><environment>Fit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>strs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Tests</package></attributes></class><class><name>DataTypeTest</name><environment>Fit.Decorator.Util</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>HasNoParseMethod</name><environment>Fit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>PrimeData</name><environment>Fitnesse.Fixtures</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>prime </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>TableTest</name><environment>Fit.Decorator.Util</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fitPage table </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>CopyAndAppendLastRowTest</name><environment>Fit.Decorator</environment><super>Fit.Decorator.FixtureDecoratorTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>ColumnFixtureTestFixture</name><environment>Fitnesse.Fixtures</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>input integerInput </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>FitMatcherTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>FileRunnerTestFixture</name><environment>Fit</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parse </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit</category><attributes><package>Fit-Tests</package></attributes></class><class><name>FitnesseFixtureLoaderTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fixtureLoader </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>BindingTestFixture</name><environment>Fit</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>intField integerField </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>ClassNameConversionTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>ComplexAddFixture</name><environment>Fitnesse.Fixtures</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>a b </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>ExternalFileTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Tests</category><attributes><package>Fit-Tests</package></attributes></class><class><name>BindingTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fixture cell1 cell2 cell4 cell3 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>FailFixture</name><environment>Fitnesse.Testutil</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>ColumnFixtureTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fixture </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>TestFixture</name><environment>Fit</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sampleInteger sampleFloat ch name sampleArray sampleDate sampleByte sampleShort sampleDate2 sampleDate3 point </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Tests</category><attributes><package>Fit-Tests</package></attributes></class><class><name>ObjectTranslatePoint</name><environment>Fitnesse.Testutil</environment><super>Fitnesse.Testutil.TranslatePoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>TypeAdapterTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fixture </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>ParseTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Tests</category><attributes><package>Fit-Tests</package></attributes></class><class><name>SimpleRowFixture</name><environment>Fit</environment><super>Fit.RowFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>FriendlyErrorTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>WouldBeFixture</name><environment>Fitnesse.Fixtures</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>TestClassForActionFixture</name><environment>Fit</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>library libraryPath playWasPressed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Tests</category><attributes><package>Fit-Tests</package></attributes></class><class><name>CannotLoadFixtureTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fixtureLoader </inst-vars><class-inst-vars></class-inst-vars><imports>			Fitnesse.Fixtures.*			</imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><class><name>FitServerInImageTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>TimeRangeTest</name><environment>Fit.Decorator.Performance</environment><super>Fit.Decorator.FixtureDecoratorTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>FixtureTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>NullAndBlankFixture</name><environment>Fitnesse.Fixtures</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nullString blankString </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>MethodSignatureTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>FitLibrary-Tests</category><attributes><package>Fit-Tests</package></attributes></class><class><name>DecoratorTestFixture</name><environment>Fit.Decorator</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>RowFixtureTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><class><name>PackageNameConversionTest</name><environment>Fit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Tests</package></attributes></class><comment><class-id>Fit.PackageNameConversionTest</class-id><body>The following comment was copied from the original comments of Fit.ClassNameConversionTest==========================================================</body></comment><class><name>HasParseMethod</name><environment>Fit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fitnesse</category><attributes><package>Fit-Tests</package></attributes></class><methods><class-id>Fit.AllExceptionsAreFriendlyFixture</class-id> <category>private</category><body package="Fit-Tests">isFriendlyException: anException 	^true</body></methods><methods><class-id>Fitnesse.Testutil.ClassDelegatePointParser class</class-id> <category>fit-utilities</category><body package="Fit-Tests">fitParse: aString	| matcher x y |	matcher := RxMatcher forString: '\((.*),(.*)\)'.	(matcher matches: aString) ifFalse: [^nil].	x := Double readFrom: (matcher subexpression: 2) readStream.	y := Double readFrom: (matcher subexpression: 3) readStream.	^x @ y</body></methods><methods><class-id>Fitnesse.Testutil.ObjectDelegatePointParser</class-id> <category>fit-utilities</category><body package="Fit-Tests">fitParse: aString	^ClassDelegatePointParser fitParse: aString</body></methods><methods><class-id>Fit.TestColumnFixture</class-id> <category>accessing</category><body package="Fit-Tests">field	^field</body><body package="Fit-Tests">stringField	^stringField</body></methods><methods><class-id>Fitnesse.Testutil.CartesianVector</class-id> <category>accessing</category><body package="Fit-Tests">x	^x</body><body package="Fit-Tests">x: aDouble	x := aDouble</body><body package="Fit-Tests">y	^y</body><body package="Fit-Tests">y: aDouble	y := aDouble</body></methods><methods><class-id>Fitnesse.Testutil.CartesianVector</class-id> <category>operations</category><body package="Fit-Tests">add: aCartesianVector	^self class x: x + aCartesianVector x y: y + aCartesianVector y</body></methods><methods><class-id>Fitnesse.Testutil.CartesianVector</class-id> <category>comparing</category><body package="Fit-Tests">= aCartesianVector	^self class == aCartesianVector class		and: [x = aCartesianVector x and: [y = aCartesianVector y]]</body><body package="Fit-Tests">hash	^x hash hashMultiply bitXor: y hash</body></methods><methods><class-id>Fitnesse.Testutil.CartesianVector class</class-id> <category>instance creation</category><body package="Fit-Tests">x: doubleX y: doubleY	^(self new)		x: doubleX;		y: doubleY</body></methods><methods><class-id>Fitnesse.Testutil.CartesianVector class</class-id> <category>fit-utilities</category><body package="Fit-Tests">fitParse: aString	| matcher x y |	matcher := RxMatcher forString: '\((.*),(.*)\)'.	(matcher matches: aString) ifFalse: [^nil].	x := Double readFrom: (matcher subexpression: 2) readStream.	y := Double readFrom: (matcher subexpression: 3) readStream.	^self x: x y: y</body></methods><methods><class-id>Fit.Decorator.Util.DeltaTest</class-id> <category>tests</category><body package="Fit-Tests">testAddDoubles		| double5Point2 |	double5Point2 := Delta type: 'double' value: '5.2'.	self assert: (double5Point2 addTo: '5' repeat: 1) = '10.2'.	self assert: (double5Point2 addTo: '0.002' repeat: 2) = '10.402'.	self assert: (double5Point2 addTo: '-5' repeat: 1) = '0.2'</body><body package="Fit-Tests">testAddIntegers		| int5 |	int5 := Delta type: 'int' value: '5'.	self assert: (int5 addTo: '5' repeat: 1) = '10'.	self assert: (int5 addTo: '10' repeat: 2) = '20'.	self assert: (int5 addTo: '-5' repeat: 1) = '0'</body><body package="Fit-Tests">testAddStrings		| stringABC |	stringABC := Delta type: 'string' value: 'ABC'.	self assert: (stringABC addTo: '5' repeat: 1) = '5ABC'.	self assert: (stringABC addTo: '0.002' repeat: 1) = '0.002ABC'.	self assert: (stringABC addTo: '-5' repeat: 3) = '-5ABCABCABC'.	self assert: (stringABC addTo: 'XYZ' repeat: 1) = 'XYZABC'</body><body package="Fit-Tests">testDataTypeAndValueMustMatch		self		should: [Delta type: 'int' value: 'xyz']		raise: InvalidInputException.	self		should: [Delta type: 'int' value: '1.2']		raise: InvalidInputException.	self		should: [Delta type: 'double' value: '1.2E']		raise: InvalidInputException</body><body package="Fit-Tests">testPrintString		self		assert:				(Delta type: 'double' value: '5.3') printString =							'DataType (Float) and value = 5.3';		assert:				(Delta type: 'string' value: '5.3') printString =							'DataType (String) and value = 5.3';		assert:				(Delta type: 'int' value: '5') printString =							'DataType (Integer) and value = 5'</body><body package="Fit-Tests">testShouldEncapsulateValueAndType		| expectedDelta |	expectedDelta := Delta type: 'int' value: '5'.	self assert: expectedDelta = expectedDelta.	self deny: expectedDelta = nil.	self assert: (Delta type: 'int' value: '5') = expectedDelta.	self assert: (Delta type: 'Int' value: '5') = expectedDelta.	self assert: (Delta type: 'integer' value: '5') = expectedDelta.	self assert: (Delta type: 'IntegeR' value: '5') = expectedDelta.	expectedDelta := Delta type: 'double' value: '1.2'.	self assert: (Delta type: 'double' value: '1.20') = expectedDelta.	self assert: (Delta type: 'Double' value: '1.200') = expectedDelta.	expectedDelta := Delta type: 'string' value: 'value'.	self assert: (Delta type: 'String' value: 'value') = expectedDelta.	self		assert:			(Delta type: 'string' value: '1.200')				= (Delta type: 'unknownType' value: '1.200')</body></methods><methods><class-id>Fitnesse.Testutil.PassFixture</class-id> <category>enumerating</category><body package="Fit-Tests">doTable: parse 	self right: parse</body></methods><methods><class-id>Fit.DummyFixtureDecorator</class-id> <category>private</category><body package="Fit-Tests">setupDecorator: aCollection</body><body package="Fit-Tests">updateColumnsBasedOnResults: aParse</body></methods><methods><class-id>Fitnesse.Testutil.TranslatePoint</class-id> <category>accessing</category><body package="Fit-Tests">p1	^p1</body><body package="Fit-Tests">p2	^p2</body></methods><methods><class-id>Fitnesse.Testutil.ClassTranslatePoint</class-id> <category>initialize-release</category><body package="Fit-Tests">initialize	super initialize.	TypeAdapter registerParseDelegateClass: ClassDelegatePointParser		forClass: Point</body></methods><methods><class-id>Fit.SessionTest</class-id> <category>tests</category><body package="Fit-Tests">testAnnouncesEndSession	| hit |	hit := false.	Session 		when: SessionEnding		do: [hit := true]		for: self.	Session startFitnesse.	self deny: hit.	Session end.	self assert: hit</body><body package="Fit-Tests">testBeFitWhile	Session beFitWhile: [self checkFit].	self checkNone</body><body package="Fit-Tests">testBeFitnesseWhile	Session beFitnesseWhile: [self checkFitnesse].	self checkNone</body><body package="Fit-Tests">testEnd	Session		startFitnesse;		end.	self checkNone</body><body package="Fit-Tests">testEndSessionUnsubscribesEverybodyAfterAnnouncing	| hitCount |	hitCount := 0.	Session 		when: SessionEnding		do: [hitCount := hitCount + 1]		for: self.	Session startFitnesse.	Session end.	self assert: hitCount = 1.	Session startFitnesse.	Session end.	self assert: hitCount = 1</body><body package="Fit-Tests">testFit	Session startFit.	self checkFit</body><body package="Fit-Tests">testFitnesse	Session startFitnesse.	self checkFitnesse</body><body package="Fit-Tests">testRecursion	Session startFit.	self checkFit.	Session startFit.	Session end.	self checkFit.	Session end.	self checkNone</body></methods><methods><class-id>Fit.SessionTest</class-id> <category>private</category><body package="Fit-Tests">checkFit	self assert: Markup current class == FitMarkup.	self assert: FixtureLoader current class == FitFixtureLoader</body><body package="Fit-Tests">checkFitnesse	self assert: Markup current class == FitnesseMarkup.	self assert: FixtureLoader current class == FitnesseFixtureLoader</body><body package="Fit-Tests">checkNone	self assert: Markup current isNil.	self assert: FixtureLoader current isNil</body></methods><methods><class-id>Fit.SessionTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp	Session reset</body><body package="Fit-Tests">tearDown	Session unsubscribe: self.	Session end</body></methods><methods><class-id>Fit.FileRunnerTest</class-id> <category>private</category><body package="Fit-Tests">checkHtml: aString 	| runner fixture |	runner := FileRunner new.	fixture := FileRunnerTestFixture new.	runner fixture: fixture.	runner input: aString.	runner output: (WriteStream on: String new).	runner process.	self assert: fixture parse leaf text = 'fit.Fixture'</body><body package="Fit-Tests">simpleHtml	^'&lt;table&gt;		&lt;tr&gt;&lt;td&gt;fit.Fixture&lt;/td&gt;&lt;/tr&gt;	&lt;/table&gt;'</body><body package="Fit-Tests">wikiHtml	^'&lt;table&gt;&lt;tr&gt;&lt;td&gt;extra formatting		&lt;wiki&gt;			&lt;table&gt;				&lt;tr&gt;&lt;td&gt;fit.Fixture&lt;/td&gt;&lt;/tr&gt;			&lt;/table&gt;		&lt;/wiki&gt;	&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'</body></methods><methods><class-id>Fit.FileRunnerTest</class-id> <category>tests</category><body package="Fit-Tests">testRunningFileWithWikiTag	Session beFitWhile: 			[self checkHtml: self simpleHtml.			self checkHtml: self wikiHtml]</body></methods><methods><class-id>Fit.Decorator.FixtureDecoratorTestCase</class-id> <category>tests</category><body package="Fit-Tests">testSetAlternatingArgsShouldIgnoreExpectedAndActualStrings		| fitPage table |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;xyz&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;skip1&lt;/td&gt;&lt;td&gt;2&lt;hr&gt;actual 4&lt;/td&gt;&lt;td&gt;skip2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;skip3&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator := DummyFixtureDecorator new.	table := Parse input: fitPage.	decorator setAlternatingArgs: table.	self assert: (decorator arguments isSameSequenceAs: #('1' '2' '3'))</body><body package="Fit-Tests">testSetAlternatingArgsShouldStoreOddNumberedColumnsToArgumentsVariable		| fitPage table |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;xyz&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;skip1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;skip2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;skip3&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator := DummyFixtureDecorator new.	table := Parse input: fitPage.	decorator setAlternatingArgs: table.	self assert: (decorator arguments isSameSequenceAs: #('1' '2' '3'))</body><body package="Fit-Tests">testShouldBeAbleToExecuteEncapsulatedFixture		| fitPage right expected |	fitPage := '&lt;table&gt;' , self decoratorHTMLRow ,			'&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator := Fixture new.	decorator doTables: (Parse input: fitPage).	right := 1 + self numberOfAssertionsOnDecorator.	expected := Counts new right: right.	self assert: decorator counts = expected</body><body package="Fit-Tests">testShouldBeAbleToFindEncapsulatedFixtureName		| fitPage |	fitPage := '&lt;table&gt;' , self decoratorHTMLRow ,			'&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator := Fixture new.	decorator doTables: (Parse input: fitPage).	self		assert:			(decorator summary at: FixtureDecorator encapsulatedFixtureNameKey) =					'eg.Division'</body><body package="Fit-Tests">testShouldBeAbleToInstantiateEncapsulatedFixture		| fitPage |	fitPage := '&lt;table&gt;' , self decoratorHTMLRow , '&lt;tr&gt;&lt;td&gt;'		, DecoratorTestFixture shortName , '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator := Fixture new.	decorator doTables: (Parse input: fitPage).	self		assert:			(decorator summary at: FixtureDecorator encapsulatedFixtureNameKey) =					'Fit.Decorator.DecoratorTestFixture'</body><body package="Fit-Tests">testShouldDoNothingIfThereIsNoEncapsulatedFixturePresent		| fitPage |	fitPage := '&lt;table&gt;' , self decoratorHTMLRow , '&lt;/table&gt;'.	decorator := Fixture new.	decorator doTables: (Parse input: fitPage).	self		deny:				(decorator summary includesKey: FixtureDecorator encapsulatedFixtureNameKey);		assert: decorator counts = Counts new</body><body package="Fit-Tests">testShouldHandleInvalidInputExceptionIfThrownBySetUpMethod		| fitPage |	fitPage := '&lt;table&gt;' , self wrongDecoratorHTMLRow , '&lt;tr&gt;&lt;td&gt;'		, DecoratorTestFixture shortName , '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator := Fixture new.	decorator doTables: (Parse input: fitPage).	self assert: decorator counts = (Counts new exceptions: 1)</body><body package="Fit-Tests">testShouldMarkExceptionIfEncapsulatedFixtureNameIsInvalid		| fitPage |	fitPage := '&lt;table&gt;' , self decoratorHTMLRow ,			'&lt;tr&gt;&lt;td&gt;invalidClass&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator := Fixture new.	decorator doTables: (Parse input: fitPage).	self assert: decorator counts exceptions = 1.	self		assert:			(decorator summary at: FixtureDecorator encapsulatedFixtureNameKey) =					'invalidClass'</body><body package="Fit-Tests">testShouldStripFirstRowAndPassRestOfTheTableToEncapsulatedFixture		| fitPage expectedTableContents |	fitPage := '&lt;table&gt;' , self decoratorHTMLRow , '&lt;tr&gt;&lt;td&gt;'		, DecoratorTestFixture shortName , '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator := Fixture new.	decorator doTables: (Parse input: fitPage).	expectedTableContents := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;'		, DecoratorTestFixture shortName , '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	self		assert:			(decorator summary at: DecoratorTestFixture tableContentsKey) =					expectedTableContents</body></methods><methods><class-id>Fit.Decorator.FixtureDecoratorTestCase</class-id> <category>private</category><body package="Fit-Tests">decoratorHTMLRow		^self subclassResponsibility</body><body package="Fit-Tests">executeFixture: aFixture table: aString assertCounts: aCounts		aFixture doTable: (Parse input: aString).	self assert: aFixture counts = aCounts</body><body package="Fit-Tests">numberOfAssertionsOnDecorator		^self subclassResponsibility</body><body package="Fit-Tests">wrongDecoratorHTMLRow		^'&lt;tr&gt;&lt;td&gt;' , Loop shortName , '&lt;/td&gt;&lt;/tr&gt;'</body></methods><methods><class-id>Fit.Decorator.FixtureDecoratorTestCase</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp	Session startFitnesse</body><body package="Fit-Tests">tearDown	Session end</body></methods><methods><class-id>Fit.Decorator.IncrementColumnsValueTest</class-id> <category>tests</category><body package="Fit-Tests">testIncrementColumnValues		| fitPage |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , IncrementColumnsValue shortName ,			'&lt;/td&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;of type&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;by&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;'		, '&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator doTable: (Parse input: fitPage).	self assert: decorator counts = (Counts from: #(2 1 0 0))</body><body package="Fit-Tests">testIncrementDateColumnValues		| fitPage |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , IncrementColumnsValue shortName ,			'&lt;/td&gt;&lt;td&gt;inDate&lt;/td&gt;&lt;td&gt;of type&lt;/td&gt;&lt;td&gt;date&lt;/td&gt;&lt;td&gt;by&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;'		, '&lt;tr&gt;&lt;td&gt;eg.GetDates&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;inDate&lt;/td&gt;&lt;td&gt;updatedDate()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12/2/06&lt;/td&gt;&lt;td&gt;12/2/06&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12/2/06&lt;/td&gt;&lt;td&gt;12/7/06&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12/22/06&lt;/td&gt;&lt;td&gt;1/1/07&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator doTable: (Parse input: fitPage).	self assert: decorator counts = (Counts from: #(3 0 0 0))</body><body package="Fit-Tests">testSetupDecoratorFailsIfDataTypeAndDeltaDontMatch		self		should: [decorator setupDecorator: #('Column1' 'double' 'xyz')]		raise: InvalidInputException.	self		should: [decorator setupDecorator: #('Column1' 'int' '1.2')]		raise: InvalidInputException.	self		should: [decorator setupDecorator: #('Column1' 'date' '12-5')]		raise: InvalidInputException</body><body package="Fit-Tests">testSetupDecoratorFailsIfNoColumnName		self		should: [decorator setupDecorator: #()]		raise: InvalidInputException</body><body package="Fit-Tests">testSetupDecoratorFailsIfNoDataType		self		should: [decorator setupDecorator: #('Column1')]		raise: InvalidInputException</body><body package="Fit-Tests">testSetupDecoratorFailsIfNoDeltaValue		self		should: [decorator setupDecorator: #('Column1' 'double')]		raise: InvalidInputException</body><body package="Fit-Tests">testSetupDecoratorShouldAddColumnNameDataTypeAndDeltaToSummary		decorator setupDecorator: #('Column1' 'int' '1').	self		assert:			(decorator summary at: IncrementColumnsValue columnNameKey) = 'Column1'.	self		assert:			(decorator summary at: IncrementColumnsValue deltaKey)				= (Delta type: 'int' value: '1')</body><body package="Fit-Tests">testSetupDecoratorShouldAddColumnNameDataTypeAndDeltaToSummaryForDates		decorator setupDecorator: #('Column1' 'date' '5').	self		assert:			(decorator summary at: IncrementColumnsValue columnNameKey) = 'Column1'.	self		assert:			(decorator summary at: IncrementColumnsValue deltaKey)				= (Delta type: 'date' value: '5')</body></methods><methods><class-id>Fit.Decorator.IncrementColumnsValueTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp		super setUp.	decorator := IncrementColumnsValue new</body></methods><methods><class-id>Fit.Decorator.IncrementColumnsValueTest</class-id> <category>private</category><body package="Fit-Tests">decoratorHTMLRow		^'&lt;tr&gt;&lt;td&gt;' , IncrementColumnsValue shortName ,			'&lt;/td&gt;&lt;td&gt;ColumnName&lt;/td&gt;&lt;td&gt;of type&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;by&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;'</body><body package="Fit-Tests">numberOfAssertionsOnDecorator		^0</body></methods><methods><class-id>Fit.GracefulNamerTest</class-id> <category>tests</category><body package="Fit-Tests">testEmptyString	self assert: (GracefulNamer disgrace: '') = ''</body><body package="Fit-Tests">testIsGracefulName	self assert: (GracefulNamer isGracefulName: 'My Nice Fixture').	self assert: (GracefulNamer isGracefulName: 'My_Nice Fixture').	self assert: (GracefulNamer isGracefulName: 'My-Nice-Fixture').	self assert: (GracefulNamer isGracefulName: 'My!Really#Crazy--Name^').	self assert: (GracefulNamer isGracefulName: 'EndsWithADot.').	self deny: (GracefulNamer isGracefulName: 'MyNiceFixture').	self deny: (GracefulNamer isGracefulName: 'my.package.Fixture').	self deny: (GracefulNamer isGracefulName: 'SomeClass$NestedFixture')</body><body package="Fit-Tests">testUnGracefulName	self assert: (GracefulNamer disgrace: 'Bad Company') = 'BadCompany'.	self assert: (GracefulNamer disgrace: 'bad company') = 'BadCompany'.	self assert: (GracefulNamer disgrace: 'Bad-Company') = 'BadCompany'.	self assert: (GracefulNamer disgrace: 'Bad Company.') = 'BadCompany'.	self assert: (GracefulNamer disgrace: '(Bad Company)') = 'BadCompany'.	self assert: (GracefulNamer disgrace: '(BadCompany)') = 'BadCompany'.	self assert: (GracefulNamer disgrace: 'bad 123 company') = 'Bad123Company'.	self assert: (GracefulNamer disgrace: 'bad 123 company') = 'Bad123Company'.	self assert: (GracefulNamer disgrace: 'bad 123company') = 'Bad123Company'.	self assert: (GracefulNamer disgrace: 'Bad123Company') = 'Bad123Company'.	self 		assert: (GracefulNamer disgrace: '   bad  &lt;t&gt;123  company' expandMacros) 				= 'Bad123Company'.	"Just to let you know... probably not what you want."	self assert: (GracefulNamer disgrace: 'My.Namespace.Bad123Company') 				= 'MyNamespaceBad123Company'</body></methods><methods><class-id>Fitnesse.Fixtures.PrimeNumberRowFixture</class-id> <category>abstracts</category><body package="Fit-Tests">query	^#(11 5 3 7 2) collect: [:each | PrimeData prime: each]</body></methods><methods><class-id>Fitnesse.Fixtures.PrimeNumberRowFixture</class-id> <category>accessing</category><body package="Fit-Tests">targetClass	^PrimeData</body></methods><methods><class-id>Fit.ActionFixtureTest</class-id> <category>tests</category><body package="Fit-Tests">testBadCheck	| testParse fixture |	testParse := Parse td: 'check'				more: (Parse td: 'status' more: (Parse td: 'stalled')).	fixture := ActionFixture new.	fixture class actor: TestClassForActionFixture new.	fixture doCells: testParse.	self assert: testParse more more tag = '&lt;td bgcolor="#ffcfcf"&gt;'</body><body package="Fit-Tests">testEnter	| testParse fixture |	testParse := Parse td: 'enter'				more: (Parse td: 'library' more: (Parse td: 'value')).	fixture := ActionFixture new.	fixture class actor: TestClassForActionFixture new.	fixture doCells: testParse.	self assert: fixture class actor library = 'value'</body><body package="Fit-Tests">testGoodCheck	| testParse fixture |	testParse := Parse td: 'check'				more: (Parse td: 'status' more: (Parse td: 'loading')).	fixture := ActionFixture new.	fixture class actor: TestClassForActionFixture new.	fixture doCells: testParse.	self assert: testParse more more tag = '&lt;td bgcolor="#cfffcf"&gt;'</body><body package="Fit-Tests">testGoodNumericCheck	| testParse fixture |	testParse := Parse td: 'check'				more: (Parse td: 'num value' more: (Parse td: '5')).	fixture := ActionFixture new.	fixture class actor: TestClassForActionFixture new.	fixture doCells: testParse.	self assert: testParse more more tag = '&lt;td bgcolor="#cfffcf"&gt;'</body><body package="Fit-Tests">testMultiWordEnter	| testParse fixture |	testParse := Parse td: 'enter'				more: (Parse td: 'library path' more: (Parse td: 'value')).	fixture := ActionFixture new.	fixture class actor: TestClassForActionFixture new.	fixture doCells: testParse.	self assert: fixture class actor libraryPath = 'value'</body><body package="Fit-Tests">testPress	| testParse fixture |	testParse := Parse td: 'press' more: (Parse td: 'play').	fixture := ActionFixture new.	fixture class actor: TestClassForActionFixture new.	fixture doCells: testParse.	self assert: fixture class actor playWasPressed</body><body package="Fit-Tests">testStart	| hpParse fixture |	hpParse := Parse td: 'start'				more: (Parse td: 'fit.TestClassForActionFixture').	fixture := ActionFixture new.	fixture doCells: hpParse.	self assert: (fixture class actor isKindOf: TestClassForActionFixture)</body></methods><methods><class-id>Fit.ActionFixtureTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp	Session startFit</body><body package="Fit-Tests">tearDown	Session end</body></methods><methods><class-id>Fit.SimpleBusinessObject</class-id> <category>accessing</category><body package="Fit-Tests">field: anObject	field := anObject</body></methods><methods><class-id>Fit.PointReader</class-id> <category>fit-utilities</category><body package="Fit-Tests">fitParse: aString		^self class readPointFrom: aString</body></methods><methods><class-id>Fit.PointReader class</class-id> <category>instance creation</category><body package="Fit-Tests">readPointFrom: aString		| rs x y |	rs := aString readStream.	(rs peekFor: $() ifFalse: [^nil].	x := (rs upTo: $,) asNumber.	rs skipSeparators.	y := (rs upTo: $)) asNumber.	^x @ y</body></methods><methods><class-id>Fit.PointReader class</class-id> <category>fit-utilities</category><body package="Fit-Tests">fitParse: aString		^self readPointFrom: aString</body></methods><methods><class-id>Fit.FitServerTest</class-id> <category>private</category><body package="Fit-Tests">establishConnection	self waitForConnectionSocket.	self deny: socket isNil.	httpRequest := ByteArray new: 52.	socket readInto: httpRequest.	socket writeAll: '0000000000' asByteArray</body><body package="Fit-Tests">listenForConnection	serverSocket := SocketAccessor newTCPserverAtPort: 3456.	serverSocket		listenFor: 5;		soReuseaddr: true.	semaphore := Semaphore new.	socket := nil.	listener := 			[socket := serverSocket accept.			semaphore signal.			listener := nil] 					fork</body><body package="Fit-Tests">prepareSessionProcess	self listenForConnection.	self startFitServer.	self establishConnection</body><body package="Fit-Tests">startFitServer	process := 			[(FitServer new)				outputStream: (WriteStream on: String new);				runWithArguments: #('localhost' '3456' '23').			process := nil] 					forkAt: Processor userBackgroundPriority</body><body package="Fit-Tests">waitForConnectionSocket	socket isNil ifTrue: [semaphore wait]</body></methods><methods><class-id>Fit.FitServerTest</class-id> <category>tests</category><body package="Fit-Tests">testSimpleStartup	self prepareSessionProcess.	self assert: ('GET /?responder=socketCatcher&amp;ticket=23*' 				match: httpRequest asString)</body></methods><methods><class-id>Fit.FitServerTest</class-id> <category>Running</category><body package="Fit-Tests">tearDown	process ifNotNil: [process terminate].	socket ifNotNil: [socket close].	serverSocket ifNotNil: [serverSocket close].	listener ifNotNil: [listener terminate]</body></methods><methods><class-id>Fit.TestRowFixture</class-id> <category>accessing</category><body package="Fit-Tests">targetClass	^BusinessObject</body></methods><methods><class-id>Fit.TestRowFixture</class-id> <category>abstracts</category><body package="Fit-Tests">query	^Array new</body></methods><methods><class-id>Fit.FitServerProtocolTest</class-id> <category>private</category><body package="Fit-Tests">checkDocumentExecution: table 	FitProtocol writeData: table to: socketStream.	self checkForAttribute_class.	self checkSize: '0000000000'</body><body package="Fit-Tests">checkDocumentResultsRight: right wrong: wrong ignored: ignored errors: errors 	| actual |	actual := FitProtocol readCountsFrom: socket.	self assert: actual right = right.	self assert: actual wrong = wrong.	self assert: actual ignores = ignored.	self assert: actual exceptions = errors</body><body package="Fit-Tests">checkForAttribute_class	| output |	output := self readFromFitServer.	self fitAssert: output contains: 'class='</body><body package="Fit-Tests">checkForTwoClassAttributesInResponse	| response first second |	response := self readWholeResponse.	first := response indexOfSubCollection: 'class' startingAt: 1.	second := response indexOfSubCollection: 'class' startingAt: first + 1.	self assert: first &gt; 0.	self assert: second &gt; first</body><body package="Fit-Tests">checkSize: sizeString 	self assert: sizeString = (self read: 10)</body><body package="Fit-Tests">establishConnection	httpRequest := ByteArray new: 52.	socket readInto: httpRequest.	socket writeAll: connectionStatusSize asByteArray</body><body package="Fit-Tests">formattedDocumentSize: document 	^(FitProtocol formatNumber: document size) asByteArray</body><body package="Fit-Tests">prepareSessionProcess	| sockets |	sockets := SocketAccessor openPair.	socket := sockets first.	socketStream := socket writeStream binary.	self startFitServerWith: sockets last.	self establishConnection</body><body package="Fit-Tests">read: aCount 	| bytes |	aCount = 0 ifTrue: [^String new].	bytes := ByteArray new: aCount.	socket readInto: bytes.	^bytes asStringEncoding: #'UTF-8'</body><body package="Fit-Tests">readFromFitServer	| size |	size := (self read: 10) asNumber.	^self read: size</body><body package="Fit-Tests">readWholeResponse	| ws block |	ws := WriteStream on: String new.		[block := self readFromFitServer.	block isEmpty not] 			whileTrue: [ws nextPutAll: block].	^ws contents</body><body package="Fit-Tests">simpleTable: fixtureName 	^'&lt;table&gt;&lt;tr&gt;&lt;td&gt;fitnesse.testutil.' , fixtureName , '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'</body><body package="Fit-Tests">startFitServerWith: aSocketAccessor 	fitServerSemaphore := Semaphore new.	serverOutput := WriteStream on: String new.	process := 			[exitCode := FitServer 						runOnSocket: aSocketAccessor						withToken: '23'						outputTo: serverOutput.			fitServerSemaphore signal.			process := nil] 					forkAt: Processor userBackgroundPriority</body><body package="Fit-Tests">terminateSessionProcess	socket writeAll: '0000000000' asByteArray.	fitServerSemaphore wait.	socket close</body></methods><methods><class-id>Fit.FitServerProtocolTest</class-id> <category>tests</category><body package="Fit-Tests">testBadConnection	| errorMessage |	errorMessage := 'FAILURE'.	connectionStatusSize := '0000000007'.	self prepareSessionProcess.	socket writeAll: errorMessage asByteArray.	fitServerSemaphore wait.	self assert: exitCode = -2.	self fitAssert: serverOutput contents contains: errorMessage</body><body package="Fit-Tests">testExtraTextIsPrinted	| document response |	document := '&lt;html&gt;' , (self simpleTable: 'PassFixture') , 'monkey' 				, (self simpleTable: 'PassFixture') , '&lt;/html&gt;'.	self prepareSessionProcess.	FitProtocol writeData: document to: socketStream.	response := self readWholeResponse.	self assert: ('&lt;html&gt;*' match: response).	self fitAssert: response contains: 'monkey'.	self assert: ('*&lt;/html&gt;' match: response).	self terminateSessionProcess</body><body package="Fit-Tests">testNonTestInput	| size output |	self prepareSessionProcess.	socket		writeAll: (self formattedDocumentSize: 'some untestable text');		writeAll: ('some untestable text' asByteArrayEncoding: #'UTF-8').	size := (self read: 10) asNumber.	output := self read: size.	self fitAssert: output contains: 'Exception'.	self fitAssert: output contains: 'Can''t find tag: table'</body><body package="Fit-Tests">testOneMultiTableRun	| document |	document := (self simpleTable: 'FailFixture') 				, (self simpleTable: 'FailFixture').	self prepareSessionProcess.	FitProtocol writeData: document to: socketStream.	self checkForTwoClassAttributesInResponse.	self 		checkDocumentResultsRight: 0		wrong: 2		ignored: 0		errors: 0.	self terminateSessionProcess.	self assert: exitCode = 2</body><body package="Fit-Tests">testOneSimpleRun_Fail	| table |	table := self simpleTable: 'FailFixture'.	self prepareSessionProcess.	self checkDocumentExecution: table.	self 		checkDocumentResultsRight: 0		wrong: 1		ignored: 0		errors: 0.	self terminateSessionProcess.	self assert: exitCode = 1</body><body package="Fit-Tests">testOneSimpleRun_Pass	| table |	table := self simpleTable: 'PassFixture'.	self prepareSessionProcess.	self checkDocumentExecution: table.	self 		checkDocumentResultsRight: 1		wrong: 0		ignored: 0		errors: 0.	self terminateSessionProcess.	self assert: exitCode = 0</body><body package="Fit-Tests">testParseErrorDoesntCrashSuite	self prepareSessionProcess.	self checkDocumentExecution: 'no table'.	self 		checkDocumentResultsRight: 0		wrong: 0		ignored: 0		errors: 1.	self checkDocumentExecution: (self simpleTable: 'PassFixture').	self 		checkDocumentResultsRight: 1		wrong: 0		ignored: 0		errors: 0.	self terminateSessionProcess.	self assert: exitCode = 1</body><body package="Fit-Tests">testSimpleStartup	self prepareSessionProcess.	self assert: ('GET /?responder=socketCatcher&amp;ticket=23*' 				match: httpRequest asString)</body><body package="Fit-Tests">testTwoSimpleRuns	| table |	table := self simpleTable: 'FailFixture'.	self prepareSessionProcess.	self checkDocumentExecution: table.	self 		checkDocumentResultsRight: 0		wrong: 1		ignored: 0		errors: 0.	self checkDocumentExecution: table.	self 		checkDocumentResultsRight: 0		wrong: 1		ignored: 0		errors: 0.	self terminateSessionProcess.	self assert: exitCode = 2</body><body package="Fit-Tests">testUnicodeCharacters	| table response unicodeString |	unicodeString := String withAll: (#(16rba80 16rba81 16rba82 16rba83) 						collect: [:each | Character value: each]).	table := unicodeString , (self simpleTable: 'PassFixture').	self prepareSessionProcess.	FitProtocol writeData: table to: socketStream.	response := self readWholeResponse.	self fitAssert: response contains: unicodeString.	self terminateSessionProcess</body></methods><methods><class-id>Fit.FitServerProtocolTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp	connectionStatusSize := '0000000000'.	Session startFitnesse</body><body package="Fit-Tests">tearDown	process ifNotNil: [process terminate].	socket ifNotNil: [socket close].	Session end</body></methods><methods><class-id>Fitnesse.Fixtures.DoesntImplementNewFixture class</class-id> <category>instance creation</category><body package="Fit-Tests">new	^ShouldNotImplement raise</body></methods><methods><class-id>Fit.FrameworkTest</class-id> <category>tests</category><body package="Fit-Tests">testEscape	| junk |	junk := '!@#$%^*()_-+={}|[]\:";'',./?`'.	self assert: junk = (Fixture escape: junk).	self assert: '' = (Fixture escape: '').	self assert: '&amp;lt;' = (Fixture escape: '&lt;').	self assert: '&amp;lt;&amp;lt;' = (Fixture escape: '&lt;&lt;').	self assert: 'x&amp;lt;' = (Fixture escape: 'x&lt;').	self assert: '&amp;amp;' = (Fixture escape: '&amp;').	self assert: '&amp;lt;&amp;amp;&amp;lt;' = (Fixture escape: '&lt;&amp;&lt;').	self assert: '&amp;amp;&amp;lt;&amp;amp;' = (Fixture escape: '&amp;&lt;&amp;').	self 		assert: 'a &amp;lt; b &amp;amp;&amp;amp; c &amp;lt; d' = (Fixture escape: 'a &lt; b &amp;&amp; c &lt; d').	self assert: 'a&lt;br /&gt;b' = (Fixture escape: 'a\b' withCRs)</body><body package="Fit-Tests">testScientificDouble	| pi |	pi := 3.141592865d.	self assert: (ScientificDouble valueOf: '3.14') = pi.	self assert: (ScientificDouble valueOf: '3.142') = pi.	self assert: (ScientificDouble valueOf: '3.1416') = pi.	self assert: (ScientificDouble valueOf: '3.14159') = pi.	self assert: (ScientificDouble valueOf: '3.141592865') = pi.	self deny: (ScientificDouble valueOf: '3.140') = pi.	self deny: (ScientificDouble valueOf: '3.144') = pi.	self deny: (ScientificDouble valueOf: '3.1414') = pi.	self deny: (ScientificDouble valueOf: '3.141592863') = pi.	self assert: (ScientificDouble valueOf: '6.02e23') = 6.02d23.	self assert: (ScientificDouble valueOf: '6.02E23') = 6.024d23.	self assert: (ScientificDouble valueOf: '6.02e23') = 6.016d23.	self deny: (ScientificDouble valueOf: '6.02e23') = 6.026d23.	self deny: (ScientificDouble valueOf: '6.02e23') = 6.014d23</body></methods><methods><class-id>Fit.Decorator.LoopTest</class-id> <category>tests</category><body package="Fit-Tests">testSetupDecoratorShouldAddLoopCountToSummary		decorator setupDecorator: #('5').	self assert: (decorator summary at: Loop countKey) = 5</body><body package="Fit-Tests">testSetupDecoratorShouldRaiseInvalidInputExceptionIfLoopCountIsNotSpecified		self		should: [decorator setupDecorator: #()]		raise: InvalidInputException</body><body package="Fit-Tests">testShouldExecuteDoTableMethodLoopCounterNumberOfTimes		| fitPage |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , Loop shortName ,			'&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;times&lt;/td&gt;&lt;/tr&gt;' , '&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12.6&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4.2&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator doTable: (Parse input: fitPage).	self assert: decorator counts = (Counts new right: 15)</body></methods><methods><class-id>Fit.Decorator.LoopTest</class-id> <category>private</category><body package="Fit-Tests">decoratorHTMLRow		^'&lt;tr&gt;&lt;td&gt;' , Loop shortName , '&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;times&lt;/td&gt;&lt;/tr&gt;'</body><body package="Fit-Tests">numberOfAssertionsOnDecorator		^0</body></methods><methods><class-id>Fit.Decorator.LoopTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp		super setUp.	decorator := Loop new</body></methods><methods><class-id>Fit.Decorator.Performance.MockTimer</class-id> <category>operations</category><body package="Fit-Tests">elapsed		^self class fakeElapsedTime</body><body package="Fit-Tests">start</body></methods><methods><class-id>Fit.Decorator.Performance.MockTimer class</class-id> <category>constants</category><body package="Fit-Tests">fakeElapsedTime		^20</body></methods><methods><class-id>Fitnesse.Testutil.VectorSum</class-id> <category>accessing</category><body package="Fit-Tests">v1	^v1</body><body package="Fit-Tests">v2	^v2</body></methods><methods><class-id>Fit.Decorator.Performance.MaxTimeTest</class-id> <category>tests</category><body package="Fit-Tests">testRunShouldMeasureTimeTakenToExecuteDoTableMethodOnGivenFixture		| fitPage fixture |	fitPage := '&lt;table&gt;' , self decoratorHTMLRow ,			'&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	fixture := MaxTime stopWatch: MockTimer new.	fixture		run: ColumnFixture new		table: (Parse input: fitPage).	self		assert:			(fixture summary at: MaxTime actualTimeTakenKey)				= MockTimer fakeElapsedTime</body><body package="Fit-Tests">testSetupDecoratorMustRaiseInvalidInputExceptionIfMaxTimeIsNotSpecified		self		should: [decorator setupDecorator: #()]		raise: InvalidInputException</body><body package="Fit-Tests">testSetupDecoratorShouldAddMaxTimeToSummary		decorator setupDecorator: #('80').	self assert: (decorator summary at: MaxTime maxTimeKey) = 80</body><body package="Fit-Tests">testShouldFailIfActualExecutionTimeIsGreaterThanMaxTime		| fitPage expectedCounts |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , MaxTime shortName ,			'&lt;/td&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;milliseconds&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12.6&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4.2&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	expectedCounts := Counts from: #(3 1 0 0).	self		executeFixture: (MaxTime stopWatch: MockTimer new)		table: fitPage		assertCounts: expectedCounts</body><body package="Fit-Tests">testShouldPassIfActualExecutionTimeIsEqualToMaxTime		| fitPage expectedCounts |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , MaxTime shortName ,			'&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;milliseconds&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12.6&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4.2&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	expectedCounts := Counts from: #(4 0 0 0).	self		executeFixture: (MaxTime stopWatch: MockTimer new)		table: fitPage		assertCounts: expectedCounts</body><body package="Fit-Tests">testShouldPassIfActualExecutionTimeIsLessThanMaxTime		| fitPage expectedCounts |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , MaxTime shortName ,			'&lt;/td&gt;&lt;td&gt;80&lt;/td&gt;&lt;td&gt;milliseconds&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12.6&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4.2&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	expectedCounts := Counts from: #(4 0 0 0).	self		executeFixture: (MaxTime stopWatch: MockTimer new)		table: fitPage		assertCounts: expectedCounts</body><body package="Fit-Tests">testShouldWorkIfFixtureDecoratorsArePiped		| fitPage expectedCounts |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , MaxTime shortName ,			'&lt;/td&gt;&lt;td&gt;80&lt;/td&gt;&lt;td&gt;milliseconds&lt;/td&gt;&lt;/tr&gt;' , '&lt;tr&gt;&lt;td&gt;'		, Loop shortName , '&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;times&lt;/td&gt;&lt;/tr&gt;' , '&lt;tr&gt;&lt;td&gt;'		, MaxTime shortName , '&lt;/td&gt;&lt;td&gt;80&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12.6&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4.2&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	expectedCounts := Counts from: #(13 0 0 0).	self		executeFixture: (MaxTime stopWatch: MockTimer new)		table: fitPage		assertCounts: expectedCounts</body></methods><methods><class-id>Fit.Decorator.Performance.MaxTimeTest</class-id> <category>private</category><body package="Fit-Tests">decoratorHTMLRow		^'&lt;tr&gt;&lt;td&gt;' , MaxTime shortName ,			'&lt;/td&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;milliseconds&lt;/td&gt;&lt;/tr&gt;'</body><body package="Fit-Tests">numberOfAssertionsOnDecorator		^1</body></methods><methods><class-id>Fit.Decorator.Performance.MaxTimeTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp		super setUp.	decorator := MaxTime new</body></methods><methods><class-id>Fit.BusinessObject</class-id> <category>accessing</category><body package="Fit-Tests">strs: aCollection	strs := aCollection copy</body></methods><methods><class-id>Fit.BusinessObject class</class-id> <category>instance creation</category><body package="Fit-Tests">strings: aCollection 	^(self new)		strs: aCollection;		yourself</body></methods><methods><class-id>Fit.Decorator.Util.DataTypeTest</class-id> <category>tests</category><body package="Fit-Tests">testAddCustomDataType		| returnedDataType |	DataType		registerUserDefined: PointReader		as: Point shortName.	returnedDataType := DataType instance: Point shortName.	self		assert:				(returnedDataType						add: 1 @ 1						to: '(5,5)'						repeat: 0) = '(5,5)';		assert:				(returnedDataType						add: 1 @ 1						to: '(5,5)'						repeat: 1) = '(6,6)';		assert:				(returnedDataType						add: 1 @ 1						to: '(5,5)'						repeat: 5) = '(10,10)'</body><body package="Fit-Tests">testAddDates		self assert: (DataType date add: 5 to: '12/2/2006' repeat: 0) = '12/2/06'.	self assert: (DataType date add: 5 to: '12/2/2006' repeat: 1) = '12/7/06'.	self assert: (DataType date add: 1 to: '12/31/2006' repeat: 1) = '1/1/07'.	self assert: (DataType date add: 5 to: '12/2/2006' repeat: 10) = '1/21/07'</body><body package="Fit-Tests">testAddDoubles		self assert: (DataType double add: 5.1 to: '10.2' repeat: 0) = '10.2'.	self assert: (DataType double add: 5.1 to: '10.2' repeat: 1) = '15.3'.	self assert: (DataType double add: 5.1 to: '10.2' repeat: 2) = '20.4'</body><body package="Fit-Tests">testAddIntegers		self assert: (DataType integer add: 5 to: '10' repeat: 0) = '10'.	self assert: (DataType integer add: 5 to: '10' repeat: 1) = '15'.	self assert: (DataType integer add: 5 to: '10' repeat: 2) = '20'</body><body package="Fit-Tests">testAddStrings		self		assert: (DataType string add: ' World' to: 'Hello' repeat: 0) = 'Hello'.	self		assert:			(DataType string add: ' World' to: 'Hello' repeat: 1) = 'Hello World'.	self		assert:			(DataType string add: ' World' to: 'Hello' repeat: 2) = 'Hello World World'</body><body package="Fit-Tests">testDefaultsToStringIfUnknownType		self assert: (DataType instance: 'invalid') == DataType string</body><body package="Fit-Tests">testInstanceMethodReturnsValidDataTypeForGivenParam		self assert: (DataType instance: 'int') == DataType integer.	self assert: (DataType instance: 'Int') == DataType integer.	self assert: (DataType instance: 'integer') == DataType integer.	self assert: (DataType instance: 'INTEGER') == DataType integer.	self assert: (DataType instance: 'double') == DataType double.	self assert: (DataType instance: 'DOUBLE') == DataType double.	self assert: (DataType instance: 'string') = DataType string.	self assert: (DataType instance: 'STRING') = DataType string.	self assert: (DataType instance: 'date') = DataType date</body><body package="Fit-Tests">testRaiseInvalidInputExceptionOnParseError		self		should: [DataType integer fitParse: 'Invalid Integer']		raise: InvalidInputException.	self		should: [DataType integer fitParse: '1.2']		raise: InvalidInputException.	self		should: [DataType double fitParse: 'Invalid Double']		raise: InvalidInputException.	self		should: [DataType double fitParse: '1.2E']		raise: InvalidInputException.	self		should: [DataType date fitParse: '12-2']		raise: InvalidInputException</body><body package="Fit-Tests">testRemoveAllCustomDataTypes		| returnedDataType |	DataType		registerUserDefined: PointReader		as: Point shortName.	returnedDataType := DataType instance: Point shortName.	self		assert:			(returnedDataType				add: 1 @ 1				to: '(5,5)'				repeat: 1) = '(6,6)'.	DataType clearUserDefinedDataTypes.	returnedDataType := DataType instance: Point shortName.	self assert: returnedDataType == DataType string</body><body package="Fit-Tests">testRemoveSpecificCustomDataType		| returnedDataType |	DataType		registerUserDefined: PointReader		as: Point shortName.	returnedDataType := DataType instance: Point shortName.	self		assert:			(returnedDataType				add: 1 @ 1				to: '(5,5)'				repeat: 1) = '(6,6)'.	DataType unregisterUserDefined: Point shortName.	returnedDataType := DataType instance: Point shortName.	self assert: returnedDataType == DataType string</body></methods><methods><class-id>Fit.Decorator.Util.DataTypeTest</class-id> <category>initialize-release</category><body package="Fit-Tests">tearDown		DataType clearUserDefinedDataTypes</body></methods><methods><class-id>Fitnesse.Fixtures.PrimeData</class-id> <category>accessing</category><body package="Fit-Tests">prime: anInteger	prime := anInteger</body></methods><methods><class-id>Fitnesse.Fixtures.PrimeData class</class-id> <category>instance creation</category><body package="Fit-Tests">prime: anInteger	^self new prime: anInteger</body></methods><methods><class-id>Fit.Decorator.Util.TableTest</class-id> <category>tests</category><body package="Fit-Tests">testAsStringShouldParseTableWithMultipleRowsAndColumns		self assertTable: fitPage</body><body package="Fit-Tests">testCopyAndAppendLastRow		| expectedTableContents |	table copyAndAppendLastRow: 1.	expectedTableContents := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	self assertTable: expectedTableContents</body><body package="Fit-Tests">testCopyAndAppendLastRowMultipleTimes		| expectedTableContents |	table copyAndAppendLastRow: 3.	expectedTableContents := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	self assertTable: expectedTableContents</body><body package="Fit-Tests">testCopyAndAppendLastRowShouldLeaveTheTableAloneIfLessThanThreeRows		fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	table := Table fromString: fitPage.	table copyAndAppendLastRow: 4.	self assertTable: fitPage</body><body package="Fit-Tests">testCopyAndAppendLastRowZeroTimes		table copyAndAppendLastRow: 0.	self assertTable: fitPage</body><body package="Fit-Tests">testFromParse		| expectedTableContents parse |	expectedTableContents := '&lt;tr&gt;&lt;td&gt;fit.decorator.MaxTime&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt;'.	parse := Parse input: expectedTableContents tags: #('tr' 'td').	table := Table fromParse: parse.	self assertTable: expectedTableContents</body><body package="Fit-Tests">testIncrementColumnAddsTheDeltaToAllRowsButTheFirst		| expectedFitPage |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	table := Table fromString: fitPage.	table		incrementValuesInColumn: 'denominator'		by: (Delta type: 'int' value: '1').	expectedFitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	self assertTable: expectedFitPage</body><body package="Fit-Tests">testIncrementColumnValueFailsIfColumnNotFound		self		should: [table incrementValuesInColumn: 'invalidColumnName' by: nil]		raise: InvalidInputException</body><body package="Fit-Tests">testIncrementColumnValueLeavesTheFirstRowAlone		table		incrementValuesInColumn: 'denominator'		by: (Delta type: 'int' value: '1').	self assertTable: fitPage</body><body package="Fit-Tests">testIndexOfColumnContaining		self assert: (table indexOfColumnContaining: 'numerator' inRow: 2) = 1.	self assert: (table indexOfColumnContaining: 'denominator' inRow: 2) = 2.	self assert: (table indexOfColumnContaining: 'quotient()' inRow: 2) = 3</body><body package="Fit-Tests">testIndexOfColumnContainingRaisesErrorIfStringNotFound		self		should: [table indexOfColumnContaining: 'invalidColumnName' inRow: 1]		raise: InvalidInputException</body><body package="Fit-Tests">testIndexOfRowContaining		self assert: (table indexOfRowContaining: 'eg.Division') = 1.	self assert: (table indexOfRowContaining: 'numerator') = 2.	self assert: (table indexOfRowContaining: 'denominator') = 2</body><body package="Fit-Tests">testIndexOfRowContainingRaisesErrorIfStringNotFound		self		should: [table indexOfRowContaining: 'invalidColumnName']		raise: InvalidInputException</body><body package="Fit-Tests">testInsertAsFirstRow		| firstRow expectedTableContents |	firstRow := Parse input: '&lt;tr&gt;&lt;td&gt;first row&lt;/td&gt;&lt;/tr&gt;' tags: #('tr' 'td').	table insertAsFirstRow: firstRow.	expectedTableContents := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;first row&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;'		, '&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	self assertTable: expectedTableContents</body><body package="Fit-Tests">testLastRow		self		assertParse: table lastRow		expected: '&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;'</body><body package="Fit-Tests">testSecondLastRow		fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	table := Table fromString: fitPage.	self		assertParse: (table secondLastRow: table lastRow)		expected: '&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;'</body><body package="Fit-Tests">testStripFirstRow		| expectedTableContents |	table stripFirstRow.	expectedTableContents := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;'		, '&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	self assertTable: expectedTableContents</body></methods><methods><class-id>Fit.Decorator.Util.TableTest</class-id> <category>private</category><body package="Fit-Tests">assertParse: aParse expected: aString		self assert: (Table fromParse: aParse) asString = aString</body><body package="Fit-Tests">assertTable: aString		self assert: table asString = aString</body></methods><methods><class-id>Fit.Decorator.Util.TableTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp	Session startFitnesse.	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;'				, '&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;'					, '&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	table := Table fromString: fitPage</body><body package="Fit-Tests">tearDown	Session end</body></methods><methods><class-id>Fit.Decorator.CopyAndAppendLastRowTest</class-id> <category>tests</category><body package="Fit-Tests">testSetupDecoratorShouldAddCounterToSummary		decorator setupDecorator: #('5').	self		assert: (decorator summary at: CopyAndAppendLastRow numberOfTimesKey) = 5</body><body package="Fit-Tests">testSetupDecoratorShouldRaiseInvalidInputExceptionIfCounterIsNotSpecified		self		should: [decorator setupDecorator: #()]		raise: InvalidInputException</body><body package="Fit-Tests">testShouldAddOneRowIfCounterValueIsOne		| fitPage |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , CopyAndAppendLastRow shortName ,			'&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;times&lt;/td&gt;&lt;/tr&gt;' , '&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator doTable: (Parse input: fitPage).	self assert: decorator counts = (Counts new right: 2)</body><body package="Fit-Tests">testShouldAppendLastRowCounterNumberOfTimes		| fitPage |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , CopyAndAppendLastRow shortName ,			'&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;times&lt;/td&gt;&lt;/tr&gt;' , '&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator doTable: (Parse input: fitPage).	self assert: decorator counts = (Counts new right: 5 + 1)</body><body package="Fit-Tests">testShouldAppendOnlyTheLastRowCounterNumberOfTimes		| fitPage |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , CopyAndAppendLastRow shortName ,			'&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;times&lt;/td&gt;&lt;/tr&gt;' , '&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12.6&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4.2&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator doTable: (Parse input: fitPage).	self assert: decorator counts = (Counts new right: 5 + 3)</body><body package="Fit-Tests">testShouldLeaveTableAsItIsIfCounterValueIsZero		| fitPage |	fitPage := '&lt;table&gt;' , self decoratorHTMLRow , '&lt;tr&gt;&lt;td&gt;'		, DecoratorTestFixture shortName , '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator doTables: (Parse input: fitPage).	self assert: decorator counts = Counts new</body><body package="Fit-Tests">testShouldLeaveTableAsItIsIfTotalRowsAreLessThanThree		| fitPage |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , CopyAndAppendLastRow shortName ,			'&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;times&lt;/td&gt;&lt;/tr&gt;' , '&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	decorator doTable: (Parse input: fitPage).	self assert: decorator counts = Counts new</body></methods><methods><class-id>Fit.Decorator.CopyAndAppendLastRowTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp		super setUp.	decorator := CopyAndAppendLastRow new</body></methods><methods><class-id>Fit.Decorator.CopyAndAppendLastRowTest</class-id> <category>private</category><body package="Fit-Tests">decoratorHTMLRow		^'&lt;tr&gt;&lt;td&gt;' , CopyAndAppendLastRow shortName ,			'&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;times&lt;/td&gt;&lt;/tr&gt;'</body><body package="Fit-Tests">numberOfAssertionsOnDecorator		^0</body></methods><methods><class-id>Fitnesse.Fixtures.ColumnFixtureTestFixture</class-id> <category>accessing</category><body package="Fit-Tests">input	^input</body><body package="Fit-Tests">integerInput	^integerInput</body></methods><methods><class-id>Fit.FitMatcherTest</class-id> <category>tests</category><body package="Fit-Tests">testExceptions	self assertException: 'X' with: 1.	self assertException: '&lt;32' with: 'xxx'</body><body package="Fit-Tests">testMessage	| matcher |	matcher := FitMatcher expression: '_&gt;25' parameter: 3.	self assert: matcher message = '&lt;b&gt;3&lt;/b&gt;&gt;25'.	matcher := FitMatcher expression: ' &lt; 32' parameter: 5.	self assert: matcher message = '&lt;b&gt;5&lt;/b&gt; &lt; 32'</body><body package="Fit-Tests">testSimpleMatches	self assertMatch: '_&lt;3' with: 2.	self assertNoMatch: '_&lt;3' with: 3.	self assertMatch: '_&lt;4' with: 3.	self assertMatch: '_ &lt; 9' with: 4.	self assertMatch: '&lt;3' with: 2.	self assertMatch: '&gt;4' with: 5.	self assertMatch: '&gt;-3' with: -2.	self assertMatch: '&lt;3.2' with: 3.1.	self assertNoMatch: '&lt;3.2' with: 3.3.	self assertMatch: '&lt;=3' with: 3.	self assertMatch: '&lt;=3' with: 2.	self assertNoMatch: '&lt;=3' with: 4.	self assertMatch: '&gt;=2' with: 2.	self assertMatch: '&gt;=2' with: 3.	self assertNoMatch: '&gt;=2' with: 1</body><body package="Fit-Tests">testTrichotomy	self assertMatch: '5&lt;_&lt;32' with: 8.	self assertNoMatch: '5&lt;_&lt;32' with: 5.	self assertNoMatch: '5&lt;_&lt;32' with: 32.	self assertMatch: '10&gt;_&gt;5' with: 6.	self assertNoMatch: '10&gt;_&gt;5' with: 10.	self assertNoMatch: '10&gt;_&gt;5' with: 5.	self assertMatch: '10&gt;=_&gt;=5' with: 10.	self assertMatch: '10&gt;=_&gt;=5' with: 5</body></methods><methods><class-id>Fit.FitMatcherTest</class-id> <category>private</category><body package="Fit-Tests">assertException: aString with: aNumber 	| matcher |	matcher := FitMatcher expression: aString parameter: aNumber.	self should: [matcher matches] raise: Error</body><body package="Fit-Tests">assertMatch: aString with: aNumber 	| matcher |	matcher := FitMatcher expression: aString parameter: aNumber.	self assert: matcher matches</body><body package="Fit-Tests">assertNoMatch: aString with: aNumber 	| matcher |	matcher := FitMatcher expression: aString parameter: aNumber.	self deny: matcher matches</body></methods><methods><class-id>Fit.FileRunnerTestFixture</class-id> <category>accessing</category><body package="Fit-Tests">parse	^parse</body></methods><methods><class-id>Fit.FileRunnerTestFixture</class-id> <category>enumerating</category><body package="Fit-Tests">doTables: aParse 	parse := aParse</body></methods><methods><class-id>Fit.FitnesseFixtureLoaderTest</class-id> <category>tests</category><body package="Fit-Tests">testAlwaysRememberFitNamespace	self assertLoading: 'FixtureOne' finds: 'Fit.FixtureOne'</body><body package="Fit-Tests">testLoadFixturesFromPreviouslyRememberedPackages	self assertLoading: 'Fit.FixtureOne' finds: 'Fit.FixtureOne'.	self assertLoading: 'FixtureTwo' finds: 'Fit.FixtureTwo'</body><body package="Fit-Tests">testLoadFixturesWithFixtureImplied	self assertLoading: 'the third' finds: 'Fit.TheThirdFixture'</body><body package="Fit-Tests">testLoadFixturesWithGracefulName	fixtureLoader load: 'Fit.FixtureOne'.	self assertLoading: 'fixture two' finds: 'Fit.FixtureTwo'</body><body package="Fit-Tests">testLoadJavaStylePackageNames	self assertLoading: 'fit.FixtureOne' finds: 'Fit.FixtureOne'.	self assertLoading: 'fitnesse.testutil.PassFixture'		finds: 'Fitnesse.Testutil.PassFixture'</body><body package="Fit-Tests">testStripNestedClassNames	self assertLoading: 'FixtureLoaderTest$FixtureOne' finds: 'Fit.FixtureOne'.	self assertLoading: 'fit.FixtureLoaderTest$TheThirdFixture'		finds: 'Fit.TheThirdFixture'</body></methods><methods><class-id>Fit.FitnesseFixtureLoaderTest</class-id> <category>Running</category><body package="Fit-Tests">setUp	fixtureLoader := FitnesseFixtureLoader new</body></methods><methods><class-id>Fit.FitnesseFixtureLoaderTest</class-id> <category>private</category><body package="Fit-Tests">assertLoading: aString finds: expected 	| fixture |	fixture := fixtureLoader load: aString.	self assert: fixture class fullName = expected</body></methods><methods><class-id>Fit.BindingTestFixture</class-id> <category>accessing</category><body package="Fit-Tests">intField	^intField</body></methods><methods><class-id>Fit.BindingTestFixture</class-id> <category>initialize-release</category><body package="Fit-Tests">initialize	super initialize.	intField := 0</body></methods><methods><class-id>Fit.ClassNameConversionTest</class-id> <category>tests</category><body package="Fit-Tests">testConvertFromJavaClassName	self assert: '' convertsTo: ''.	self assert: 'Foo' convertsTo: 'Foo'.	self assert: 'foo' convertsTo: 'foo'.	self assert: 'namespace.foo' convertsTo: 'Namespace.foo'.	self assert: 'eg.music.musicLibrary' convertsTo: 'Eg.Music.musicLibrary'</body><body package="Fit-Tests">testInnerClasses	self assert: 'allFiles$expand' convertsTo: 'expand'.	self assert: 'eg.AllFiles$Expand' convertsTo: 'Eg.Expand'</body></methods><methods><class-id>Fit.ClassNameConversionTest</class-id> <category>private</category><body package="Fit-Tests">assert: inputString convertsTo: expectedString	self		assert: (ClassNameConversion javaName: inputString) smalltalkName = expectedString</body></methods><methods><class-id>Fitnesse.Fixtures.ComplexAddFixture</class-id> <category>accessing</category><body package="Fit-Tests">a	^a</body><body package="Fit-Tests">b	^b</body></methods><methods><class-id>Fit.ExternalFileTest</class-id> <category>private</category><body package="Fit-Tests">runFile: file from: directory right: right wrong: wrong ignores: ignores exceptions: exceptions	| inputFile fixture runner outputFile inputDirectory outputDirectory |	inputDirectory := directory asFilename construct: 'input'.	outputDirectory := directory asFilename construct: 'output'.	outputDirectory exists ifFalse: [outputDirectory makeDirectory].	inputFile := inputDirectory construct: file , '.html'.	outputFile := outputDirectory construct: file , '.html'.	runner := FileRunner				runInput: inputFile				output: outputFile				withEncoding: #ms_cp_1252.	fixture := runner fixture.	self assert: right = fixture counts right.	self assert: wrong = fixture counts wrong.	self assert: ignores = fixture counts ignores.	self assert: exceptions = fixture counts exceptions</body></methods><methods><class-id>Fit.BindingTest</class-id> <category>tests</category><body package="Fit-Tests">testConstruction	self 		assert: (Binding createOn: fixture for: 'intMethod()') class = QueryBinding.	self 		assert: (Binding createOn: fixture for: 'intMethod?') class = QueryBinding.	self 		assert: (Binding createOn: fixture for: 'intMethod!') class = QueryBinding.	self 		assert: (Binding createOn: fixture for: 'intField') class = SetBinding.	self 		assert: (Binding createOn: fixture for: 'intField=') class = RecallBinding.	self 		assert: (Binding createOn: fixture for: '=intMethod()') class = SaveBinding.	self 		assert: (Binding createOn: fixture for: '=intField') class = SaveBinding</body><body package="Fit-Tests">testQueryBinding	| binding |	binding := Binding createOn: fixture for: 'intMethod()'.	binding doCell: cell1 fixture: fixture.	self assert: fixture counts wrong = 1.	fixture intField: 321.	binding doCell: cell2 fixture: fixture.	self assert: fixture counts right = 1</body><body package="Fit-Tests">testRecallBinding	| binding |	binding := Binding createOn: fixture for: 'intField='.	Fixture symbolAt: '123' put: '999'.	binding doCell: cell1 fixture: fixture.	self assert: fixture intField = 999.	binding doCell: cell3 fixture: fixture.	self fitAssert: cell3 text contains: 'No such symbol: abc'</body><body package="Fit-Tests">testRecallBindingSymbolTableText		| binding |	binding := Binding createOn: fixture for: 'intField='.	Fixture symbolAt: '123' put: '999'.	binding doCell: cell1 fixture: fixture.	self assert: cell1 text = '123 = 999'</body><body package="Fit-Tests">testRecallBindingWithNull	| binding |	binding := Binding createOn: fixture for: 'integerField='.	Fixture symbolAt: '123' put: nil.	binding doCell: cell1 fixture: fixture.	self assert: fixture integerMethod isNil</body><body package="Fit-Tests">testSaveBinding	| binding |	binding := Binding createOn: fixture for: '=intMethod()'.	binding doCell: cell1 fixture: fixture.	self assert: (Fixture symbolAt: '123') = '0'.	self fitAssert: cell1 text contains: '123 = 0'.	fixture intField: 999.	binding doCell: cell2 fixture: fixture.	self assert: (Fixture symbolAt: '321') = '999'</body><body package="Fit-Tests">testSaveBindingWithNull	| binding |	binding := Binding createOn: fixture for: '=integerMethod()'.	fixture integerField: nil.	binding doCell: cell1 fixture: fixture.	self assert: (Fixture symbolAt: '123') = 'null'.	self fitAssert: cell1 text contains: '123 = null'.	binding doCell: cell2 fixture: fixture.	self assert: (Fixture symbolAt: '321') = 'null'</body><body package="Fit-Tests">testSetBinding	| binding |	binding := Binding createOn: fixture for: 'intField'.	binding doCell: cell1 fixture: fixture.	self assert: fixture intField = 123.	binding doCell: cell2 fixture: fixture.	self assert: fixture intField = 321</body><body package="Fit-Tests">testSetBindingWithBlankCell	| binding |	binding := Binding createOn: fixture for: 'intField'.	fixture intField: 42.	binding doCell: cell4 fixture: fixture.	self fitAssert: cell4 text contains: '42'.	self assert: fixture intField = 42</body><body package="Fit-Tests">testUseOfGracefulNamingForFields	self checkForFieldBinding: 'intField' expected: true.	self checkForFieldBinding: 'int Field' expected: true.	self checkForFieldBinding: 'int field' expected: true.	self checkForFieldBinding: 'intfield' expected: false.	self checkForFieldBinding: 'Intfield' expected: false.	self checkForFieldBinding: 'IntField' expected: true</body><body package="Fit-Tests">testUseOfGracefulNamingForMethods	self checkForMethodBinding: 'intMethod()' expected: true.	self checkForMethodBinding: 'int Method?' expected: true.	self checkForMethodBinding: 'int method?' expected: true.	self checkForMethodBinding: 'intmethod?' expected: false.	self checkForMethodBinding: 'Intmethod?' expected: false.	self checkForMethodBinding: 'IntMethod?' expected: true</body></methods><methods><class-id>Fit.BindingTest</class-id> <category>private</category><body package="Fit-Tests">checkForFieldBinding: aString expected: aBoolean 	| binding |	[binding := Binding createOn: fixture for: aString] 		on: NoSuchFieldException		do: 			[:ex | 			self deny: aBoolean.			^self].	self assert: aBoolean.	self assert: (binding isKindOf: SetBinding).	self assert: binding adapter field name == #intField</body><body package="Fit-Tests">checkForMethodBinding: aString expected: aBoolean 	| binding |	[binding := Binding createOn: fixture for: aString] on: NoSuchMethodException		do: 			[:ex | 			self deny: aBoolean.			^self].	self assert: aBoolean.	self assert: (binding isKindOf: QueryBinding).	self assert: binding adapter method == #intMethod</body></methods><methods><class-id>Fit.BindingTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp	| table |	Session startFitnesse.	fixture := BindingTestFixture new.	table := Parse 				input: '&lt;table&gt;&lt;tr&gt;&lt;td&gt;123&lt;/td&gt;&lt;td&gt;321&lt;/td&gt;&lt;td&gt;abc&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	cell1 := table parts parts.	cell2 := table parts parts more.	cell3 := table parts parts more more.	cell4 := table parts parts more more more</body><body package="Fit-Tests">tearDown	Session end</body></methods><methods><class-id>Fitnesse.Testutil.FailFixture</class-id> <category>enumerating</category><body package="Fit-Tests">doTable: parse 	self wrong: parse</body></methods><methods><class-id>Fit.ColumnFixtureTest</class-id> <category>tests</category><body package="Fit-Tests">testBindColumnToField	| table tableHead field |	table := Parse input: '&lt;table&gt;&lt;tr&gt;&lt;td&gt;field&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	tableHead := table parts parts.	fixture bind: tableHead.	self assert: fixture columnBindings first notNil.	field := fixture columnBindings first adapter field.	self assert: field notNil.	self assert: field name == #field</body><body package="Fit-Tests">testBindColumnToFieldSymbol	| table field rows binding |	Fixture symbolAt: 'Symbol' put: '42'.	table := Parse 				input: '&lt;table&gt;&lt;tr&gt;&lt;td&gt;field=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Symbol&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	rows := table parts.	fixture doRows: rows.	binding := fixture columnBindings first.	self assert: binding notNil.	self assert: binding class == RecallBinding.	field := binding adapter field.	self assert: field notNil.	self assert: field name == #field.	self assert: fixture field = 42</body><body package="Fit-Tests">testBindColumnToMethod	| methodSpecifiers resultingMethodName |	methodSpecifiers := #('method()' 'method?' 'method!' 'string method()' 'string method?' 'string method!').	resultingMethodName := #('method' 'method' 'method' 'stringMethod' 'stringMethod' 'stringMethod').	methodSpecifiers with: resultingMethodName		do: 			[:specifier :result | 			| table tableHead method |			table := Parse input: '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , specifier , '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.			tableHead := table parts parts.			fixture bind: tableHead.			self assert: fixture columnBindings first notNil.			method := fixture columnBindings first adapter method.			self assert: method notNil.			self assert: method asString = result]</body><body package="Fit-Tests">testBindColumnToMethodSymbol	| table method rows binding |	Fixture symbolAt: 'Symbol' put: 42.	table := Parse 				input: '&lt;table&gt;&lt;tr&gt;&lt;td&gt;=method?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MethodSymbol&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	rows := table parts.	fixture doRows: rows.	binding := fixture columnBindings first.	self assert: binding notNil.	self assert: binding class == SaveBinding.	method := binding adapter method.	self assert: method asString = 'method'.	self assert: (Fixture symbolAt: 'MethodSymbol') = '86'</body><body package="Fit-Tests">testGracefulColumnNames	| table tableHead field |	table := Parse input: '&lt;table&gt;&lt;tr&gt;&lt;td&gt;string field&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	tableHead := table parts parts.	fixture bind: tableHead.	self assert: fixture columnBindings first notNil.	field := fixture columnBindings first adapter field.	self assert: field notNil.	self assert: field name == #stringField</body></methods><methods><class-id>Fit.ColumnFixtureTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp	Session startFitnesse.	fixture := TestColumnFixture new</body><body package="Fit-Tests">tearDown	Session end</body></methods><methods><class-id>Fit.TestFixture</class-id> <category>accessing</category><body package="Fit-Tests">ch	^ch</body><body package="Fit-Tests">name	^name</body><body package="Fit-Tests">point		^point</body><body package="Fit-Tests">sampleArray	^sampleArray</body><body package="Fit-Tests">sampleByte	^sampleByte</body><body package="Fit-Tests">sampleDate	^sampleDate</body><body package="Fit-Tests">sampleFloat	^sampleFloat</body><body package="Fit-Tests">sampleInteger	^sampleInteger</body><body package="Fit-Tests">sampleShort	^sampleShort</body></methods><methods><class-id>Fitnesse.Testutil.ObjectTranslatePoint</class-id> <category>initialize-release</category><body package="Fit-Tests">initialize	super initialize.	TypeAdapter registerParseDelegateObject: ObjectDelegatePointParser new		forClass: Point</body></methods><methods><class-id>Fit.TypeAdapterTest</class-id> <category>tests</category><body package="Fit-Tests">testBooleanTypeAdapter	self assertBooleanTypeAdapterParses: 'true' as: true.	self assertBooleanTypeAdapterParses: 'yes' as: true.	self assertBooleanTypeAdapterParses: 'y' as: true.	self assertBooleanTypeAdapterParses: '+' as: true.	self assertBooleanTypeAdapterParses: '1' as: true.	self assertBooleanTypeAdapterParses: 'True' as: true.	self assertBooleanTypeAdapterParses: 'YES' as: true.	self assertBooleanTypeAdapterParses: 'Y' as: true.	self assertBooleanTypeAdapterParses: 'N' as: false.	self assertBooleanTypeAdapterParses: 'No' as: false.	self assertBooleanTypeAdapterParses: 'false' as: false.	self assertBooleanTypeAdapterParses: '0' as: false.	self assertBooleanTypeAdapterParses: '-' as: false.	self assertBooleanTypeAdapterParses: 'whatever' as: false</body><body package="Fit-Tests">testNullAndBlankStrings	| adapter |	adapter := StringTypeAdapter new.	self assert: (adapter parse: 'null') isNil.	self assert: (adapter parse: 'blank') = ''.	self assert: (adapter toString: nil) = 'null'.	self assert: (adapter toString: '') = 'blank'</body><body package="Fit-Tests">testObjectWithParseMethod	| adapter result |	adapter := TypeAdapter forClass: HasParseMethod.	result := adapter parse: 'target'.	self assert: result = 'target found'</body><body package="Fit-Tests">testObjectWithoutParseMethod	| adapter |	adapter := TypeAdapter forClass: HasNoParseMethod.	self should: [adapter parse: 'target'] raise: CouldNotParseException</body><body package="Fit-Tests">testParseDelegateClassMethod	"This is a different test than in Java because we don't have SimpleDateFormat"	| formatted adapter |	formatted := '(26, 42)'.	TypeAdapter registerParseDelegateClass: PointReader forClass: Point.	adapter := TypeAdapter on: fixture field: (Field named: 'point').	adapter set: (adapter parse: formatted).	self assert: fixture point = (26 @ 42)</body><body package="Fit-Tests">testParseDelegateClassMustHaveParseMethod	self		should: [TypeAdapter registerParseDelegateClass: BadDelegate forClass: Class]		raise: Error</body><body package="Fit-Tests">testParseDelegateObjectMethod	"This is a different test than in Java because we don't have SimpleDateFormat"	| formatted adapter |	formatted := '(26, 42)'.	TypeAdapter registerParseDelegateObject: PointReader new forClass: Point.	adapter := TypeAdapter on: fixture field: (Field named: 'point').	adapter set: (adapter parse: formatted).	self assert: fixture point = (26 @ 42)</body><body package="Fit-Tests">testParseDelegateObjectMustHaveParseMethod	self should: 			[TypeAdapter registerParseDelegateObject: BadDelegate new forClass: Class]		raise: Error</body><body package="Fit-Tests">testScientificDouble	| adapter result |	adapter := TypeAdapter forClass: ScientificDouble.	result := adapter parse: '13.4'.	self assert: (result isKindOf: ScientificDouble).	self assert: result = (ScientificDouble value: 13.4)</body><body package="Fit-Tests">testSymbols	| adapter |	adapter := Symbol fitTypeAdapter.	self assert: (adapter parse: 'null') == #null.	self assert: (adapter parse: 'blank') == #blank.	self assert: (adapter parse: 'some symbol') == #'some symbol'.	self assert: (adapter toString: #aSymbol) = 'aSymbol'.	self assert: (adapter toString: #'some symbol') = 'some symbol'</body><body package="Fit-Tests">testTypeAdapter	| adapter date |	adapter := TypeAdapter on: fixture field: (Field named: 'sampleInteger').	adapter set: (adapter parse: '123456').	self assert: 123456 = fixture sampleInteger.	self assert: '-234567' = (adapter parse: '-234567') printString.	adapter set: (adapter parse: '54321').	self assert: '54321' = fixture sampleInteger printString.	adapter := TypeAdapter on: fixture method: #pi.	"---self assert: 3.14159 = a invoke.---"	self assert: (Double fromNumber: 3.14159862) = adapter invoke.	adapter := TypeAdapter on: fixture field: (Field named: 'ch').	adapter set: (adapter parse: 'abc').	self assert: $a = fixture ch.	adapter := TypeAdapter on: fixture field: (Field named: 'name').	adapter set: (adapter parse: 'xyzzy').	self assert: 'xyzzy' = fixture name.	adapter := TypeAdapter on: fixture field: (Field named: 'sampleFloat').	adapter set: (adapter parse: '6.02e23').	self assert: 6.02e23 = fixture sampleFloat.	adapter := TypeAdapter on: fixture field: (Field named: 'sampleArray').	adapter set: (adapter parse: '1,2,3').	self assert: 1 = (fixture sampleArray at: 1).	self assert: 2 = (fixture sampleArray at: 2).	self assert: 3 = (fixture sampleArray at: 3).	self assert: '1, 2, 3' = (adapter toString: fixture sampleArray).	self assert: (adapter equals: #(1 2 3) and: fixture sampleArray).	adapter := TypeAdapter on: fixture field: (Field named: 'sampleDate').	date := Date newDay: 26 monthNumber: 4 year: 1949.	adapter set: (adapter parse: date longPrintString).	self assert: date = fixture sampleDate.	adapter := TypeAdapter on: fixture field: (Field named: 'sampleByte').	adapter set: (adapter parse: '123').	self assert: 123 = fixture sampleByte.	adapter := TypeAdapter on: fixture field: (Field named: 'sampleShort').	adapter set: (adapter parse: '12345').	self assert: 12345 = fixture sampleShort</body></methods><methods><class-id>Fit.TypeAdapterTest</class-id> <category>private</category><body package="Fit-Tests">assertBooleanTypeAdapterParses: aString as: aBoolean 	| booleanAdapter result |	booleanAdapter := Boolean fitTypeAdapter.	result := booleanAdapter parse: aString.	self assert: result = aBoolean</body></methods><methods><class-id>Fit.TypeAdapterTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp		fixture := TestFixture new</body><body package="Fit-Tests">tearDown	TypeAdapter clearParseDelegates</body></methods><methods><class-id>Fit.ParseTest</class-id> <category>tests</category><body package="Fit-Tests">testFindNestedEnd	self 		assert: (Parse 				findMatchingEndTagIn: '&lt;/t&gt;'				from: 1				tag: 't'				startingAt: 1) = 1.	self 		assert: (Parse 				findMatchingEndTagIn: '&lt;t&gt;&lt;/t&gt;&lt;/t&gt;'				from: 1				tag: 't'				startingAt: 1) = 8.	self 		assert: (Parse 				findMatchingEndTagIn: '&lt;t&gt;&lt;/t&gt;&lt;t&gt;&lt;/t&gt;&lt;/t&gt;'				from: 1				tag: 't'				startingAt: 1) = 15</body><body package="Fit-Tests">testIndexing	| p |	p := Parse 		input: 'leader&lt;table&gt;&lt;tr&gt;&lt;td&gt;one&lt;/td&gt;&lt;td&gt;two&lt;/td&gt;&lt;td&gt;three&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;four&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;trailer'.	self assert: 'one' = (p 						at: 1						at: 1						at: 1) body.	self assert: 'two' = (p 						at: 1						at: 1						at: 2) body.	self assert: 'three' = (p 						at: 1						at: 1						at: 3) body.	self assert: 'three' = (p 						at: 1						at: 1						at: 4) body.	self assert: 'three' = (p 						at: 1						at: 1						at: 5) body.	self assert: 'four' = (p 						at: 1						at: 2						at: 1) body.	self assert: 'four' = (p 						at: 1						at: 2						at: 2) body.	self assert: 'four' = (p 						at: 1						at: 3						at: 1) body.	self assert: 1 = p size.	self assert: 2 = p parts size.	self assert: 3 = p parts parts size.	self assert: 'one' = p leaf body.	self assert: 'four' = p parts last leaf body</body><body package="Fit-Tests">testIterating	| p |	p := Parse 				input: 'leader&lt;table&gt;&lt;tr&gt;&lt;td&gt;one&lt;/td&gt;&lt;td&gt;two&lt;/td&gt;&lt;td&gt;three&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;trailer'.	self assert: 'one' = p parts parts body.	self assert: 'two' = p parts parts more body.	self assert: 'three' = p parts parts more more body</body><body package="Fit-Tests">testNestedTables	| nestedTable parse sub |	nestedTable := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;embedded&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	parse := Parse input: '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , nestedTable 						, '&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;two&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;three&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;trailer'.	sub := (parse 				at: 1				at: 1				at: 1) parts.	self assert: parse size = 1.	self assert: parse parts size = 3.	self assert: (sub 				at: 1				at: 1				at: 1) size = 1.	self assert: (sub 				at: 1				at: 1				at: 1) body = 'embedded'.	self assert: sub size = 1.	self assert: sub parts size = 1.	self assert: sub parts parts size = 1.	self assert: (parse 				at: 1				at: 2				at: 1) body = 'two'.	self assert: (parse 				at: 1				at: 3				at: 1) body = 'three'.	self assert: (parse 				at: 1				at: 2				at: 1) size = 1.	self assert: (parse 				at: 1				at: 3				at: 1) size = 1</body><body package="Fit-Tests">testNestedTables2	| nestedTable parse sub nestedTable2 subSub |	nestedTable := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;embedded&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	nestedTable2 := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , nestedTable 				, '&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;two&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	parse := Parse 				input: '&lt;table&gt;&lt;tr&gt;&lt;td&gt;one&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;' , nestedTable2 						, '&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;three&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;trailer'.	self assert: parse size = 1.	self assert: parse parts size = 3.	self assert: (parse 				at: 1				at: 1				at: 1) body = 'one'.	self assert: (parse 				at: 1				at: 3				at: 1) body = 'three'.	self assert: (parse 				at: 1				at: 1				at: 1) size = 1.	self assert: (parse 				at: 1				at: 3				at: 1) size = 1.	sub := (parse 				at: 1				at: 2				at: 1) parts.	self assert: sub parts size = 2.	self assert: (sub 				at: 1				at: 1				at: 1) size = 1.	subSub := (sub 				at: 1				at: 1				at: 1) parts.	self assert: (subSub 				at: 1				at: 1				at: 1) body = 'embedded'.	self assert: (subSub 				at: 1				at: 1				at: 1) size = 1.	self assert: (sub 				at: 1				at: 2				at: 1) body = 'two'.	self assert: (sub 				at: 1				at: 2				at: 1) size = 1</body><body package="Fit-Tests">testParseException		[Parse		input: 'leader&lt;table&gt;&lt;tr&gt;&lt;th&gt;one&lt;/th&gt;&lt;th&gt;two&lt;/th&gt;&lt;th&gt;three&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;four&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;trailer'.	self signalFailure: 'expected exception not thrown']			on: ParseError			do: 				[:ex |				self assert: 18 = ex errorOffset.				self assert: 'Can''t find tag: td' = ex errorString]</body><body package="Fit-Tests">testParsing	| p |	p := Parse input: 'leader&lt;Table foo=2&gt;body&lt;/table&gt;trailer' tags: #('table').	self assert: 'leader' = p leader.	self assert: '&lt;Table foo=2&gt;' = p tag.	self assert: 'body' = p body.	self assert: 'trailer' = p trailer</body><body package="Fit-Tests">testRecursing	| p |	p := Parse input:  'leader&lt;table&gt;&lt;TR&gt;&lt;Td&gt;body&lt;/tD&gt;&lt;/TR&gt;&lt;/table&gt;trailer'.	self assert: nil = p body.	self assert: nil = p parts body.	self assert: 'body' = p parts parts body</body><body package="Fit-Tests">testText	| tags p nbsp |	Session beFitWhile: 			[tags := #('td').			nbsp := String with: (Character value: 16r00a0).			p := Parse input: '&lt;td&gt;a&amp;lt;b&lt;/td&gt;' tags: tags.			self assert: 'a&amp;lt;b' = p body.			self assert: 'a&lt;b' = p text.			p := Parse input: '&lt;td&gt;	a&amp;gt;b&amp;nbsp;&amp;amp;&amp;nbsp;b&gt;c &amp;&amp;&amp;lt;&lt;/td&gt;' tags: tags.			self assert: 'a&gt;b &amp; b&gt;c &amp;&amp;&lt;' = p text.			p := Parse input: '&lt;td&gt;	a&amp;gt;b&amp;nbsp;&amp;amp;&amp;nbsp;b&gt;c &amp;&amp;lt;&lt;/td&gt;' tags: tags.			self assert: 'a&gt;b &amp; b&gt;c &amp;&lt;' = p text.			p := Parse						input: '&lt;TD&gt;&lt;P&gt;&lt;FONT FACE=\"Arial\" SIZE=2&gt;GroupTestFixture&lt;/FONT&gt;&lt;/TD&gt;'						tags: tags.			self assert: 'GroupTestFixture' = p text.			self assert: '' = (Parse htmlToText: '&amp;nbsp;').			self assert: 'a b' = (Parse htmlToText: 'a &lt;tag /&gt; b').			self assert: 'a' = (Parse htmlToText: 'a &amp;nbsp;').			self assert: '&amp;nbsp;' = (Parse htmlToText: '&amp;amp;nbsp;').			self assert: '1     2' = (Parse htmlToText: '1 &amp;nbsp; &amp;nbsp; 2').			self assert: '1     2'						= (Parse htmlToText: '1 ' , nbsp , nbsp , nbsp , nbsp , '2').			self assert: 'a' = (Parse htmlToText: '  &lt;tag /&gt;a').			self assert: (self withLFs: 'a\b') = (Parse htmlToText: 'a&lt;br /&gt;b').			self assert: 'ab' = (Parse htmlToText: '&lt;font size=+1&gt;a&lt;/font&gt;b').			self assert: 'ab' = (Parse htmlToText: 'a&lt;font size=+1&gt;b&lt;/font&gt;').			self assert: 'a&lt;b' = (Parse htmlToText: 'a&lt;b').			self assert: (self withLFs: 'a\b\c\d')						= (Parse htmlToText: 'a&lt;br&gt;b&lt;br/&gt;c&lt;  br   /   &gt;d').			self assert: (self withLFs: 'a\b') = (Parse htmlToText: 'a&lt;/p&gt;&lt;p&gt;b').			self				assert: (self withLFs: 'a\b') = (Parse htmlToText: 'a&lt; / p &gt;   &lt;   p  &gt;b')]</body><body package="Fit-Tests">testUnescape	self assert: 'a&lt;b' = (Parse unescape: 'a&amp;lt;b').	self 		assert: 'a&gt;b &amp; b&gt;c &amp;&amp;' = (Parse unescape: 'a&amp;gt;b&amp;nbsp;&amp;amp;&amp;nbsp;b&gt;c &amp;&amp;').	self assert: '&amp;amp;&amp;amp;' = (Parse unescape: '&amp;amp;amp;&amp;amp;amp;').	self 		assert: 'a&gt;b &amp; b&gt;c &amp;&amp;' = (Parse unescape: 'a&amp;gt;b&amp;nbsp;&amp;amp;&amp;nbsp;b&gt;c &amp;&amp;').	self assert: '""''' 				= (Parse unescape: (String 								with: (Character value: 8r223)								with: (Character value: 8r224)								with: $')).	self assert: '""''''' 				= (Parse unescape: (String 								with: (Character value: 16r201c)								with: (Character value: 16r201d)								with: (Character value: 16r2018)								with: (Character value: 16r2019)))</body><body package="Fit-Tests">testUnformat	self assert: 'ab' = (Parse removeNonBreakTags: '&lt;font size=+1&gt;a&lt;/font&gt;b').	self assert: 'ab' = (Parse removeNonBreakTags: 'a&lt;font size=+1&gt;b&lt;/font&gt;').	self assert: 'a&lt;b' = (Parse removeNonBreakTags: 'a&lt;b')</body><body package="Fit-Tests">testWhitespaceIsCondensed	self assert: 'a b' = (Parse condenseWhitespace: ' a  b  ').	self 		assert: 'a b' = (Parse condenseWhitespace: ' a  &lt;n&gt;&lt;t&gt;b  ' expandMacros).	self assert: '' = (Parse condenseWhitespace: ' ').	self assert: '' = (Parse condenseWhitespace: '  ').	self assert: '' = (Parse condenseWhitespace: '   ').	self assert: '' 				= (Parse condenseWhitespace: (String with: (Character value: 160)))</body></methods><methods><class-id>Fit.ParseTest</class-id> <category>private</category><body package="Fit-Tests">withLFs: aString 	^aString copy replaceAll: $\ with: Character lf</body></methods><methods><class-id>Fit.SimpleRowFixture</class-id> <category>accessing</category><body package="Fit-Tests">targetClass	^SimpleBusinessObject</body></methods><methods><class-id>Fit.SimpleRowFixture</class-id> <category>abstracts</category><body package="Fit-Tests">query	^Array new</body></methods><methods><class-id>Fit.FriendlyErrorTest</class-id> <category>tests</category><body package="Fit-Tests">testCantFindFixture	| table page fixtureName |	table := #(#('NonExistentFixture')).	page := FixtureTest executeFixture: table.	fixtureName := (page 				at: 1				at: 1				at: 1) body.	self fitAssert: fixtureName		contains: 'Could not find fixture: NonExistentFixture.'</body><body package="Fit-Tests">testExceptionInMethod	| table page colTwoResult |	table := #(#('Fitnesse.Fixtures.ColumnFixtureTestFixture') #('input' 'exception?') #('1' 'true')).	page := FixtureTest executeFixture: table.	colTwoResult := (page 				at: 1				at: 3				at: 2) body.	self fitAssert: colTwoResult contains: 'I thowed up'</body><body package="Fit-Tests">testNoSuchMethod	| table page fixtureName |	table := #(#('Fitnesse.Fixtures.ColumnFixtureTestFixture') #('no such method?')).	page := FixtureTest executeFixture: table.	fixtureName := (page 				at: 1				at: 2				at: 1) body.	self fitAssert: fixtureName		contains: 'Could not find method: no such method?.'</body><body package="Fit-Tests">testParseFailure	| table page colTwoResult |	table := #(#('Fitnesse.Fixtures.ColumnFixtureTestFixture') #('input' 'output?') #('1' 'alpha')).	page := FixtureTest executeFixture: table.	colTwoResult := (page at: 1 at: 3 at: 2) body.	self fitAssert: colTwoResult		contains: 'Could not parse: alpha, expected type: Number'</body></methods><methods><class-id>Fit.FriendlyErrorTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp	Session startFitnesse</body><body package="Fit-Tests">tearDown	Session end</body></methods><methods><class-id>Fit.TestClassForActionFixture</class-id> <category>initialize-release</category><body package="Fit-Tests">initialize	super initialize.	playWasPressed := false</body></methods><methods><class-id>Fit.TestClassForActionFixture</class-id> <category>accessing</category><body package="Fit-Tests">library	^library</body><body package="Fit-Tests">libraryPath	^libraryPath</body></methods><methods><class-id>Fit.TestClassForActionFixture</class-id> <category>initialize</category><body package="Fit-Tests">init	playWasPressed := false</body></methods><methods><class-id>Fit.TestClassForActionFixture</class-id> <category>operations</category><body package="Fit-Tests">play	playWasPressed := true</body><body package="Fit-Tests">playWasPressed	^playWasPressed</body></methods><methods><class-id>Fit.CannotLoadFixtureTest</class-id> <category>private</category><body package="Fit-Tests">assertCannotLoadFixture: aString because: aClass	self should: [fixtureLoader load: aString] raise: aClass</body><body package="Fit-Tests">assertCannotLoadFixtureAfterChoppingOffFixture: aString because: aClass	self should: [fixtureLoader load: (self chopOffFixture: aString)]		raise: aClass</body><body package="Fit-Tests">chopOffFixture: aString 	^aString copyFrom: 1 to: aString size - 'Fixture' size</body></methods><methods><class-id>Fit.CannotLoadFixtureTest</class-id> <category>tests</category><body package="Fit-Tests">testFixtureClassDoesNotExtendFixture	self assertCannotLoadFixture: WouldBeFixture fullName		because: ClassIsNotFixtureException</body><body package="Fit-Tests">testFixtureClassNotEndingInFixtureDoesNotExtendFixture	self 		assertCannotLoadFixtureAfterChoppingOffFixture: WouldBeFixture fullName		because: ClassIsNotFixtureException</body><body package="Fit-Tests">testFixtureClassNotEndingInFixtureDoesntImplementNew	self 		assertCannotLoadFixtureAfterChoppingOffFixture: DoesntImplementNewFixture 				fullName		because: ShouldNotImplement</body><body package="Fit-Tests">testFixtureDoesntImplementNew	self assertCannotLoadFixture: DoesntImplementNewFixture fullName		because: ShouldNotImplement</body><body package="Fit-Tests">testFixtureNameNotFound	self assertCannotLoadFixture: 'BlahBlahBlah' because: NoSuchFixtureException</body></methods><methods><class-id>Fit.CannotLoadFixtureTest</class-id> <category>Running</category><body package="Fit-Tests">setUp	fixtureLoader := FitnesseFixtureLoader new</body></methods><methods><class-id>Fit.FitServerInImageTest</class-id> <category>tests</category><body package="Fit-Tests">testReadArgumentsFrom	| s |	s := '     -v          localhost    8100      3      ' 				, (String with: Character cr).	self assert: (DevelopmentFitServer new readArgumentsFromString: s) asArray 				= #('-v' 'localhost' '8100' '3')</body></methods><methods><class-id>Fit.Decorator.Performance.TimeRangeTest</class-id> <category>private</category><body package="Fit-Tests">decoratorHTMLRow	^'&lt;tr&gt;&lt;td&gt;' , TimeRange shortName		, '&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;milliseconds min and max&lt;/td&gt;&lt;td&gt;999999999&lt;/td&gt;&lt;td&gt;milliseconds&lt;/td&gt;&lt;/tr&gt;'</body><body package="Fit-Tests">numberOfAssertionsOnDecorator		^2</body></methods><methods><class-id>Fit.Decorator.Performance.TimeRangeTest</class-id> <category>tests</category><body package="Fit-Tests">testSetupDecoratorMustRaiseInvalidInputExceptionIfTimeRangeIsNotSpecified		self		should: [decorator setupDecorator: #('10')]		raise: InvalidInputException</body><body package="Fit-Tests">testSetupDecoratorShouldAddTimeRangeToSummary		decorator setupDecorator: #('10' '80').	self		assert: (decorator summary at: TimeRange minTimeKey) = 10;		assert: (decorator summary at: TimeRange maxTimeKey) = 80</body><body package="Fit-Tests">testShouldFailIfActualExecutionTimeIsGreaterThanMaxTime		| fitPage expectedCounts |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , TimeRange shortName ,			'&lt;/td&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;milliseconds min and max&lt;/td&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;milliseconds&lt;/td&gt;&lt;/tr&gt;'		, '&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12.6&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4.2&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	expectedCounts := Counts from: #(4 1 0 0).	self		executeFixture: (TimeRange stopWatch: MockTimer new)		table: fitPage		assertCounts: expectedCounts</body><body package="Fit-Tests">testShouldFailIfActualExecutionTimeIsLessThanMinTime		| fitPage expectedCounts |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , TimeRange shortName ,			'&lt;/td&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;milliseconds min and max&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;milliseconds&lt;/td&gt;&lt;/tr&gt;'		, '&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12.6&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4.2&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	expectedCounts := Counts from: #(4 1 0 0).	self		executeFixture: (TimeRange stopWatch: MockTimer new)		table: fitPage		assertCounts: expectedCounts</body><body package="Fit-Tests">testShouldPassIfActualExecutionTimeIsEqualToMaxTime		| fitPage expectedCounts |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , TimeRange shortName ,			'&lt;/td&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;milliseconds min and max&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;milliseconds&lt;/td&gt;&lt;/tr&gt;'		, '&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12.6&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4.2&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	expectedCounts := Counts from: #(5 0 0 0).	self		executeFixture: (TimeRange stopWatch: MockTimer new)		table: fitPage		assertCounts: expectedCounts</body><body package="Fit-Tests">testShouldPassIfActualExecutionTimeIsEqualToMinTime		| fitPage expectedCounts |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , TimeRange shortName ,			'&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;milliseconds min and max&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;milliseconds&lt;/td&gt;&lt;/tr&gt;'		, '&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12.6&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4.2&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	expectedCounts := Counts from: #(5 0 0 0).	self		executeFixture: (TimeRange stopWatch: MockTimer new)		table: fitPage		assertCounts: expectedCounts</body><body package="Fit-Tests">testShouldPassIfActualExecutionTimeIsWithinTheRange		| fitPage expectedCounts |	fitPage := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;' , TimeRange shortName ,			'&lt;/td&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;milliseconds min and max&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;milliseconds&lt;/td&gt;&lt;/tr&gt;'		, '&lt;tr&gt;&lt;td&gt;eg.Division&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;numerator&lt;/td&gt;&lt;td&gt;denominator&lt;/td&gt;&lt;td&gt;quotient()&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;12.6&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4.2&lt;/td&gt;&lt;/tr&gt;' ,			'&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	expectedCounts := Counts from: #(5 0 0 0).	self		executeFixture: (TimeRange stopWatch: MockTimer new)		table: fitPage		assertCounts: expectedCounts</body></methods><methods><class-id>Fit.Decorator.Performance.TimeRangeTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp		super setUp.	decorator := TimeRange new</body></methods><methods><class-id>Fit.FixtureTest</class-id> <category>tests</category><body package="Fit-Tests">testCanChangeFriendlyExceptions	| fixture cell |	fixture := AllExceptionsAreFriendlyFixture new.	cell := Parse td: ''.	fixture mark: cell exception: (Error new messageText: 'gobble gobble').	self fitAssert: cell body contains: 'gobble gobble'.	self 		assert: (cell body indexOfSubCollection: 'exception:of:' startingAt: 1) = 0</body><body package="Fit-Tests">testClearingSymbols	Fixture symbolAt: 'blah' put: 'blah'.	self assert: (Fixture symbolAt: 'blah') = 'blah'.	Fixture clearSymbols.	self assert: (Fixture symbolAt: 'blah') isNil</body><body package="Fit-Tests">testFixtureArguments	| prefix suffix f table args |	prefix := '&lt;table&gt;&lt;tr&gt;&lt;td&gt;Fit.Fixture&lt;/td&gt;'.	suffix := '&lt;/tr&gt;&lt;/table&gt;'.	f := Fixture new.	table := Parse input: prefix , '&lt;td&gt;1&lt;/td&gt;' , suffix.	f extractArgumentsForTable: table.	args := f arguments.	self assert: args size = 1.	self assert: args first = '1'.	table := Parse input: prefix , suffix.	f extractArgumentsForTable: table.	args := f arguments.	self assert: args isEmpty.	table := Parse input: prefix , '&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;' , suffix.	f extractArgumentsForTable: table.	args := f arguments.	self assert: args size = 2.	self assert: args first = '1'.	self assert: args last = '2'</body><body package="Fit-Tests">testRelationalMatching	| table page colTwoResult colTwoTag |	table := #(#('Fitnesse.Fixtures.ColumnFixtureTestFixture') #('input' 'output?') #('1' '_&gt;0')).	page := self executeFixture: table.	colTwoResult := (page 				at: 1				at: 3				at: 2) body.	self fitAssert: colTwoResult contains: '&lt;b&gt;1&lt;/b&gt;&gt;0'.	colTwoTag := (page 				at: 1				at: 3				at: 2) tag.	self fitAssert: colTwoTag contains: 'pass'</body></methods><methods><class-id>Fit.FixtureTest</class-id> <category>private</category><body package="Fit-Tests">executeFixture: table 	^self class executeFixture: table</body></methods><methods><class-id>Fit.FixtureTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp	Session startFitnesse</body><body package="Fit-Tests">tearDown	Session end</body></methods><methods><class-id>Fit.FixtureTest class</class-id> <category>utility</category><body package="Fit-Tests">executeFixture: table 	| pageString page fixture |	pageString := self makeFixtureTable: table.	page := Parse input: pageString.	fixture := Fixture new.	fixture doTables: page.	^page</body></methods><methods><class-id>Fit.FixtureTest class</class-id> <category>private</category><body package="Fit-Tests">makeFixtureTable: table 	| ws |	ws := WriteStream on: String new.	ws		nextPutAll: '&lt;table&gt;';		cr.	table do: 			[:row | 			ws nextPutAll: '  &lt;tr&gt;'.			row do: 					[:cell | 					ws						nextPutAll: '&lt;td&gt;';						nextPutAll: cell;						nextPutAll: '&lt;/td&gt;'].			ws				nextPutAll: '&lt;/tr&gt;';				cr].	ws		nextPutAll: '&lt;/table&gt;';		cr.	^ws contents</body></methods><methods><class-id>Fit.MethodSignatureTest</class-id> <category>tests</category><body package="Fit-Tests">testConvertsClassesToTypeAdapters	self assert: ((MethodSignature with: Number) parameterAdapterAt: 1) type 				== Number.	self 		assert: (MethodSignature returning: String) resultAdapter type == String</body><body package="Fit-Tests">testKeywordSelectorMustHaveEnoughParameterTypes	self should: 			[MethodSignature				validateSignature: (MethodSignature with: String with: Number)				forSelector: #a:b:c:]		raise: InvalidSignature</body><body package="Fit-Tests">testKeywordSelectorMustNotHaveTooManyParameterTypes	self should: 			[MethodSignature				validateSignature: (MethodSignature with: String with: Number)				forSelector: #a:]		raise: InvalidSignature</body><body package="Fit-Tests">testLeavesNilReturnTypeAlone	self assert: (MethodSignature returning: nil) resultAdapter isNil</body><body package="Fit-Tests">testLeavesTypeAdaptersAlone	| number string |	number := Number fitTypeAdapter.	string := StringTypeAdapter new.	self 		assert: ((MethodSignature with: number) parameterAdapterAt: 1) == number.	self assert: (MethodSignature returning: string) resultAdapter == string</body><body package="Fit-Tests">testUnarySelectorMustHaveResultType	self should: 			[MethodSignature validateSignature: MethodSignature new forSelector: #any]		raise: InvalidSignature</body><body package="Fit-Tests">testUnarySelectorMustNotHaveParameterTypes	self should: 			[MethodSignature				validateSignature: (MethodSignature with: String returning: Object)				forSelector: #any]		raise: InvalidSignature</body><body package="Fit-Tests">testValidKeywordSelector	self shouldnt: 			[MethodSignature validateSignature: (MethodSignature						with: String						with: Number						returning: Object)				forSelector: #a:b:]		raise: Error</body><body package="Fit-Tests">testValidUnarySelector	self shouldnt: 			[MethodSignature validateSignature: (MethodSignature returning: Object)				forSelector: #any]		raise: Error</body></methods><methods><class-id>Fit.Decorator.DecoratorTestFixture</class-id> <category>enumerating</category><body package="Fit-Tests">doTable: aParse		summary		at: self class tableContentsKey		put: (Table fromParse: aParse) asString</body></methods><methods><class-id>Fit.Decorator.DecoratorTestFixture class</class-id> <category>constants</category><body package="Fit-Tests">tableContentsKey		^'tableContents'</body></methods><methods><class-id>Fit.RowFixtureTest</class-id> <category>tests</category><body package="Fit-Tests">testBindColumnToField	| fixture table tableHead field binding |	fixture := SimpleRowFixture new.	table := Parse input: '&lt;table&gt;&lt;tr&gt;&lt;td&gt;field&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'.	tableHead := table parts parts.	fixture bind: tableHead.	binding := fixture columnBindings first.	self assert: binding notNil.	field := binding adapter field.	self assert: field notNil.	self assert: field name == #field.	self assert: binding adapter type == Number</body><body package="Fit-Tests">testMatch	| fixture arrayAdapter computed expected binding |	fixture := TestRowFixture new.	arrayAdapter := TypeAdapter on: fixture method: #strs.	binding := QueryBinding new adapter: arrayAdapter.	fixture columnBindings: (Array with: binding).	computed := OrderedCollection with: (BusinessObject strings: #('1')).	expected := OrderedCollection with: (Parse trWithCells: (Parse td: '1')).	fixture 		match: expected		against: computed		inColumn: 1.	self assert: 1 = fixture counts right.	self assert: 0 = fixture counts exceptions.	self assert: 0 = fixture missing size.	self assert: 0 = fixture surplus size</body></methods><methods><class-id>Fit.RowFixtureTest</class-id> <category>initialize-release</category><body package="Fit-Tests">setUp	Session startFit</body><body package="Fit-Tests">tearDown	Session end</body></methods><methods><class-id>Fit.PackageNameConversionTest</class-id> <category>private</category><body package="Fit-Tests">assert: inputString convertsTo: expectedString	self assert: (PackageNameConversion javaName: inputString) smalltalkName				= expectedString</body></methods><methods><class-id>Fit.PackageNameConversionTest</class-id> <category>tests</category><body package="Fit-Tests">testConvertFromJavaPackageName	self assert: '' convertsTo: ''.	self assert: 'Foo' convertsTo: 'Foo'.	self assert: 'foo' convertsTo: 'Foo'.	self assert: 'namespace.foo' convertsTo: 'Namespace.Foo'.	self assert: 'eg.music.musicLibrary' convertsTo: 'Eg.Music.MusicLibrary'</body></methods><methods><class-id>Fit.HasParseMethod class</class-id> <category>fit-utilities</category><body package="Fit-Tests">fitParse: aString	^aString, ' found'</body></methods><methods><class-id>SUnit.TestCase</class-id> <category>accessing</category><body package="Fit-Tests">fitAssert: output contains: aString 	self assert: (output indexOfSubCollection: aString startingAt: 1) &gt; 0</body></methods><methods><class-id>Core.Point</class-id> <category>fit-utilities</category><body package="Fit-Tests">fitToString		| ws |	ws := String new writeStream.	ws		nextPut: $(;		print: x;		nextPut: $,;		print: y;		nextPut: $).	^ws contents</body></methods><methods><class-id>Fit.TestColumnFixture</class-id> <category>accessing</category><body package="Fit-Tests">field: anInteger	&lt;fitTakes: #Integer&gt;	field := anInteger</body><body package="Fit-Tests">stringField: aString	&lt;fitTakes: #String&gt;	stringField := aString</body></methods><methods><class-id>Fit.TestColumnFixture</class-id> <category>operations</category><body package="Fit-Tests">method	&lt;fitReturns: #Number&gt;	^86</body><body package="Fit-Tests">stringMethod	&lt;fitReturns: #String&gt;	^nil</body></methods><methods><class-id>Fitnesse.Testutil.TranslatePoint</class-id> <category>accessing</category><body package="Fit-Tests">p1: aPoint	&lt;fitTakes: #Point&gt;	p1 := aPoint</body><body package="Fit-Tests">p2: aPoint	&lt;fitTakes: #Point&gt;	p2 := aPoint</body></methods><methods><class-id>Fitnesse.Testutil.TranslatePoint</class-id> <category>operations</category><body package="Fit-Tests">sum	&lt;fitReturns: #Point&gt;	^p1 translatedBy: p2</body></methods><methods><class-id>Fit.SimpleBusinessObject</class-id> <category>accessing</category><body package="Fit-Tests">field	&lt;fitReturns: #Number&gt;	^field</body></methods><methods><class-id>Fitnesse.Testutil.VectorSum</class-id> <category>accessing</category><body package="Fit-Tests">v1: aCartesianVector	&lt;fitTakes: #CartesianVector&gt;	v1 := aCartesianVector</body><body package="Fit-Tests">v2: aCartesianVector	&lt;fitTakes: #CartesianVector&gt;	v2 := aCartesianVector</body></methods><methods><class-id>Fitnesse.Testutil.VectorSum</class-id> <category>operations</category><body package="Fit-Tests">sum	&lt;fitReturns: #CartesianVector&gt;	^v1 add: v2</body></methods><methods><class-id>Fit.BusinessObject</class-id> <category>accessing</category><body package="Fit-Tests">strs	&lt;fitReturns: #(#String)&gt;	^strs</body></methods><methods><class-id>Fitnesse.Fixtures.PrimeData</class-id> <category>accessing</category><body package="Fit-Tests">prime	&lt;fitReturns: #Integer&gt;	^prime</body></methods><methods><class-id>Fitnesse.Fixtures.ColumnFixtureTestFixture</class-id> <category>accessing</category><body package="Fit-Tests">input: anInteger	&lt;fitTakes: #Integer&gt;	input := anInteger</body><body package="Fit-Tests">integerInput: anInteger	&lt;fitTakes: #Integer&gt;	integerInput := anInteger</body></methods><methods><class-id>Fitnesse.Fixtures.ColumnFixtureTestFixture</class-id> <category>operations</category><body package="Fit-Tests">exception	&lt;fitReturns: #Error&gt;	Error raiseErrorString: 'I thowed up'</body><body package="Fit-Tests">integerOutput	&lt;fitReturns: #Integer&gt;	^integerInput</body><body package="Fit-Tests">output	&lt;fitReturns: #Number&gt;	^input</body></methods><methods><class-id>Fit.BindingTestFixture</class-id> <category>accessing</category><body package="Fit-Tests">intField: anInteger	&lt;fitTakes: #Integer&gt;	intField := anInteger</body><body package="Fit-Tests">intMethod	&lt;fitReturns: #Number&gt;	^intField</body><body package="Fit-Tests">integerField: anIntegerOrNil	&lt;fitTakes: #Integer&gt;	integerField := anIntegerOrNil</body><body package="Fit-Tests">integerMethod	&lt;fitReturns: #Number&gt;	^integerField</body></methods><methods><class-id>Fitnesse.Fixtures.ComplexAddFixture</class-id> <category>accessing</category><body package="Fit-Tests">a: anArray	&lt;fitTakes: #(#( #Number ))&gt;	a := anArray</body><body package="Fit-Tests">b: anArray	&lt;fitTakes: #(#( #Number ))&gt;	b := anArray</body></methods><methods><class-id>Fitnesse.Fixtures.ComplexAddFixture</class-id> <category>operations</category><body package="Fit-Tests">sum	&lt;fitReturns: #(#Number)&gt;	^Array with: a first + b first with: a second + b second</body></methods><methods><class-id>Fit.TestFixture</class-id> <category>accessing</category><body package="Fit-Tests">ch: aCharacter	&lt;fitTakes: #Character&gt;	ch := aCharacter</body><body package="Fit-Tests">name: aString	&lt;fitTakes: #String&gt;	name := aString</body><body package="Fit-Tests">point: aPoint	&lt;fitTakes: #Point&gt;	point := aPoint</body><body package="Fit-Tests">sampleArray: anArray	&lt;fitTakes: #(#( #Number ))&gt;	sampleArray := anArray</body><body package="Fit-Tests">sampleByte: aByte	&lt;fitTakes: #Integer&gt;	sampleByte := aByte</body><body package="Fit-Tests">sampleDate: aDate	&lt;fitTakes: #Date&gt;	sampleDate := aDate</body><body package="Fit-Tests">sampleFloat: aFloat	&lt;fitTakes: #Float&gt;	sampleFloat := aFloat</body><body package="Fit-Tests">sampleInteger: anInteger	&lt;fitTakes: #Integer&gt;	sampleInteger := anInteger</body><body package="Fit-Tests">sampleShort: aSmallInteger	&lt;fitTakes: #Integer&gt;	sampleShort := aSmallInteger</body></methods><methods><class-id>Fit.TestFixture</class-id> <category>constants</category><body package="Fit-Tests">pi	&lt;fitReturns: #Double&gt;	^3.14159862</body></methods><methods><class-id>Fit.TestClassForActionFixture</class-id> <category>accessing</category><body package="Fit-Tests">library: anObject	&lt;fitTakes: #String&gt;	library := anObject</body><body package="Fit-Tests">libraryPath: anObject	&lt;fitTakes: #String&gt;	libraryPath := anObject</body><body package="Fit-Tests">numValue	&lt;fitReturns: #Number&gt;	^5</body><body package="Fit-Tests">status	&lt;fitReturns: #String&gt;	^'loading'</body></methods><methods><class-id>Fitnesse.Fixtures.NullAndBlankFixture</class-id> <category>accessing</category><body package="Fit-Tests">blankString	&lt;fitReturns: #String&gt;	^String new</body><body package="Fit-Tests">blankString: aString	&lt;fitTakes: #String&gt;	blankString := aString</body><body package="Fit-Tests">nullString	&lt;fitReturns: #String&gt;	^nil</body><body package="Fit-Tests">nullString: aString	&lt;fitTakes: #String&gt;	nullString := aString</body></methods><methods><class-id>Fitnesse.Fixtures.NullAndBlankFixture</class-id> <category>testing</category><body package="Fit-Tests">isBlank	&lt;fitReturns: #Boolean&gt;	^blankString isEmpty</body><body package="Fit-Tests">isNull	&lt;fitReturns: #Boolean&gt;	^nullString isNil</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>Fixture</name><environment>Fit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>counts summary arguments listener </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Framework</category><attributes><package>Fit</package></attributes></class><class><name>FixtureDecorator</name><environment>Fit.Decorator</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit</package></attributes></class><class><name>Point</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><class><name>ColumnFixture</name><environment>Fit</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>columnBindings hasExecuted </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Framework</category><attributes><package>Fit</package></attributes></class><class><name>RowFixture</name><environment>Fit</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>results missing surplus </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Framework</category><attributes><package>Fit</package></attributes></class></st-source>