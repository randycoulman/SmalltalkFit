<?xml version="1.0"?><st-source><!-- Name: Fit-Book-RPS-FixturesNotice:                     GNU GENERAL PUBLIC LICENSE                       Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.                            Preamble  The licenses for most software are designed to take away yourfreedom to share and change it.  By contrast, the GNU General PublicLicense is intended to guarantee your freedom to share and change freesoftware- to make sure the software is free for all its users.  ThisGeneral Public License applies to most of the Free SoftwareFoundation's software and to any other program whose authors commit tousing it.  (Some other Free Software Foundation software is covered bythe GNU Lesser General Public License instead.)  You can apply it toyour programs, too.  When we speak of free software, we are referring to freedom, notprice.  Our General Public Licenses are designed to make sure that youhave the freedom to distribute copies of free software (and charge forthis service if you wish), that you receive source code or can get itif you want it, that you can change the software or use pieces of itin new free programs; and that you know you can do these things.  To protect your rights, we need to make restrictions that forbidanyone to deny you these rights or to ask you to surrender the rights.These restrictions translate to certain responsibilities for you if youdistribute copies of the software, or if you modify it.  For example, if you distribute copies of such a program, whethergratis or for a fee, you must give the recipients all the rights thatyou have.  You must make sure that they, too, receive or can get thesource code.  And you must show them these terms so they know theirrights.  We protect your rights with two steps: (1) copyright the software, and(2) offer you this license which gives you legal permission to copy,distribute and/or modify the software.  Also, for each author's protection and ours, we want to make certainthat everyone understands that there is no warranty for this freesoftware.  If the software is modified by someone else and passed on, wewant its recipients to know that what they have is not the original, sothat any problems introduced by others will not reflect on the originalauthors' reputations.  Finally, any free program is threatened constantly by softwarepatents.  We wish to avoid the danger that redistributors of a freeprogram will individually obtain patent licenses, in effect making theprogram proprietary.  To prevent this, we have made it clear that anypatent must be licensed for everyone's free use or not licensed at all.  The precise terms and conditions for copying, distribution andmodification follow.                    GNU GENERAL PUBLIC LICENSE   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION  0. This License applies to any program or other work which containsa notice placed by the copyright holder saying it may be distributedunder the terms of this General Public License.  The "Program", below,refers to any such program or work, and a "work based on the Program"means either the Program or any derivative work under copyright law:that is to say, a work containing the Program or a portion of it,either verbatim or with modifications and/or translated into anotherlanguage.  (Hereinafter, translation is included without limitation inthe term "modification".)  Each licensee is addressed as "you".Activities other than copying, distribution and modification are notcovered by this License; they are outside its scope.  The act ofrunning the Program is not restricted, and the output from the Programis covered only if its contents constitute a work based on theProgram (independent of having been made by running the Program).Whether that is true depends on what the Program does.  1. You may copy and distribute verbatim copies of the Program'ssource code as you receive it, in any medium, provided that youconspicuously and appropriately publish on each copy an appropriatecopyright notice and disclaimer of warranty; keep intact all thenotices that refer to this License and to the absence of any warranty;and give any other recipients of the Program a copy of this Licensealong with the Program.You may charge a fee for the physical act of transferring a copy, andyou may at your option offer warranty protection in exchange for a fee.  2. You may modify your copy or copies of the Program or any portionof it, thus forming a work based on the Program, and copy anddistribute such modifications or work under the terms of Section 1above, provided that you also meet all of these conditions:    a) You must cause the modified files to carry prominent notices    stating that you changed the files and the date of any change.    b) You must cause any work that you distribute or publish, that in    whole or in part contains or is derived from the Program or any    part thereof, to be licensed as a whole at no charge to all third    parties under the terms of this License.    c) If the modified program normally reads commands interactively    when run, you must cause it, when started running for such    interactive use in the most ordinary way, to print or display an    announcement including an appropriate copyright notice and a    notice that there is no warranty (or else, saying that you provide    a warranty) and that users may redistribute the program under    these conditions, and telling the user how to view a copy of this    License.  (Exception: if the Program itself is interactive but    does not normally print such an announcement, your work based on    the Program is not required to print an announcement.)These requirements apply to the modified work as a whole.  Ifidentifiable sections of that work are not derived from the Program,and can be reasonably considered independent and separate works inthemselves, then this License, and its terms, do not apply to thosesections when you distribute them as separate works.  But when youdistribute the same sections as part of a whole which is a work basedon the Program, the distribution of the whole must be on the terms ofthis License, whose permissions for other licensees extend to theentire whole, and thus to each and every part regardless of who wrote it.Thus, it is not the intent of this section to claim rights or contestyour rights to work written entirely by you; rather, the intent is toexercise the right to control the distribution of derivative orcollective works based on the Program.In addition, mere aggregation of another work not based on the Programwith the Program (or with a work based on the Program) on a volume ofa storage or distribution medium does not bring the other work underthe scope of this License.  3. You may copy and distribute the Program (or a work based on it,under Section 2) in object code or executable form under the terms ofSections 1 and 2 above provided that you also do one of the following:    a) Accompany it with the complete corresponding machine-readable    source code, which must be distributed under the terms of Sections    1 and 2 above on a medium customarily used for software interchange; or,    b) Accompany it with a written offer, valid for at least three    years, to give any third party, for a charge no more than your    cost of physically performing source distribution, a complete    machine-readable copy of the corresponding source code, to be    distributed under the terms of Sections 1 and 2 above on a medium    customarily used for software interchange; or,    c) Accompany it with the information you received as to the offer    to distribute corresponding source code.  (This alternative is    allowed only for noncommercial distribution and only if you    received the program in object code or executable form with such    an offer, in accord with Subsection b above.)The source code for a work means the preferred form of the work formaking modifications to it.  For an executable work, complete sourcecode means all the source code for all modules it contains, plus anyassociated interface definition files, plus the scripts used tocontrol compilation and installation of the executable.  However, as aspecial exception, the source code distributed need not includeanything that is normally distributed (in either source or binaryform) with the major components (compiler, kernel, and so on) of theoperating system on which the executable runs, unless that componentitself accompanies the executable.If distribution of executable or object code is made by offeringaccess to copy from a designated place, then offering equivalentaccess to copy the source code from the same place counts asdistribution of the source code, even though third parties are notcompelled to copy the source along with the object code.  4. You may not copy, modify, sublicense, or distribute the Programexcept as expressly provided under this License.  Any attemptotherwise to copy, modify, sublicense or distribute the Program isvoid, and will automatically terminate your rights under this License.However, parties who have received copies, or rights, from you underthis License will not have their licenses terminated so long as suchparties remain in full compliance.  5. You are not required to accept this License, since you have notsigned it.  However, nothing else grants you permission to modify ordistribute the Program or its derivative works.  These actions areprohibited by law if you do not accept this License.  Therefore, bymodifying or distributing the Program (or any work based on theProgram), you indicate your acceptance of this License to do so, andall its terms and conditions for copying, distributing or modifyingthe Program or works based on it.  6. Each time you redistribute the Program (or any work based on theProgram), the recipient automatically receives a license from theoriginal licensor to copy, distribute or modify the Program subject tothese terms and conditions.  You may not impose any furtherrestrictions on the recipients' exercise of the rights granted herein.You are not responsible for enforcing compliance by third parties tothis License.  7. If, as a consequence of a court judgment or allegation of patentinfringement or for any other reason (not limited to patent issues),conditions are imposed on you (whether by court order, agreement orotherwise) that contradict the conditions of this License, they do notexcuse you from the conditions of this License.  If you cannotdistribute so as to satisfy simultaneously your obligations under thisLicense and any other pertinent obligations, then as a consequence youmay not distribute the Program at all.  For example, if a patentlicense would not permit royalty-free redistribution of the Program byall those who receive copies directly or indirectly through you, thenthe only way you could satisfy both it and this License would be torefrain entirely from distribution of the Program.If any portion of this section is held invalid or unenforceable underany particular circumstance, the balance of the section is intended toapply and the section as a whole is intended to apply in othercircumstances.It is not the purpose of this section to induce you to infringe anypatents or other property right claims or to contest validity of anysuch claims; this section has the sole purpose of protecting theintegrity of the free software distribution system, which isimplemented by public license practices.  Many people have madegenerous contributions to the wide range of software distributedthrough that system in reliance on consistent application of thatsystem; it is up to the author/donor to decide if he or she is willingto distribute software through any other system and a licensee cannotimpose that choice.This section is intended to make thoroughly clear what is believed tobe a consequence of the rest of this License.  8. If the distribution and/or use of the Program is restricted incertain countries either by patents or by copyrighted interfaces, theoriginal copyright holder who places the Program under this Licensemay add an explicit geographical distribution limitation excludingthose countries, so that distribution is permitted only in or amongcountries not thus excluded.  In such case, this License incorporatesthe limitation as if written in the body of this License.  9. The Free Software Foundation may publish revised and/or new versionsof the General Public License from time to time.  Such new versions willbe similar in spirit to the present version, but may differ in detail toaddress new problems or concerns.Each version is given a distinguishing version number.  If the Programspecifies a version number of this License which applies to it and "anylater version", you have the option of following the terms and conditionseither of that version or of any later version published by the FreeSoftware Foundation.  If the Program does not specify a version number ofthis License, you may choose any version ever published by the Free SoftwareFoundation.  10. If you wish to incorporate parts of the Program into other freeprograms whose distribution conditions are different, write to the authorto ask for permission.  For software which is copyrighted by the FreeSoftware Foundation, write to the Free Software Foundation; we sometimesmake exceptions for this.  Our decision will be guided by the two goalsof preserving the free status of all derivatives of our free software andof promoting the sharing and reuse of software generally.                            NO WARRANTY  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTYFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHENOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIESPROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSEDOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OFMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK ASTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THEPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,REPAIR OR CORRECTION.  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITINGWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/ORREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISINGOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITEDTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BYYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHERPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THEPOSSIBILITY OF SUCH DAMAGES.                     END OF TERMS AND CONDITIONS            How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatestpossible use to the public, the best way to achieve this is to make itfree software which everyone can redistribute and change under these terms.  To do so, attach the following notices to the program.  It is safestto attach them to the start of each source file to most effectivelyconvey the exclusion of warranty; and each file should have at leastthe "copyright" line and a pointer to where the full notice is found.    <one line to give the program's name and a brief idea of what it does.>    Copyright (C) <year>  <name of author>    This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License along    with this program; if not, write to the Free Software Foundation, Inc.,    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.Also add information on how to contact you by electronic and paper mail.If the program is interactive, make it output a short notice like thiswhen it starts in an interactive mode:    Gnomovision version 69, Copyright (C) year name of author    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.    This is free software, and you are welcome to redistribute it    under certain conditions; type `show c' for details.The hypothetical commands `show w' and `show c' should show the appropriateparts of the General Public License.  Of course, the commands you use maybe called something other than `show w' and `show c'; they could even bemouse-clicks or menu items- whatever suits your program.You should also get your employer (if you work as a programmer) or yourschool, if any, to sign a "copyright disclaimer" for the program, ifnecessary.  Here is a sample; alter the names:  Yoyodyne, Inc., hereby disclaims all copyright interest in the program  `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989  Ty Coon, President of ViceThis General Public License does not permit incorporating your program intoproprietary programs.  If your program is a subroutine library, you mayconsider it more useful to permit linking proprietary applications with thelibrary.  If this is what you want to do, use the GNU Lesser GeneralPublic License instead of this License.Comment: This package contains the fixture code for the Rent-A-Party Software (RPS) examples in [Fit for Developing Software"](http://www.amazon.com/Fit-Developing-Software-Framework-Integrated/dp/0321269349) by Rick Mugridge and Ward Cunningham.This is an updated version of the RPS example that shipped with FitLibrary2.# Smalltalk FitSmalltalk Fit is a Smalltalk implementation of Ward Cunningham's [Framework for Integrated Tests](http://fit.c2.com), [Fitnesse](http://www.fitnesse.org), and Rick Mugridge's [FitLibrary](http://fitlibrary.sourceforge.net).This version contains the equivalent features of:* fit-java-1.1* fitnesse-20121220* FitLibrary-2.0   Copyright (C) 2004-2013 Randy Coulman    This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License along    with this program; if not, write to the Free Software Foundation, Inc.,    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.See the copyright tab in the RB, the 'notice' property of this package, or the License.txt file on GitHub.DbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1539DbUsername: randyDbVersion: 11DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'Fit-Book-RPS' '') #(#any 'Fit' '') #(#any 'FitLibrary' ''))PackageName: Fit-Book-RPS-FixturesParcel: #('Fit-Book-RPS-Fixtures')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'Fit-Book-RPS') #(#name 'Fit') #(#name 'FitLibrary' #componentType #package))PrerequisiteParcels: #(#('Base VisualWorks' '') #('Fit-Book-RPS' '') #('Fit' '') #('FitLibrary' ''))PrintStringCache: (11,randy)Version: 11Date: 7:21:07 AM May 24, 2013 --><time-stamp>From VisualWorks® Personal Use Edition, 7.9.1 of October 18, 2012 on May 24, 2013 at 7:21:07 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Rent</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			private Fit.*			private Fitlibrary.*			private RPS.*			</imports><category>Fit-Book-RPS-Fixtures</category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></name-space><class><name>Refunder</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>staff client rentalItemName rentEz </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>TransactionAdapter</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clientTransaction rentEz </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>CalculateDeliveryRate</name><environment>Rent</environment><super>Fitlibrary.CalculateFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rentEz </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>CreditCardValidationFixture</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>CalculateChargeFairly</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rates weeks hours days perHourCost perDayCost perWeekCost </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>RefundCalculateFixture</name><environment>Rent</environment><super>Fitlibrary.CalculateFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rates </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>RefundColumnFixture</name><environment>Rent</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hours1 hours2 days1 days2 weeks1 weeks2 charge1 charge2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit-Book-RPS-Fixtures</category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>AdminTransactionAdapter</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>transaction rentEz templateName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>BonusPointCalculation</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>CalculateRefund2</name><environment>Rent</environment><super>Fitlibrary.DoFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit-Book-RPS-Fixtures</category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>CalculateLateHours</name><environment>Rent</environment><super>Fit.ColumnFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hoursLate grace countGrace highDemand </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>StartApplication</name><environment>Rent</environment><super>Fitlibrary.DoFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>setUp rentEz mockClock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit-Book-RPS-Fixtures</category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>FairChargeWithColumn</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>perHour perDay perWeek hours days weeks </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>ClientTransactionsAdapter</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>transaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>CalculateRefund</name><environment>Rent</environment><super>Fitlibrary.DoFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit-Book-RPS-Fixtures</category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>SetUpRentals</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clientName rentEz </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>CommissionAdapter</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>staffMember </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>CalculateFairCharge</name><environment>Rent</environment><super>Fitlibrary.DoFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>FairCharge</name><environment>Rent</environment><super>Fitlibrary.CalculateFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rates </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>DeliveryTransaction</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clientTransaction rentEz city zone address </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>EmailValidationFixture</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>GeneralSetUp</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rentEz </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>PermittedMixtureOfPayments</name><environment>Rent</environment><super>Fitlibrary.CombinationFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>transaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><class><name>CreateTemplate</name><environment>Rent</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>template rentEz </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Fit-Book-RPS-Fixtures</package></attributes></class><methods><class-id>Rent.Refunder</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Fixtures">setStaff: aStaffMember client: aClient item: aString rentEz: aRentEz	staff := aStaffMember.	client := aClient.	rentalItemName := aString.	rentEz := aRentEz</body></methods><methods><class-id>Rent.Refunder class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">staff: aStaffMember client: aClient item: aString rentEz: aRentEz	^self new		setStaff: aStaffMember		client: aClient		item: aString		rentEz: aRentEz</body></methods><methods><class-id>Rent.TransactionAdapter</class-id> <category>private</category><body package="Fit-Book-RPS-Fixtures">rentalItemTypeNamed: aString 	^rentEz rentalItemTypeNamed: aString</body></methods><methods><class-id>Rent.TransactionAdapter</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Fixtures">setRentEz: aRentEz transaction: aTransaction	rentEz := aRentEz.	clientTransaction := aTransaction</body></methods><methods><class-id>Rent.TransactionAdapter class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">rentEz: aRentEz transaction: aTransaction	^self new setRentEz: aRentEz transaction: aTransaction</body></methods><methods><class-id>Rent.CalculateDeliveryRate</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Fixtures">setRentEz: aRentEz	rentEz := aRentEz</body></methods><methods><class-id>Rent.CalculateDeliveryRate class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">rentEz: aRentEz	^self new setRentEz: aRentEz</body></methods><methods><class-id>Rent.CreditCardValidationFixture</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Fixtures">setRent: aRentEz	rent := aRentEz</body></methods><methods><class-id>Rent.CreditCardValidationFixture class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">rentEz: aRentEz	^self new setRent: aRentEz</body></methods><methods><class-id>Rent.CalculateChargeFairly</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">costInDollar	^rates costForPeriod: (DurationRPS hours: hours days: days weeks: weeks)</body></methods><methods><class-id>Rent.CalculateChargeFairly</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Fixtures">setRates: aRates	rates := aRates</body></methods><methods><class-id>Rent.CalculateChargeFairly class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">rates: aRates	^self new setRates: aRates</body></methods><methods><class-id>Rent.RefundCalculateFixture</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">rates: aRates	rates := aRates</body></methods><methods><class-id>Rent.RefundCalculateFixture class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">rates: aRates 	^self new rates: aRates</body></methods><methods><class-id>Rent.RefundColumnFixture</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Fixtures">initialize	super initialize.	hours1 := days1 := weeks1 := 0.	hours2 := days2 := weeks2 := 0</body><body package="Fit-Book-RPS-Fixtures">setHourly: hourlyDouble daily: dailyDouble weekly: weeklyDouble 	charge1 := FairChargeWithColumn 				hourly: hourlyDouble				daily: dailyDouble				weekly: weeklyDouble.	charge2 := FairChargeWithColumn 				hourly: hourlyDouble				daily: dailyDouble				weekly: weeklyDouble</body></methods><methods><class-id>Rent.RefundColumnFixture class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">hourly: hourlyDouble daily: dailyDouble weekly: weeklyDouble 	^self new 		setHourly: hourlyDouble		daily: dailyDouble		weekly: weeklyDouble</body></methods><methods><class-id>Rent.AdminTransactionAdapter</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Fixtures">setTransaction: anAdminTransaction rentEz: aRentEz	transaction := anAdminTransaction.	rentEz := aRentEz</body></methods><methods><class-id>Rent.AdminTransactionAdapter</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">systemUnderTest	^transaction</body></methods><methods><class-id>Rent.AdminTransactionAdapter class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">transaction: anAdminTransaction rentEz: aRentEz	^self new setTransaction: anAdminTransaction rentEz: aRentEz</body></methods><methods><class-id>Rent.StartApplication</class-id> <category>private</category><body package="Fit-Book-RPS-Fixtures">calculate: anObject	^CalculateFixture systemUnderTest: anObject</body><body package="Fit-Book-RPS-Fixtures">calculateChargeFairlyPerHour: hourlyMoney perDay: dailyMoney perWeek: weeklyMoney	| rates |	rates := Rates hourly: hourlyMoney daily: dailyMoney weekly: weeklyMoney.	^self calculate: (CalculateChargeFairly rates: rates)</body><body package="Fit-Book-RPS-Fixtures">clientNamed: aString 	^rentEz clientNamed: aString</body><body package="Fit-Book-RPS-Fixtures">makeDummyClient	| name |	name := 'dummy-client'.	^[rentEz clientNamed: name] on: MissingException		do: 			[:ex |			rentEz				createClient: name				phone: 'phone'				creator: rentEz adminStaff.			ex retry]</body><body package="Fit-Book-RPS-Fixtures">makeDummyRentalItemWithRates: aRates	| name |	name := 'dummy-rental'.	rentEz removeRentalItemTypeNamed: name.	rentEz		createRentalItemType: name		initialCount: 1		rates: aRates		deposit: Money zero.	^rentEz rentalItemTypeNamed: name</body><body package="Fit-Book-RPS-Fixtures">makeDummyStaff	| name |	name := 'dummy-staff'.	^[rentEz staffMemberNamed: name] on: MissingException		do: 			[:ex |			rentEz				createStaffMember: name				phone: 'phone'				creator: rentEz adminStaff.			ex retry]</body><body package="Fit-Book-RPS-Fixtures">mapCommissionToAdapter	^(rentEz staffMembers reject: [:each | each name = 'Admin'])		collect: [:each | CommissionAdapter forStaffMember: each]</body><body package="Fit-Book-RPS-Fixtures">rentalItemListPrivate	^rentEz rentalItemTypes values asSet</body></methods><methods><class-id>Rent.StartApplication</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Fixtures">initialize	super initialize.	mockClock := MockClock new.	rentEz := RentEz new clock: mockClock.	setUp := SetUpFixture systemUnderTest: (GeneralSetUp rentEz: rentEz)</body></methods><methods><class-id>Rent.FairChargeWithColumn</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">charge	self reconstitute.	^hours * perHour + (days * perDay) + (weeks * perWeek)</body><body package="Fit-Book-RPS-Fixtures">perDay: aDouble	perDay := aDouble</body><body package="Fit-Book-RPS-Fixtures">perHour: aDouble	perHour := aDouble</body><body package="Fit-Book-RPS-Fixtures">perWeek: aDouble	perWeek := aDouble</body></methods><methods><class-id>Rent.FairChargeWithColumn</class-id> <category>calculations</category><body package="Fit-Book-RPS-Fixtures">refundForHours: hoursInteger days: daysInteger weeks: weeksInteger 	hours := hoursInteger.	days := daysInteger.	weeks := weeksInteger.	^self charge</body></methods><methods><class-id>Rent.FairChargeWithColumn</class-id> <category>private</category><body package="Fit-Book-RPS-Fixtures">reconstitute	hours * perHour &gt; perDay 		ifTrue: 			[hours := 0.			days := days + 1].	days * perDay &gt; perWeek 		ifTrue: 			[days := 0.			weeks := weeks + 1]</body></methods><methods><class-id>Rent.FairChargeWithColumn class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">hourly: hourlyDouble daily: dailyDouble weekly: weeklyDouble 	^(self new)		perHour: hourlyDouble;		perDay: dailyDouble;		perWeek: weeklyDouble;		yourself</body></methods><methods><class-id>Rent.ClientTransactionsAdapter</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Fixtures">setTransaction: aClientTransaction	transaction := aClientTransaction</body></methods><methods><class-id>Rent.ClientTransactionsAdapter class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">for: aClientTransaction	^self new setTransaction: aClientTransaction</body></methods><methods><class-id>Rent.SetUpRentals</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Fixtures">setClientName: aString rentEz: aRentEz	clientName := aString.	rentEz := aRentEz</body></methods><methods><class-id>Rent.SetUpRentals class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">forClientNamed: aString rentEz: aRentEz	^self new setClientName: aString rentEz: aRentEz</body></methods><methods><class-id>Rent.CommissionAdapter</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Fixtures">setStaffMember: aStaffMember	staffMember := aStaffMember</body></methods><methods><class-id>Rent.CommissionAdapter class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">forStaffMember: aStaffMember	^self new setStaffMember: aStaffMember</body></methods><methods><class-id>Rent.FairCharge</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">rates: aRates	rates := aRates</body></methods><methods><class-id>Rent.FairCharge class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">rates: aRates 	^self new rates: aRates</body></methods><methods><class-id>Rent.DeliveryTransaction</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Fixtures">setTransaction: aClientTransaction city: cityString zone: zoneString address: addressString rentEz: aRentEz	clientTransaction := aClientTransaction.	city := cityString.	zone := zoneString.	address := addressString.	rentEz := aRentEz</body><body package="Fit-Book-RPS-Fixtures">setTransaction: aClientTransaction rentEz: aRentEz	clientTransaction := aClientTransaction.	rentEz := aRentEz</body></methods><methods><class-id>Rent.DeliveryTransaction class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">forTransaction: aClientTransaction city: cityString zone: zoneString address: addressString rentEz: aRentEz	^self new		setTransaction: aClientTransaction		city: cityString		zone: zoneString		address: addressString		rentEz: aRentEz</body><body package="Fit-Book-RPS-Fixtures">forTransaction: aClientTransaction rentEz: aRentEz	^self new setTransaction: aClientTransaction rentEz: aRentEz</body></methods><methods><class-id>Rent.GeneralSetUp</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">rentEz: aRentEz	rentEz := aRentEz</body></methods><methods><class-id>Rent.GeneralSetUp</class-id> <category>private</category><body package="Fit-Book-RPS-Fixtures">admin	^rentEz staffMemberNamed: 'Admin'</body></methods><methods><class-id>Rent.GeneralSetUp class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">rentEz: aRentEz 	^self new rentEz: aRentEz</body></methods><methods><class-id>Rent.PermittedMixtureOfPayments</class-id> <category>private</category><body package="Fit-Book-RPS-Fixtures">payWithMethod: aString	| amount |	amount := Money cents: 20.	aString = 'cash' ifTrue: [^transaction payWithCash: amount].	aString = 'account' ifTrue: [^transaction payOnAccount: amount].	aString = 'voucher'		ifTrue: [^transaction payWithVoucher: (Voucher amount: amount)].	aString = 'bonus'		ifTrue: [^transaction payWithBonusPoints: (BonusPoints value: amount)].	^false</body><body package="Fit-Book-RPS-Fixtures">rentEz	^self systemUnderTest</body></methods><methods><class-id>Rent.CreateTemplate</class-id> <category>initialize-release</category><body package="Fit-Book-RPS-Fixtures">setName: aString rentEz: aRentEz	rentEz := aRentEz.	template := (rentEz templateNamed: aString)				ifNil: [rentEz addTemplateNamed: aString]</body></methods><methods><class-id>Rent.CreateTemplate class</class-id> <category>instance creation</category><body package="Fit-Book-RPS-Fixtures">named: aString rentEz: aRentEz	^self new setName: aString rentEz: aRentEz</body></methods><methods><class-id>Core.Timestamp class</class-id> <category>fit-utilities</category><body package="Fit-Book-RPS-Fixtures">fitParse: aString 	^(TimestampReader newFor: #fitLibrary) 		readTimestampFrom: aString readStream</body></methods><methods><class-id>Rent.Refunder</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">refundPaidTime: paidDurationRPS actualTime: actualDurationRPS	&lt;fitTakes: #(#DurationRPS #DurationRPS)&gt;	&lt;fitReturns: #Money&gt;	| count startDate endDate transaction cost finalTransaction refund |	count := 1.	startDate := MyDate new.	endDate := paidDurationRPS dateAfter: startDate.	transaction := TransactionAdapter rentEz: rentEz				transaction: (ClientTransaction						rentEz: rentEz						startDate: startDate						staffMember: staff						client: client						deliver: false).	cost := transaction rent: count _: rentalItemName for: paidDurationRPS.	transaction		payWithCashDollar: cost;		completeTransaction.	finalTransaction := TransactionAdapter rentEz: rentEz				transaction: (ClientTransaction						rentEz: rentEz						startDate: endDate						staffMember: staff						client: client						deliver: false).	refund := finalTransaction returnItems: count _: rentalItemName.	finalTransaction		refundCashDollar: refund;		completeTransaction.	^refund</body></methods><methods><class-id>Rent.TransactionAdapter</class-id> <category>operations</category><body package="Fit-Book-RPS-Fixtures">acceptBookingOf: quantityInteger _: aString for: aMyDate for: aDurationRPS	&lt;fitTakes: #( #Integer   #String   #MyDate   #DurationRPS )&gt;	&lt;fitReturns: #Money&gt;	^clientTransaction		acceptBooking: quantityInteger		of: (self rentalItemTypeNamed: aString)		on: aMyDate		for: aDurationRPS</body><body package="Fit-Book-RPS-Fixtures">book: quantityInteger _: aString on: aMyDate for: aDurationRPS	&lt;fitTakes: #( #Integer   #String   #MyDate   #DurationRPS )&gt;	&lt;fitReturns: #Money&gt;	^clientTransaction		book: quantityInteger		of: (self rentalItemTypeNamed: aString)		on: aMyDate		for: aDurationRPS</body><body package="Fit-Book-RPS-Fixtures">buy: anInteger _: aString	&lt;fitTakes: #(#Integer #String)&gt;	&lt;fitReturns: #Money&gt;	^clientTransaction buy: anInteger of: (rentEz salesItemTypeNamed: aString)</body><body package="Fit-Book-RPS-Fixtures">cancelBookingOf: quantityInteger _: aString on: aMyDate for: aDurationRPS	&lt;fitTakes: #( #Integer   #String   #MyDate   #DurationRPS )&gt;	&lt;fitReturns: #Money&gt;	^clientTransaction		cancelBooking: quantityInteger		of: (self rentalItemTypeNamed: aString)		on: aMyDate		for: aDurationRPS</body><body package="Fit-Book-RPS-Fixtures">cancelDelivery: aMyDate city: cityString zone: zoneString address: addressString item: itemTypeString itemCount: anInteger for: aDurationRPS	&lt;	fitTakes: #(#{MyDate} #{String} #{String} #{String} #{String} #{Integer} #{DurationRPS})&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction		cancelDelivery: anInteger		of: (self rentalItemTypeNamed: itemTypeString)		toAddress: addressString		inZone: zoneString		ofCity: cityString		for: aDurationRPS		on: aMyDate</body><body package="Fit-Book-RPS-Fixtures">cancelTransaction	&lt;fitReturns: #Boolean&gt;	^clientTransaction cancel</body><body package="Fit-Book-RPS-Fixtures">changeDeliveryOn: aMyDate item: itemTypeString itemCount: anInteger for: aDurationRPS city: cityString zone: zoneString deliveryAddress: oldAddressString toDeliveryAddress: newAddressString	&lt;	fitTakes: #(#{MyDate} #{String} #{Integer} #{DurationRPS} #{String} #{String} #{String} #{String})&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction		changeDelivery: anInteger		of: (self rentalItemTypeNamed: itemTypeString)		toAddress: oldAddressString		inZone: zoneString		ofCity: cityString		for: aDurationRPS		on: aMyDate		toNewZone: zoneString		address: newAddressString</body><body package="Fit-Book-RPS-Fixtures">changeDeliveryOn: aMyDate item: itemTypeString itemCount: anInteger for: aDurationRPS city: cityString zone: oldZoneString deliveryAddress: oldAddressString toZone: newZoneString toDeliveryAddress: newAddressString	&lt;	fitTakes: #(#{MyDate} #{String} #{Integer} #{DurationRPS} #{String} #{String} #{String} #{String} #{String})&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction		changeDelivery: anInteger		of: (self rentalItemTypeNamed: itemTypeString)		toAddress: oldAddressString		inZone: oldZoneString		ofCity: cityString		for: aDurationRPS		on: aMyDate		toNewZone: newZoneString		address: newAddressString</body><body package="Fit-Book-RPS-Fixtures">changePeriodOf: quantityInteger _: aString for: aMyDate withDurationOf: oldDurationRPS to: newDurationRPS	&lt;fitTakes: #( #Integer   #String   #MyDate   #DurationRPS   #DurationRPS )&gt;	&lt;fitReturns: #Money&gt;	^clientTransaction		changePeriodOfBooking: quantityInteger		of: (self rentalItemTypeNamed: aString)		on: aMyDate		from: oldDurationRPS		to: newDurationRPS</body><body package="Fit-Book-RPS-Fixtures">completeTransaction	&lt;fitReturns: #Boolean&gt;	^clientTransaction complete</body><body package="Fit-Book-RPS-Fixtures">dropRent: quantityInteger _: aString for: aRPSDuration	&lt;fitTakes: #(#Integer #String #DurationRPS)&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction		dropRent: quantityInteger		of: (self rentalItemTypeNamed: aString)		for: aRPSDuration</body><body package="Fit-Book-RPS-Fixtures">fillBookTemplate: aString forPeople: anInteger on: aMyDate for: aDurationRPS	&lt;fitTakes: #( #String   #Integer   #MyDate   #DurationRPS )&gt;	&lt;fitReturns: #Money&gt;	| template amount |	template := rentEz templateNamed: aString.	amount := template fillForPeople: anInteger duration: aDurationRPS.	(clientTransaction		bookTemplate: template		forPeople: anInteger		on: aMyDate		duration: aDurationRPS)			ifFalse: [^RpsException raiseErrorString: 'Could not complete template'].	^amount</body><body package="Fit-Book-RPS-Fixtures">fillRentTemplate: aString forPeople: anInteger for: aDurationRPS	&lt;fitTakes: #(#String #Integer #DurationRPS)&gt;	&lt;fitReturns: #Money&gt;	| template amount |	template := rentEz templateNamed: aString.	amount := template fillForPeople: anInteger duration: aDurationRPS.	(clientTransaction		rentTemplate: template		forPeople: anInteger		duration: aDurationRPS)			ifFalse: [^self error: 'Could not complete template'].	^amount</body><body package="Fit-Book-RPS-Fixtures">fillTemplate: aString forPeople: anInteger for: aDurationRPS	&lt;fitTakes: #(#String #Integer #DurationRPS)&gt;	&lt;fitReturns: #Money&gt;	| template amount |	template := rentEz templateNamed: aString.	amount := template fillForPeople: anInteger duration: aDurationRPS.	(clientTransaction		rentTemplate: template		forPeople: anInteger		duration: aDurationRPS)			ifFalse: 				[^RpsException					raiseErrorString: 'Not enough items in store to complete template'].	^amount</body><body package="Fit-Book-RPS-Fixtures">modifyAmountOnRent: oldCountInteger _: aString for: aDurationRPS to: newCountInteger	&lt;fitTakes: #( #Integer   #String   #DurationRPS   #Integer )&gt;	^clientTransaction		modifyRentalDetails: oldCountInteger		of: (self rentalItemTypeNamed: aString)		for: aDurationRPS		toCount: newCountInteger		duration: aDurationRPS</body><body package="Fit-Book-RPS-Fixtures">modifyDurationOnRent: anInteger _: aString for: oldDurationRPS to: newDurationRPS	&lt;fitTakes: #( #Integer   #String   #DurationRPS   #DurationRPS )&gt;	^clientTransaction		modifyRentalDetails: anInteger		of: (self rentalItemTypeNamed: aString)		for: oldDurationRPS		toCount: anInteger		duration: newDurationRPS</body><body package="Fit-Book-RPS-Fixtures">payOnAccountDollar: aMoney	&lt;fitTakes: #Money&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction payOnAccount: aMoney</body><body package="Fit-Book-RPS-Fixtures">payWithAccountDollar: aMoney	&lt;fitTakes: #Money&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction payOnAccount: aMoney</body><body package="Fit-Book-RPS-Fixtures">payWithCashDollar: aMoney	&lt;fitTakes: #Money&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction payWithCash: aMoney</body><body package="Fit-Book-RPS-Fixtures">payWithCreditCardDollar: aMoney cardType: typeString expires: expiryString number: numberString	&lt;fitTakes: #( #Money   #String   #String   #String )&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction		payWithCreditCard: aMoney		cardType: typeString		expiryString: expiryString		cardNumber: numberString</body><body package="Fit-Book-RPS-Fixtures">payWithPointsDollar: aBonusPoints	&lt;fitTakes: #BonusPoints&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction payWithBonusPoints: aBonusPoints</body><body package="Fit-Book-RPS-Fixtures">payWithVoucherDollar: aMoney	&lt;fitTakes: #Money&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction payWithVoucher: (Voucher amount: aMoney)</body><body package="Fit-Book-RPS-Fixtures">payWithVoucherDollar: aMoney thatExpiresAfter: aMyDate	&lt;fitTakes: #(#Money #MyDate)&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction		payWithVoucher: (Voucher amount: aMoney expiryDate: aMyDate)</body><body package="Fit-Book-RPS-Fixtures">purchaseVoucherDollar: aMoney	&lt;fitTakes: #Money&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction purchaseVoucher: aMoney</body><body package="Fit-Book-RPS-Fixtures">refundAccountDollar: aMoney	&lt;fitTakes: #Money&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction refundAccount: aMoney</body><body package="Fit-Book-RPS-Fixtures">refundCashDollar: aMoney	&lt;fitTakes: #Money&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction refundCash: aMoney</body><body package="Fit-Book-RPS-Fixtures">rent: quantityInteger _: aString for: aRPSDuration	&lt;fitTakes: #(#Integer #String #DurationRPS)&gt;	&lt;fitReturns: #Money&gt;	^clientTransaction		rent: quantityInteger		of: (self rentalItemTypeNamed: aString)		for: aRPSDuration</body><body package="Fit-Book-RPS-Fixtures">rent: quantityInteger _: aString for: aRPSDuration withRestrictionSatisfied: anArray	&lt;fitTakes: #( #Integer   #String   #DurationRPS  #( #Integer ))&gt;	&lt;fitReturns: #Money&gt;	^clientTransaction		rent: quantityInteger		of: (self rentalItemTypeNamed: aString)		for: aRPSDuration		restrictionsSatisfied: anArray</body><body package="Fit-Book-RPS-Fixtures">rent: quantityInteger _: aString forWeeks: weeksInteger	&lt;fitTakes: #(#Integer #String #Integer)&gt;	&lt;fitReturns: #Money&gt;	^clientTransaction		rent: quantityInteger		of: (self rentalItemTypeNamed: aString)		for: (DurationRPS weeks: weeksInteger)</body><body package="Fit-Book-RPS-Fixtures">returnItems: anInteger _: aString	&lt;fitTakes: #(#Integer #String)&gt;	&lt;fitReturns: #Money&gt;	^self		returnItems: anInteger		_: aString		costToFix: Money zero</body><body package="Fit-Book-RPS-Fixtures">returnItems: anInteger _: aString costToFix: aMoney	&lt;fitTakes: #(#Integer #String #Money)&gt;	&lt;fitReturns: #Money&gt;	^clientTransaction		return: anInteger		of: (self rentalItemTypeNamed: aString)		costToFix: aMoney</body><body package="Fit-Book-RPS-Fixtures">undropRent: quantityInteger _: aString for: aRPSDuration	&lt;fitTakes: #(#Integer #String #DurationRPS)&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction		undropRent: quantityInteger		of: (self rentalItemTypeNamed: aString)		for: aRPSDuration</body></methods><methods><class-id>Rent.CalculateDeliveryRate</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">deliveryFeeDollarActualDollarSpent: aMoney city: cityString zone: zoneString	&lt;fitTakes: #(#Money #String #String)&gt;	&lt;fitReturns: #Money&gt;	^(rentEz deliveryRateForCity: cityString zone: zoneString)		deliveryCostForAmount: aMoney</body></methods><methods><class-id>Rent.CreditCardValidationFixture</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">creditCardNo: numberString cardType: typeString expires: expiryString	&lt;fitTakes: #(#String #String #String)&gt;	&lt;fitReturns: #Boolean&gt;	^self		validNumberCreditCardNo: numberString		cardType: typeString		expires: expiryString</body><body package="Fit-Book-RPS-Fixtures">validNumberCreditCardNo: numberString cardType: typeString expires: expiryString	&lt;fitTakes: #(#String #String #String)&gt;	&lt;fitReturns: #Boolean&gt;		[CreditCard		type: typeString		expiryString: expiryString		number: numberString		rentEz: rent]			on: InvalidCreditCardException			do: [:ex | ^false].	^true</body></methods><methods><class-id>Rent.CalculateChargeFairly</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">costInDollarDollarSlashHour: hourlyMoney dollarSlashDay: dailyMoney dollarSlashWeek: weeklyMoney hours: hoursInteger days: daysInteger weeks: weeksInteger	&lt;fitTakes: #( #Money   #Money   #Money   #Integer   #Integer   #Integer )&gt;	&lt;fitReturns: #Money&gt;	hours := hoursInteger.	days := daysInteger.	weeks := weeksInteger.	perHourCost := hourlyMoney.	perDayCost := dailyMoney.	perWeekCost := weeklyMoney.	rates := Rates hourly: hourlyMoney daily: dailyMoney weekly: weeklyMoney.	^self costInDollar</body><body package="Fit-Book-RPS-Fixtures">costInDollarDollarSlashHour: hourlyMoney dollarSlashDay: dailyMoney hours: hoursInteger days: daysInteger	&lt;fitTakes: #( #Money   #Money   #Integer   #Integer )&gt;	&lt;fitReturns: #Money&gt;	weeks := 0.	hours := hoursInteger.	days := daysInteger.	perHourCost := hourlyMoney.	perDayCost := dailyMoney.	rates := Rates				hourly: hourlyMoney				daily: dailyMoney				weekly: (Money dollars: 5000).	^self costInDollar</body></methods><methods><class-id>Rent.RefundCalculateFixture</class-id> <category>operations</category><body package="Fit-Book-RPS-Fixtures">refundPaidTime: paidDuration actualTime: actualDuration	&lt;fitTakes: #(#DurationRPS #DurationRPS)&gt;	&lt;fitReturns: #Money&gt;	^(rates costForPeriod: paidDuration)		- (rates costForPeriod: actualDuration)</body></methods><methods><class-id>Rent.RefundColumnFixture</class-id> <category>operations</category><body package="Fit-Book-RPS-Fixtures">refund	&lt;fitReturns: #Double&gt;	^(charge1 refundForHours: hours1 days: days1 weeks: weeks1)		- (charge2 refundForHours: hours2 days: days2 weeks: weeks2)</body></methods><methods><class-id>Rent.RefundColumnFixture</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">days1: anInteger	&lt;fitTakes: #Integer&gt;	^days1 := anInteger</body><body package="Fit-Book-RPS-Fixtures">days2: anInteger	&lt;fitTakes: #Integer&gt;	^days2 := anInteger</body><body package="Fit-Book-RPS-Fixtures">hours1: anInteger	&lt;fitTakes: #Integer&gt;	hours1 := anInteger</body><body package="Fit-Book-RPS-Fixtures">hours2: anInteger	&lt;fitTakes: #Integer&gt;	hours2 := anInteger</body><body package="Fit-Book-RPS-Fixtures">weeks1: anInteger	&lt;fitTakes: #Integer&gt;	^weeks1 := anInteger</body><body package="Fit-Book-RPS-Fixtures">weeks2: anInteger	&lt;fitTakes: #Integer&gt;	^weeks2 := anInteger</body></methods><methods><class-id>Rent.AdminTransactionAdapter</class-id> <category>operations</category><body package="Fit-Book-RPS-Fixtures">add: anInteger ofType: aString costing: hourlyMoney slashHour: dailyMoney slashDay: weeklyMoney slashWeekBond: bondMoney	&lt;fitTakes: #( #Integer   #String   #Money   #Money   #Money   #Money )&gt;	&lt;fitReturns: #Boolean&gt;	| rates |	rates := Rates hourly: hourlyMoney daily: dailyMoney weekly: weeklyMoney.	^transaction		add: anInteger		ofRentalItemType: aString		rates: rates		bond: bondMoney</body><body package="Fit-Book-RPS-Fixtures">add: anInteger toSalesItemOfType: aString	&lt;fitTakes: #(#Integer #String)&gt;	&lt;fitReturns: #Boolean&gt;	| itemType |	itemType := (rentEz buyItemNamed: aString) ifNil: [^false].	itemType add: anInteger.	^true</body><body package="Fit-Book-RPS-Fixtures">addDeliveryCity: cityString zone: zoneString flatRate: aMoney deliveryRatePercent: aDouble	&lt;fitTakes: #( #String   #String   #Money   #Double )&gt;	&lt;fitReturns: #Boolean&gt;	^transaction		createDeliveryZone: zoneString		inCity: cityString		flatFee: aMoney		rate: aDouble</body><body package="Fit-Book-RPS-Fixtures">addIdentified: idString ofType: typeString lastMaintained: aMyDate periodOfMonths: aDouble	&lt;fitTakes: #( #String   #String   #MyDate   #Double )&gt;	&lt;fitReturns: #Boolean&gt;	^transaction		addIdentifiedRentalItem: idString		ofType: typeString		lastMaintainedDate: aMyDate		monthsBetweenMaintenance: aDouble</body><body package="Fit-Book-RPS-Fixtures">addSalesItem: anInteger ofType: aString costingEach: aMoney	&lt;fitTakes: #(#Integer #String #Money)&gt;	&lt;fitReturns: #Boolean&gt;	[rentEz createBuyItemType: aString count: anInteger sellingPrice: aMoney]		on: DuplicateException		do: [:ex | ^false].	^true</body><body package="Fit-Book-RPS-Fixtures">alterTemplate: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #Boolean&gt;	^(rentEz templateNamed: aString)		ifNil: [false]		ifNotNil: 			[templateName := aString.			true]</body><body package="Fit-Book-RPS-Fixtures">changeDeliveryCity: cityString zone: zoneString flatRate: oldMoney deliveryRatePercent: aDouble toFlatRate: newMoney	&lt;fitTakes: #( #String   #String   #Money   #Double   #Money )&gt;	&lt;fitReturns: #Boolean&gt;	^transaction		changeDeliveryZone: zoneString		inCity: cityString		flatFee: oldMoney		rate: aDouble		toFlatRate: newMoney</body><body package="Fit-Book-RPS-Fixtures">completeTransaction	&lt;fitReturns: #Boolean&gt;	^transaction complete</body><body package="Fit-Book-RPS-Fixtures">createClient: nameString withPhoneNumber: phoneString inCity: cityString inZone: zoneString atAddress: addressString	&lt;fitTakes: #( #String   #String   #String   #String   #String )&gt;	^transaction addClient: (Client				named: nameString				phoneNumber: phoneString				email: ''				city: cityString				zone: zoneString				address: addressString				creator: (StaffMember named: 'admin' phoneNumber: 'xxxxxxx' creator: nil))</body><body package="Fit-Book-RPS-Fixtures">createClient: nameString withPhoneNumber: phoneString withEmail: emailString inCity: cityString inZone: zoneString atAddress: addressString	&lt;fitTakes: #( #String   #String   #String   #String   #String   #String )&gt;	^transaction addClient: (Client				named: nameString				phoneNumber: phoneString				email: emailString				city: cityString				zone: zoneString				address: addressString				creator: (StaffMember named: 'admin' phoneNumber: 'xxxxxxx' creator: nil))</body><body package="Fit-Book-RPS-Fixtures">deleteClient: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #Boolean&gt;	^transaction removeClientNamed: aString</body><body package="Fit-Book-RPS-Fixtures">maintenanceComplete: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #Boolean&gt;	^(rentEz rentalItemTypeFor: aString)		ifNil: [false]		ifNotNil: [:itemType | transaction maintenanceCompleteForItem: aString ofType: itemType]</body><body package="Fit-Book-RPS-Fixtures">modifyClient: nameString setPhoneNumber: phoneString inCity: cityString inZone: zoneString atAddress: addressString	&lt;fitTakes: #( #String   #String   #String   #String   #String )&gt;	^(transaction removeClientNamed: nameString) and: 			[transaction addClient: (Client						named: nameString						phoneNumber: phoneString						email: ''						city: cityString						zone: zoneString						address: addressString						creator: (StaffMember named: 'admin' phoneNumber: 'xxxxxxx' creator: nil))]</body><body package="Fit-Book-RPS-Fixtures">removeDeliveryCity: cityString zone: zoneString	&lt;fitTakes: #(#String #String)&gt;	&lt;fitReturns: #Boolean&gt;	^transaction deleteDeliveryZone: zoneString inCity: cityString</body><body package="Fit-Book-RPS-Fixtures">topupPoints: aDouble forClient: aString	&lt;fitTakes: #(#Double #String)&gt;	&lt;fitReturns: #Boolean&gt;	^(rentEz clientNamed: aString)		topupBonusPoints: (BonusPoints dollars: aDouble)</body></methods><methods><class-id>Rent.AdminTransactionAdapter</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">requiringMaintenance	&lt;fitReturns: #(#String)&gt;	^rentEz itemsNeedingRepairAsOf: rentEz time</body></methods><methods><class-id>Rent.AdminTransactionAdapter</class-id> <category>template helpers</category><body package="Fit-Book-RPS-Fixtures">delete: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #Boolean&gt;	^transaction deleteItem: aString fromTemplate: templateName</body><body package="Fit-Book-RPS-Fixtures">one: aString forPeople: aFloat	&lt;fitTakes: #(#String #Float)&gt;	&lt;fitReturns: #Boolean&gt;	^transaction alterItem: aString inTemplate: templateName people: aFloat</body></methods><methods><class-id>Rent.BonusPointCalculation</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">rentnzDollarActualDollarSpent: aMoney	&lt;fitTakes: #Money&gt;	&lt;fitReturns: #BonusPoints&gt;	^BonusPoints forAmountSpent: aMoney</body></methods><methods><class-id>Rent.CalculateRefund2</class-id> <category>operations</category><body package="Fit-Book-RPS-Fixtures">refundDollarPerHour: hourlyMoney perDay: dailyMoney perWeek: weeklyMoney	&lt;fitTakes: #(#Money #Money #Money)&gt;	&lt;fitReturns: #Fixture&gt;	^RefundCalculateFixture		rates: (Rates hourly: hourlyMoney daily: dailyMoney weekly: weeklyMoney)</body></methods><methods><class-id>Rent.CalculateLateHours</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">countGrace: aBoolean	&lt;fitTakes: #Boolean&gt;	countGrace := aBoolean</body><body package="Fit-Book-RPS-Fixtures">extraHours	&lt;fitReturns: #Integer&gt;	countGrace ifFalse: [hoursLate := hoursLate - grace].	hoursLate &gt;= grace ifTrue: [^highDemand + hoursLate truncated].	^0</body><body package="Fit-Book-RPS-Fixtures">grace: anInteger	&lt;fitTakes: #Integer&gt;	grace := anInteger</body><body package="Fit-Book-RPS-Fixtures">highDemand: anInteger	&lt;fitTakes: #Integer&gt;	highDemand := anInteger</body><body package="Fit-Book-RPS-Fixtures">hoursLate: aDouble	&lt;fitTakes: #Double&gt;	hoursLate := aDouble</body></methods><methods><class-id>Rent.StartApplication</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">accountOwingForIs: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #Money&gt;	^(rentEz clientNamed: aString) amountOwing</body><body package="Fit-Book-RPS-Fixtures">applyRestrictions	&lt;fitReturns: #Fixture&gt;	^self setup</body><body package="Fit-Book-RPS-Fixtures">calculatedDeliveryRate	&lt;fitReturns: #CalculateFixture&gt;	^CalculateDeliveryRate rentEz: rentEz</body><body package="Fit-Book-RPS-Fixtures">calculatedDiscount	&lt;fitReturns: #CalculateFixture&gt;	^self calculate: BonusPointCalculation new</body><body package="Fit-Book-RPS-Fixtures">clientBookingList: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #SetFixture&gt;	^SetFixture actuals: (self clientNamed: aString) bookings</body><body package="Fit-Book-RPS-Fixtures">clientList	&lt;fitReturns: #(#Set #Client)&gt;	^rentEz clients</body><body package="Fit-Book-RPS-Fixtures">deliveriesForClient: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #(#OrderedCollection #Delivery)&gt;	^(rentEz clientNamed: aString) deliveries</body><body package="Fit-Book-RPS-Fixtures">deliveryCostList	&lt;fitReturns: #SetFixture&gt;	^SetFixture actuals: rentEz deliveryRates</body><body package="Fit-Book-RPS-Fixtures">invalidCreditCards	&lt;fitReturns: #ConstraintTraverse&gt;	^ConstraintTraverse		systemUnderTest: (CreditCardValidationFixture rentEz: rentEz)		expected: false</body><body package="Fit-Book-RPS-Fixtures">permittedCombinationOfPayments	&lt;fitReturns: #PermittedMixtureOfPayments&gt;	^PermittedMixtureOfPayments systemUnderTest: rentEz</body><body package="Fit-Book-RPS-Fixtures">pointBalanceForClient: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #Double&gt;	^(self clientNamed: aString) bonusPoints valueInDouble</body><body package="Fit-Book-RPS-Fixtures">rentalItem	&lt;fitReturns: #(#Set #RentalItemType)&gt;	^self rentalItemList</body><body package="Fit-Book-RPS-Fixtures">rentalItemList	&lt;fitReturns: #(#Set #RentalItemType)&gt;	^rentEz rentalItemTypes values asSet</body><body package="Fit-Book-RPS-Fixtures">salesGoodsSubset	&lt;fitReturns: #SubsetFixture&gt;	^SubsetFixture actuals: rentEz buyItems</body><body package="Fit-Book-RPS-Fixtures">salesItemList	&lt;fitReturns: #SetFixture&gt;	^SetFixture actuals: rentEz buyItems</body><body package="Fit-Book-RPS-Fixtures">setup	&lt;fitReturns: #SetUpFixture&gt;	^setUp</body><body package="Fit-Book-RPS-Fixtures">totalCommission	&lt;fitReturns: #SetFixture&gt;	^SetFixture actuals: self mapCommissionToAdapter</body><body package="Fit-Book-RPS-Fixtures">transactionsPending	&lt;fitReturns: #SetFixture&gt;	^SetFixture		actuals: (rentEz pendingClientTransactions				collect: [:each | ClientTransactionsAdapter for: each]) asSet</body><body package="Fit-Book-RPS-Fixtures">validCreditCards	&lt;fitReturns: #ConstraintTraverse&gt;	^ConstraintTraverse		systemUnderTest: (CreditCardValidationFixture rentEz: rentEz)</body><body package="Fit-Book-RPS-Fixtures">validateEmail	&lt;fitReturns: #Fixture&gt;	^self calculate: EmailValidationFixture new</body></methods><methods><class-id>Rent.StartApplication</class-id> <category>operations</category><body package="Fit-Book-RPS-Fixtures">beginAdminTransaction: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #AdminTransactionAdapter&gt;	^AdminTransactionAdapter transaction: (rentEz beginAdminTransaction: aString)		rentEz: rentEz</body><body package="Fit-Book-RPS-Fixtures">beginDeliveryTransactionForClient: clientString city: cityString zone: zoneString address: addressString staff: staffString	&lt;fitTakes: #( #String   #String   #String   #String   #String )&gt;	&lt;fitReturns: #DeliveryTransaction&gt;	| transaction |	transaction := rentEz beginClientTransaction: clientString				staff: staffString.	^DeliveryTransaction		forTransaction: transaction		city: cityString		zone: zoneString		address: addressString		rentEz: rentEz</body><body package="Fit-Book-RPS-Fixtures">beginDeliveryTransactionForClient: clientString staff: staffString	&lt;fitTakes: #(#String #String)&gt;	&lt;fitReturns: #DeliveryTransaction&gt;	| transaction |	transaction := rentEz beginClientTransaction: clientString				staff: staffString.	^DeliveryTransaction forTransaction: transaction rentEz: rentEz</body><body package="Fit-Book-RPS-Fixtures">beginTransactionForClient: clientNameString staff: staffNameString	&lt;fitTakes: #(#String #String)&gt;	&lt;fitReturns: #TransactionAdapter&gt;	| transaction |	transaction := rentEz beginClientTransaction: clientNameString				staff: staffNameString.	^TransactionAdapter rentEz: rentEz transaction: transaction</body><body package="Fit-Book-RPS-Fixtures">calculateChargeFairly	&lt;fitReturns: #CalculateFixture&gt;	^self calculateFairCharges</body><body package="Fit-Book-RPS-Fixtures">calculateFairCharges	&lt;fitReturns: #CalculateFixture&gt;	^self		calculateChargeFairlyPerHour: Money zero		perDay: Money zero		perWeek: Money zero</body><body package="Fit-Book-RPS-Fixtures">completeTransaction	&lt;fitReturns: #Boolean&gt;	^false</body><body package="Fit-Book-RPS-Fixtures">createTemplate: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #CreateTemplate&gt;	^CreateTemplate named: aString rentEz: rentEz</body><body package="Fit-Book-RPS-Fixtures">givenRentals: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #SetUpFixture&gt;	^SetUpFixture		systemUnderTest: (SetUpRentals forClientNamed: aString rentEz: rentEz)</body><body package="Fit-Book-RPS-Fixtures">identifiedRentalItemSubset	&lt;fitReturns: #SubsetFixture&gt;	^SubsetFixture actuals: rentEz allIdentifiedHireItems</body><body package="Fit-Book-RPS-Fixtures">refundDollarPerHour: hourlyMoney perDay: dailyMoney perWeek: weeklyMoney	&lt;fitTakes: #(#Money #Money #Money)&gt;	&lt;fitReturns: #CalculateFixture&gt;	| staff client item |	staff := self makeDummyStaff.	client := self makeDummyClient.	item := self makeDummyRentalItemWithRates: (Rates						hourly: hourlyMoney						daily: dailyMoney						weekly: weeklyMoney).	^self calculate: (Refunder				staff: staff				client: client				item: item name				rentEz: rentEz)</body><body package="Fit-Book-RPS-Fixtures">rentalItemSubset	&lt;fitReturns: #SubsetFixture&gt;	^SubsetFixture actuals: self rentalItemListPrivate</body><body package="Fit-Book-RPS-Fixtures">rentalsOfClient: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #(#OrderedCollection #Rental)&gt;	^(self clientNamed: aString) rentals</body><body package="Fit-Book-RPS-Fixtures">resumeAdminTransactionFor: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #AdminTransactionAdapter&gt;	| transaction |	transaction := rentEz resumeAdminTransaction: aString.	^AdminTransactionAdapter transaction: transaction rentEz: rentEz</body><body package="Fit-Book-RPS-Fixtures">resumeTransactionForClient: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #TransactionAdapter&gt;	| transaction |	transaction := rentEz resumeClientTransaction: aString.	^TransactionAdapter rentEz: rentEz transaction: transaction</body><body package="Fit-Book-RPS-Fixtures">timeIsNow: aMyDate	&lt;fitTakes: #MyDate&gt;	&lt;fitReturns: #Boolean&gt;	mockClock time: aMyDate.	rentEz forMaintenance.	^true</body><body package="Fit-Book-RPS-Fixtures">validateCreditCard	&lt;fitReturns: #CalculateFixture&gt;	^self calculate: (CreditCardValidationFixture rentEz: rentEz)</body></methods><methods><class-id>Rent.ClientTransactionsAdapter</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">client	&lt;fitReturns: #String&gt;	^transaction client name</body><body package="Fit-Book-RPS-Fixtures">owing	&lt;fitReturns: #Money&gt;	^transaction owing</body><body package="Fit-Book-RPS-Fixtures">staff	&lt;fitReturns: #String&gt;	^transaction staff</body></methods><methods><class-id>Rent.CalculateRefund</class-id> <category>operations</category><body package="Fit-Book-RPS-Fixtures">rateDollar: perHourDouble slashHour: perDayDouble slashDaySlashWeek: perWeekDouble	&lt;fitTakes: #(#Double #Double #Double)&gt;	&lt;fitReturns: #Fixture&gt;	^RefundColumnFixture		hourly: perHourDouble		daily: perDayDouble		weekly: perWeekDouble</body></methods><methods><class-id>Rent.SetUpRentals</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">rentalItem: aString count: anInteger startDate: startMyDate endDate: endMyDate	&lt;fitTakes: #( #String   #Integer   #MyDate   #MyDate )&gt;	| clientTransaction duration hireCost |	clientTransaction := rentEz				beginClientTransaction: clientName				staff: 'Admin'				startDate: startMyDate.	duration := startMyDate durationTo: endMyDate.	hireCost := clientTransaction				rent: anInteger				of: (rentEz rentalItemTypeNamed: aString)				for: duration.	clientTransaction payWithCash: hireCost.	clientTransaction complete ifFalse: [^self error: 'Unable to complete']</body></methods><methods><class-id>Rent.CommissionAdapter</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">staff	&lt;fitReturns: #String&gt;	^staffMember name</body><body package="Fit-Book-RPS-Fixtures">total	&lt;fitReturns: #Money&gt;	^staffMember commissionEarnings</body></methods><methods><class-id>Rent.CalculateFairCharge</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">ratesDollarPerHour: hourlyMoney perDay: dailyMoney perWeek: weeklyMoney	&lt;fitTakes: #(#Money #Money #Money)&gt;	^FairCharge		rates: (Rates hourly: hourlyMoney daily: dailyMoney weekly: weeklyMoney)</body></methods><methods><class-id>Rent.FairCharge</class-id> <category>operations</category><body package="Fit-Book-RPS-Fixtures">fairlyMinusChargedDurationDuration: aDurationRPS	&lt;fitTakes: #DurationRPS&gt;	&lt;fitReturns: #DurationRPS&gt;	^rates fairDuration: aDurationRPS</body></methods><methods><class-id>Rent.DeliveryTransaction</class-id> <category>operations</category><body package="Fit-Book-RPS-Fixtures">book: anInteger _: aString on: aMyDate for: aDurationRPS	&lt;fitTakes: #( #Integer   #String   #MyDate   #DurationRPS )&gt;	&lt;fitReturns: #Money&gt;	^city		ifNil: 			[clientTransaction				book: anInteger				of: (rentEz rentalItemTypeNamed: aString)				on: aMyDate				for: aDurationRPS				deliveryRate: (rentEz deliveryRateForClient: clientTransaction client)]		ifNotNil: 			[clientTransaction				book: anInteger				of: (rentEz rentalItemTypeNamed: aString)				on: aMyDate				for: aDurationRPS				deliveryRate: (rentEz deliveryRateForCity: city zone: zone)				address: address]</body><body package="Fit-Book-RPS-Fixtures">completeTransaction	&lt;fitReturns: #Boolean&gt;	^clientTransaction complete</body><body package="Fit-Book-RPS-Fixtures">payWithCashDollar: aMoney	&lt;fitTakes: #Money&gt;	&lt;fitReturns: #Boolean&gt;	^clientTransaction payWithCash: aMoney</body></methods><methods><class-id>Rent.EmailValidationFixture</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">validEmail: aString	&lt;fitTakes: #String&gt;	&lt;fitReturns: #Boolean&gt;	^Client isValidEmail: aString</body></methods><methods><class-id>Rent.GeneralSetUp</class-id> <category>operations</category><body package="Fit-Book-RPS-Fixtures">city: cityString zone: zoneString deliveryRateFlatFee: aMoney deliveryRatePercent: aDouble	&lt;fitTakes: #( #String   #String   #Money   #Double )&gt;	| rate |	rate := DeliveryRate				city: cityString				zone: zoneString				flatFee: aMoney				rate: aDouble.	rentEz createDeliveryZone: rate</body><body package="Fit-Book-RPS-Fixtures">clientName: nameString phone: phoneString	&lt;fitTakes: #(#String #String)&gt;	rentEz		createClient: nameString		phone: phoneString		creator: self admin</body><body package="Fit-Book-RPS-Fixtures">clientName: nameString phone: phoneString accountLimit: aMoney	&lt;fitTakes: #(#String #String #Money)&gt;	self clientName: nameString phone: phoneString</body><body package="Fit-Book-RPS-Fixtures">clientName: nameString phone: phoneString city: cityString zone: zoneString deliveryAddress: addressString	&lt;fitTakes: #( #String   #String   #String   #String   #String )&gt;	rentEz		createClient: nameString		phone: phoneString		city: cityString		zone: zoneString		address: addressString		creator: self admin</body><body package="Fit-Book-RPS-Fixtures">rentalItemName: aString count: anInteger dollarSlashHour: hourlyMoney dollarSlashDay: dailyMoney dollarSlashWeek: weeklyMoney deposit: depositMoney	&lt;fitTakes: #( #String   #Integer   #Money   #Money   #Money   #Money )&gt;	rentEz		createRentalItemType: aString		initialCount: anInteger		rates: (Rates hourly: hourlyMoney daily: dailyMoney weekly: weeklyMoney)		deposit: depositMoney</body><body package="Fit-Book-RPS-Fixtures">rentalItemName: aString restrictionId: anInteger	&lt;fitTakes: #(#String #Integer)&gt;	rentEz applyRestriction: anInteger toItem: aString</body><body package="Fit-Book-RPS-Fixtures">restrictionId: anInteger constraint: aString	&lt;fitTakes: #(#Integer #String)&gt;	rentEz createItemRestrictionId: anInteger constraint: aString</body><body package="Fit-Book-RPS-Fixtures">salesItemName: aString count: anInteger sellingPrice: aMoney	&lt;fitTakes: #(#String #Integer #Money)&gt;	^rentEz createBuyItemType: aString count: anInteger sellingPrice: aMoney</body><body package="Fit-Book-RPS-Fixtures">staffName: nameString phone: phoneString	&lt;fitTakes: #(#String #String)&gt;	rentEz		createStaffMember: nameString		phone: phoneString		creator: self admin</body><body package="Fit-Book-RPS-Fixtures">staffName: nameString phone: phoneString commissionPercent: aFloat	&lt;fitTakes: #(#String #String #Float)&gt;	rentEz		createStaffMember: nameString		phone: phoneString		commissionRate: aFloat		creator: self admin</body><body package="Fit-Book-RPS-Fixtures">staffName: nameString phone: phoneString commissionPercent: commissionFloat discountPercent: discountFloat	&lt;fitTakes: #( #String   #String   #Float   #Float )&gt;	rentEz		createStaffMember: nameString		phone: phoneString		commissionRate: commissionFloat		discountRate: discountFloat		creator: self admin</body></methods><methods><class-id>Rent.PermittedMixtureOfPayments</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">combine: methodString1 and: methodString2	&lt;fitTakes: #(#String #String)&gt;	&lt;fitReturns: #Boolean&gt;	| pay1 pay2 |	(self rentEz clientNamed: 'Joanna')		topupBonusPoints: (BonusPoints cents: 99).	transaction := self rentEz beginClientTransaction: 'Joanna' staff: 'Bill'.	transaction		book: 1		of: (self rentEz rentalItemTypeNamed: 'cup')		on: MyDate new		for: (DurationRPS days: 1).	pay1 := self payWithMethod: methodString1.	pay2 := self payWithMethod: methodString2.	transaction		abort;		complete.	^pay1 and: [pay2]</body></methods><methods><class-id>Rent.CreateTemplate</class-id> <category>accessing</category><body package="Fit-Book-RPS-Fixtures">one: itemNameString for: itemUseString forPeople: aFloat	&lt;fitTakes: #(#String #String #Float)&gt;	| itemType |	itemType := nil.	(itemUseString equivalentTo: 'booking or renting' ignoreCase: true)		ifTrue: [itemType := rentEz rentalItemTypeNamed: itemNameString].	(itemUseString equivalentTo: 'sale' ignoreCase: true)		ifTrue: [itemType := rentEz salesItemTypeNamed: itemNameString].	template addItem: itemType forPeople: aFloat</body><body package="Fit-Book-RPS-Fixtures">one: aString forPeople: aFloat	&lt;fitTakes: #(#String #Float)&gt;	template addItem: (rentEz rentalItemTypeNamed: aString) forPeople: aFloat</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>CombinationFixture</name><environment>Fitlibrary</environment><super>Fitlibrary.FunctionFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>FitLibrary</package></attributes></class><class><name>CalculateFixture</name><environment>Fitlibrary</environment><super>Fitlibrary.FunctionFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>FitLibrary</package></attributes></class><class><name>DoFixture</name><environment>Fitlibrary</environment><super>Fitlibrary.FitLibraryFixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>FitLibrary</package></attributes></class><class><name>ColumnFixture</name><environment>Fit</environment><super>Fit.Fixture</super><private>false</private><indexed-type>none</indexed-type><inst-vars>columnBindings hasExecuted </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Fit Framework</category><attributes><package>Fit</package></attributes></class></st-source>